--- 
+++ 
@@ -6,15 +6,7 @@
 
   Node block = fnNode.getLastChild();
 
-  boolean hasSideEffects = false;
-  if (block.hasChildren()) {
-    Preconditions.checkState(block.hasOneChild());
-    Node stmt = block.getFirstChild();
-    if (stmt.isReturn()) {
-      hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);
-    }
-  }
-  // CALL NODE: [ NAME, ARG1, ARG2, ... ]
+  // CALL NODE: [ NAME, ARG1, ARG2,... ]
   Node cArg = callNode.getFirstChild().getNext();
 
   // Functions called via 'call' and 'apply' have a this-object as
@@ -23,7 +15,7 @@
   if (!callNode.getFirstChild().isName()) {
     if (NodeUtil.isFunctionObjectCall(callNode)) {
       // TODO(johnlenz): Support replace this with a value.
-      if (cArg == null || !cArg.isThis()) {
+      if (cArg == null ||!cArg.isThis()) {
         return CanInlineResult.NO;
       }
       cArg = cArg.getNext();
@@ -33,15 +25,12 @@
     }
   }
 
-  // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
+  // FUNCTION NODE -> LP NODE: [ ARG1, ARG2,... ]
   Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
-  while (cArg != null || fnParam != null) {
+  while (cArg!= null || fnParam!= null) {
     // For each named parameter check if a mutable argument use more than one.
-    if (fnParam != null) {
-      if (cArg != null) {
-        if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {
-          return CanInlineResult.NO;
-        }
+    if (fnParam!= null) {
+      if (cArg!= null) {
         // Check for arguments that are evaluated more than once.
         // Note: Unlike block inlining, there it is not possible that a
         // parameter reference will be in a loop.
@@ -58,7 +47,7 @@
 
     // For every call argument check for side-effects, even if there
     // isn't a named parameter to match.
-    if (cArg != null) {
+    if (cArg!= null) {
       if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
         return CanInlineResult.NO;
       }
