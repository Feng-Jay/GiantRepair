Repair : closure_113
Current failed test : com.google.javascript.jscomp.VarCheckTest::testNoUndeclaredVarWhenUsingClosurePass | 2023.11.13 AD at 19:06:36 CST
Patch Number: /Users/ffengjay/Postgraduate/PLM4APR/codex_out/valuable_patches_codellama_real/closure_113/patch.java
Following are 0th generated patches:
0.0
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!t.inGlobalHoistScope()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!t.inGlobalHoistScope()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.10784313725490197
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!t.hasScope()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!t.hasScope()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.10784313725490197
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!moduleGraph.inGlobalHoistScope()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!moduleGraph.inGlobalHoistScope()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.11764705882352941
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& t.hasScope()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&t.hasScope()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.11764705882352941
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& moduleGraph.inGlobalHoistScope()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&moduleGraph.inGlobalHoistScope()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.13725490196078433
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isQualifiedName()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isQualifiedName()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.13725490196078433
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isFalse()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isFalse()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.13725490196078433
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isGetProp()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isGetProp()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.13725490196078433
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isParamList()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isParamList()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.13725490196078433
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.isScript()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.isScript()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.14705882352941177
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isQualifiedName()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isQualifiedName()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.14705882352941177
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isFalse()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isFalse()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.14705882352941177
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isGetProp()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isGetProp()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.14705882352941177
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isParamList()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isParamList()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.14705882352941177
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.isScript()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.isScript()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.14705882352941177
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.getBooleanProp()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.getBooleanProp()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.14705882352941177
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isEquivalentTo()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isEquivalentTo()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.14705882352941177
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.wasEmptyNode()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.wasEmptyNode()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.14705882352941177
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isLocalResultCall()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isLocalResultCall()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.14705882352941177
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isArrayLit()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isArrayLit()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.14705882352941177
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isBlock()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isBlock()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.14705882352941177
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isCase()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isCase()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.14705882352941177
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isCast()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isCast()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.14705882352941177
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isCatch()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isCatch()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.14705882352941177
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isContinue()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isContinue()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.14705882352941177
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isDefaultCase()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isDefaultCase()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.14705882352941177
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isDelProp()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isDelProp()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.14705882352941177
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isHook()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isHook()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.14705882352941177
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isLabelName()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isLabelName()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.14705882352941177
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isScript()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isScript()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.14705882352941177
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isSwitch()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isSwitch()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.14705882352941177
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isScript()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isScript()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.14705882352941177
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isScript()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isScript()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.14705882352941177
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.isBlock()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.isBlock()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.14705882352941177
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.isCase()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.isCase()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.14705882352941177
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.isDec()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.isDec()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.14705882352941177
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.isDo()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.isDo()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.14705882352941177
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.isFalse()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.isFalse()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.14705882352941177
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.isFor()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.isFor()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.14705882352941177
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.isGetProp()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.isGetProp()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.14705882352941177
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.isHook()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.isHook()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.14705882352941177
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.isInc()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.isInc()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.14705882352941177
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.isName()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.isName()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.14705882352941177
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.isNot()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.isNot()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.14705882352941177
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.isThrow()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.isThrow()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.14705882352941177
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.isTrue()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.isTrue()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.14705882352941177
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.isVoid()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.isVoid()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.14705882352941177
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.isWhile()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.isWhile()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(!t.inGlobalHoistScope()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(!t.inGlobalHoistScope()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.getBooleanProp()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.getBooleanProp()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isEquivalentTo()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isEquivalentTo()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.wasEmptyNode()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.wasEmptyNode()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isLocalResultCall()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isLocalResultCall()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isArrayLit()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isArrayLit()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isBlock()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isBlock()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isCase()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isCase()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isCast()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isCast()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isCatch()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isCatch()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isContinue()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isContinue()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isDefaultCase()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isDefaultCase()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isDelProp()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isDelProp()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isHook()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isHook()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isLabelName()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isLabelName()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isScript()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isScript()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isSwitch()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isSwitch()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isScript()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isScript()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isScript()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isScript()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.isBlock()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.isBlock()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.isCase()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.isCase()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.isDec()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.isDec()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.isDo()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.isDo()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.isFalse()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.isFalse()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.isFor()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.isFor()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.isGetProp()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.isGetProp()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.isHook()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.isHook()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.isInc()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.isInc()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.isName()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.isName()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.isNot()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.isNot()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.isThrow()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.isThrow()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.isTrue()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.isTrue()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.isVoid()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.isVoid()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.isWhile()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.isWhile()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isQuotedString()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isQuotedString()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isFromExterns()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isFromExterns()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isEquivalentTo(n)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isEquivalentTo(n)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isEquivalentToTyped()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isEquivalentToTyped()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isVarArgs()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isVarArgs()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isSyntheticBlock()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isSyntheticBlock()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.areAllFlagsSet()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.areAllFlagsSet()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isCall()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isCall()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isDec()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isDec()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isDo()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isDo()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isFor()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isFor()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isFunction()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isFunction()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isGetterDef()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isGetterDef()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isGetElem()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isGetElem()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isInc()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isInc()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isInstanceOf()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isInstanceOf()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isLabel()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isLabel()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isName()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isName()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isNot()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isNot()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isObjectLit()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isObjectLit()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isThis()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isThis()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isThrow()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isThrow()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isTrue()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isTrue()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isVoid()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isVoid()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isWhile()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isWhile()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isWith()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isWith()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.wasEmptyNode()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.wasEmptyNode()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.isScript()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.isScript()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isQualifiedName()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isQualifiedName()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.wasEmptyNode()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.wasEmptyNode()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isBlock()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isBlock()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isCase()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isCase()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isDec()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isDec()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isDo()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isDo()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isFalse()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isFalse()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isFor()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isFor()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isGetProp()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isGetProp()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isHook()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isHook()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isInc()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isInc()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isName()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isName()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isNot()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isNot()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isParamList()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isParamList()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isThrow()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isThrow()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isTrue()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isTrue()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isVoid()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isVoid()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isWhile()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isWhile()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isQualifiedName()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isQualifiedName()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.wasEmptyNode()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.wasEmptyNode()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isBlock()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isBlock()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isCase()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isCase()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isDec()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isDec()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isDo()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isDo()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isFalse()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isFalse()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isFor()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isFor()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isGetProp()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isGetProp()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isHook()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isHook()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isInc()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isInc()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isName()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isName()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isNot()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isNot()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isParamList()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isParamList()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isThrow()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isThrow()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isTrue()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isTrue()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isVoid()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isVoid()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isWhile()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isWhile()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!typeDecls.isEmpty()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!typeDecls.isEmpty()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.wasEmptyNode()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.wasEmptyNode()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.isAdd()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.isAdd()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.isAnd()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.isAnd()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.isAssign()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.isAssign()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.isBreak()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.isBreak()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.isCall()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.isCall()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.isCast()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.isCast()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.isCatch()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.isCatch()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.isComma()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.isComma()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.isContinue()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.isContinue()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.isDelProp()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.isDelProp()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.isEmpty()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.isEmpty()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.isGetElem()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.isGetElem()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.isIf()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.isIf()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.isIn()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.isIn()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.isLabel()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.isLabel()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.isNE()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.isNE()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.isNew()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.isNew()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.isNull()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.isNull()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.isNumber()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.isNumber()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.isOr()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.isOr()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.isRegExp()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.isRegExp()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.isReturn()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.isReturn()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.isString()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.isString()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.isSwitch()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.isSwitch()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.isThis()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.isThis()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.isTry()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.isTry()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.isTypeOf()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.isTypeOf()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.isVar()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.isVar()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.isWith()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.isWith()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!BASE_CLASS_ERROR.inGlobalHoistScope()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!BASE_CLASS_ERROR.inGlobalHoistScope()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!compiler.isIdeMode()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!compiler.isIdeMode()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.1568627450980392
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!defineCalls.isEmpty()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!defineCalls.isEmpty()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isQuotedString()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isQuotedString()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isFromExterns()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isFromExterns()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isEquivalentTo(n)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isEquivalentTo(n)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isEquivalentToTyped()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isEquivalentToTyped()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isVarArgs()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isVarArgs()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isSyntheticBlock()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isSyntheticBlock()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.areAllFlagsSet()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.areAllFlagsSet()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isCall()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isCall()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isDec()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isDec()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isDo()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isDo()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isFor()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isFor()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isFunction()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isFunction()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isGetterDef()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isGetterDef()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isGetElem()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isGetElem()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isInc()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isInc()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isInstanceOf()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isInstanceOf()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isLabel()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isLabel()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isName()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isName()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isNot()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isNot()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isObjectLit()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isObjectLit()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isThis()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isThis()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isThrow()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isThrow()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isTrue()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isTrue()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isVoid()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isVoid()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isWhile()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isWhile()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isWith()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isWith()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.wasEmptyNode()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.wasEmptyNode()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.isScript()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.isScript()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isQualifiedName()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isQualifiedName()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.wasEmptyNode()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.wasEmptyNode()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isBlock()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isBlock()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isCase()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isCase()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isDec()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isDec()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isDo()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isDo()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isFalse()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isFalse()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isFor()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isFor()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isGetProp()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isGetProp()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isHook()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isHook()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isInc()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isInc()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isName()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isName()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isNot()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isNot()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isParamList()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isParamList()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isThrow()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isThrow()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isTrue()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isTrue()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isVoid()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isVoid()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isWhile()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isWhile()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isQualifiedName()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isQualifiedName()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.wasEmptyNode()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.wasEmptyNode()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isBlock()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isBlock()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isCase()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isCase()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isDec()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isDec()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isDo()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isDo()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isFalse()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isFalse()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isFor()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isFor()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isGetProp()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isGetProp()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isHook()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isHook()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isInc()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isInc()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isName()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isName()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isNot()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isNot()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isParamList()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isParamList()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isThrow()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isThrow()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isTrue()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isTrue()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isVoid()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isVoid()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isWhile()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isWhile()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& typeDecls.isEmpty()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&typeDecls.isEmpty()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.wasEmptyNode()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.wasEmptyNode()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.isAdd()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.isAdd()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.isAnd()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.isAnd()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.isAssign()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.isAssign()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.isBreak()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.isBreak()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.isCall()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.isCall()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.isCast()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.isCast()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.isCatch()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.isCatch()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.isComma()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.isComma()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.isContinue()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.isContinue()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.isDelProp()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.isDelProp()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.isEmpty()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.isEmpty()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.isGetElem()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.isGetElem()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.isIf()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.isIf()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.isIn()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.isIn()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.isLabel()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.isLabel()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.isNE()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.isNE()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.isNew()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.isNew()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.isNull()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.isNull()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.isNumber()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.isNumber()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.isOr()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.isOr()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.isRegExp()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.isRegExp()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.isReturn()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.isReturn()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.isString()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.isString()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.isSwitch()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.isSwitch()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.isThis()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.isThis()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.isTry()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.isTry()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.isTypeOf()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.isTypeOf()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.isVar()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.isVar()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.isWith()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.isWith()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& BASE_CLASS_ERROR.inGlobalHoistScope()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&BASE_CLASS_ERROR.inGlobalHoistScope()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& compiler.isIdeMode()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&compiler.isIdeMode()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& defineCalls.isEmpty()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&defineCalls.isEmpty()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.hasChildren()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.hasChildren()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.hasNext()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.hasNext()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.hasChild()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.hasChild()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.hasChild(name)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.hasChild(name)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isEquivalentTo(left)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isEquivalentTo(left)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isEquivalentTo(arg)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isEquivalentTo(arg)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isEquivalentTo(name)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isEquivalentTo(name)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isEquivalentToTyped(n)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isEquivalentToTyped(n)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isOptionalArg()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isOptionalArg()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isAdd()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isAdd()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isAnd()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isAnd()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isAssign()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isAssign()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isAssignAdd()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isAssignAdd()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isBreak()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isBreak()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isComma()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isComma()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isDebugger()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isDebugger()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isEmpty()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isEmpty()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isExprResult()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isExprResult()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isIf()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isIf()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isIn()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isIn()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isNE()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isNE()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isNew()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isNew()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isNull()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isNull()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isNumber()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isNumber()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isOr()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isOr()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isRegExp()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isRegExp()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isReturn()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isReturn()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isSetterDef()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isSetterDef()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isString()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isString()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isStringKey()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isStringKey()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isTry()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isTry()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isTypeOf()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isTypeOf()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isVar()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isVar()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.isBlock()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.isBlock()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.isCase()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.isCase()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.isContinue()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.isContinue()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.isDec()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.isDec()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.isDo()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.isDo()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.isFalse()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.isFalse()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.isFor()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.isFor()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.isGetProp()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.isGetProp()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.isHook()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.isHook()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.isInc()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.isInc()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.isName()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.isName()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.isNot()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.isNot()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.isSwitch()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.isSwitch()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.isThrow()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.isThrow()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.isTrue()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.isTrue()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.isVoid()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.isVoid()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.isWhile()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.isWhile()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.getBooleanProp()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.getBooleanProp()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isEquivalentTo()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isEquivalentTo()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isLocalResultCall()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isLocalResultCall()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isAdd()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isAdd()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isAnd()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isAnd()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isArrayLit()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isArrayLit()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isAssign()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isAssign()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isBreak()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isBreak()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isCall()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isCall()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isCast()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isCast()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isCatch()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isCatch()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isComma()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isComma()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isContinue()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isContinue()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isDefaultCase()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isDefaultCase()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isDelProp()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isDelProp()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isEmpty()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isEmpty()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isGetElem()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isGetElem()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isIf()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isIf()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isIn()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isIn()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isLabel()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isLabel()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isLabelName()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isLabelName()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isNE()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isNE()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isNew()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isNew()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isNull()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isNull()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isNumber()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isNumber()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isOr()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isOr()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isRegExp()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isRegExp()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isReturn()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isReturn()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isString()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isString()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isSwitch()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isSwitch()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isThis()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isThis()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isTry()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isTry()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isTypeOf()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isTypeOf()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isVar()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isVar()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isWith()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isWith()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.getBooleanProp()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.getBooleanProp()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isEquivalentTo()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isEquivalentTo()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isLocalResultCall()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isLocalResultCall()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isAdd()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isAdd()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isAnd()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isAnd()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isArrayLit()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isArrayLit()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isAssign()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isAssign()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isBreak()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isBreak()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isCall()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isCall()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isCast()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isCast()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isCatch()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isCatch()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isComma()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isComma()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isContinue()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isContinue()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isDefaultCase()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isDefaultCase()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isDelProp()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isDelProp()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isEmpty()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isEmpty()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isGetElem()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isGetElem()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isIf()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isIf()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isIn()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isIn()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isLabel()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isLabel()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isLabelName()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isLabelName()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isNE()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isNE()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isNew()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isNew()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isNull()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isNull()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isNumber()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isNumber()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isOr()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isOr()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isRegExp()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isRegExp()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isReturn()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isReturn()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isString()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isString()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isSwitch()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isSwitch()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isThis()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isThis()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isTry()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isTry()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isTypeOf()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isTypeOf()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isVar()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isVar()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isWith()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isWith()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!convention.isExported()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!convention.isExported()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!convention.isPrivate()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!convention.isPrivate()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.isQualifiedName()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.isQualifiedName()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.isVarArgs()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.isVarArgs()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.isDebugger()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.isDebugger()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.isFunction()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.isFunction()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.isGetterDef()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.isGetterDef()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.isInstanceOf()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.isInstanceOf()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.isParamList()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.isParamList()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.isSetterDef()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.isSetterDef()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.16666666666666666
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.isStringKey()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.isStringKey()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.hasChildren()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.hasChildren()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.hasNext()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.hasNext()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.hasChild()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.hasChild()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.hasChild(name)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.hasChild(name)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isEquivalentTo(left)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isEquivalentTo(left)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isEquivalentTo(arg)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isEquivalentTo(arg)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isEquivalentTo(name)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isEquivalentTo(name)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isEquivalentToTyped(n)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isEquivalentToTyped(n)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isOptionalArg()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isOptionalArg()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isAdd()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isAdd()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isAnd()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isAnd()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isAssign()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isAssign()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isAssignAdd()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isAssignAdd()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isBreak()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isBreak()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isComma()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isComma()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isDebugger()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isDebugger()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isEmpty()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isEmpty()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isExprResult()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isExprResult()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isIf()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isIf()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isIn()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isIn()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isNE()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isNE()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isNew()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isNew()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isNull()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isNull()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isNumber()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isNumber()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isOr()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isOr()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isRegExp()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isRegExp()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isReturn()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isReturn()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isSetterDef()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isSetterDef()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isString()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isString()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isStringKey()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isStringKey()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isTry()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isTry()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isTypeOf()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isTypeOf()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isVar()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isVar()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.isBlock()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.isBlock()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.isCase()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.isCase()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.isContinue()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.isContinue()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.isDec()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.isDec()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.isDo()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.isDo()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.isFalse()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.isFalse()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.isFor()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.isFor()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.isGetProp()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.isGetProp()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.isHook()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.isHook()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.isInc()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.isInc()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.isName()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.isName()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.isNot()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.isNot()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.isSwitch()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.isSwitch()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.isThrow()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.isThrow()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.isTrue()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.isTrue()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.isVoid()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.isVoid()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.isWhile()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.isWhile()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.getBooleanProp()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.getBooleanProp()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isEquivalentTo()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isEquivalentTo()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isLocalResultCall()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isLocalResultCall()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isAdd()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isAdd()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isAnd()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isAnd()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isArrayLit()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isArrayLit()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isAssign()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isAssign()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isBreak()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isBreak()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isCall()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isCall()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isCast()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isCast()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isCatch()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isCatch()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isComma()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isComma()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isContinue()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isContinue()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isDefaultCase()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isDefaultCase()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isDelProp()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isDelProp()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isEmpty()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isEmpty()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isGetElem()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isGetElem()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isIf()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isIf()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isIn()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isIn()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isLabel()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isLabel()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isLabelName()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isLabelName()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isNE()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isNE()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isNew()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isNew()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isNull()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isNull()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isNumber()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isNumber()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isOr()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isOr()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isRegExp()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isRegExp()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isReturn()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isReturn()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isString()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isString()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isSwitch()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isSwitch()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isThis()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isThis()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isTry()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isTry()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isTypeOf()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isTypeOf()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isVar()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isVar()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isWith()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isWith()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.getBooleanProp()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.getBooleanProp()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isEquivalentTo()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isEquivalentTo()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isLocalResultCall()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isLocalResultCall()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isAdd()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isAdd()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isAnd()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isAnd()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isArrayLit()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isArrayLit()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isAssign()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isAssign()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isBreak()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isBreak()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isCall()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isCall()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isCast()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isCast()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isCatch()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isCatch()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isComma()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isComma()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isContinue()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isContinue()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isDefaultCase()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isDefaultCase()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isDelProp()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isDelProp()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isEmpty()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isEmpty()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isGetElem()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isGetElem()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isIf()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isIf()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isIn()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isIn()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isLabel()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isLabel()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isLabelName()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isLabelName()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isNE()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isNE()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isNew()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isNew()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isNull()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isNull()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isNumber()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isNumber()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isOr()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isOr()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isRegExp()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isRegExp()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isReturn()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isReturn()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isString()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isString()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isSwitch()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isSwitch()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isThis()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isThis()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isTry()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isTry()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isTypeOf()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isTypeOf()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isVar()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isVar()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isWith()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isWith()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& convention.isExported()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&convention.isExported()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& convention.isPrivate()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&convention.isPrivate()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.isQualifiedName()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.isQualifiedName()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.isVarArgs()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.isVarArgs()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.isDebugger()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.isDebugger()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.isFunction()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.isFunction()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.isGetterDef()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.isGetterDef()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.isInstanceOf()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.isInstanceOf()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.isParamList()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.isParamList()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.isSetterDef()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.isSetterDef()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.isStringKey()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.isStringKey()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.hasOneChild()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.hasOneChild()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.hasChild(n)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.hasChild(n)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.hasChild(parent)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.hasChild(parent)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.hasChild(left)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.hasChild(left)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.hasChild(arg)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.hasChild(arg)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isEquivalentTo(parent)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isEquivalentTo(parent)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isEquivalentToShallow()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isEquivalentToShallow()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isUnscopedQualifiedName()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isUnscopedQualifiedName()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isNoSideEffectsCall()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isNoSideEffectsCall()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.mayMutateArguments()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.mayMutateArguments()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.hasChildren()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.hasChildren()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.getBooleanProp()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.getBooleanProp()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.hasNext()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.hasNext()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.hasChild()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.hasChild()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.hasChild(name)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.hasChild(name)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.isQualifiedName()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.isQualifiedName()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.isAdd()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.isAdd()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.isAnd()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.isAnd()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.isAssign()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.isAssign()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.isBreak()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.isBreak()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.isCall()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.isCall()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.isCast()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.isCast()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.isCatch()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.isCatch()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.isComma()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.isComma()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.isDefaultCase()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.isDefaultCase()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.isDelProp()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.isDelProp()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.isEmpty()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.isEmpty()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.isFunction()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.isFunction()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.isGetElem()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.isGetElem()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.isIf()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.isIf()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.isIn()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.isIn()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.isInstanceOf()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.isInstanceOf()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.isLabel()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.isLabel()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.isNE()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.isNE()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.isNew()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.isNew()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.isNull()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.isNull()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.isNumber()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.isNumber()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.isOr()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.isOr()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.isParamList()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.isParamList()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.isRegExp()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.isRegExp()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.isReturn()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.isReturn()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.isString()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.isString()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.isThis()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.isThis()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.isTry()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.isTry()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.isTypeOf()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.isTypeOf()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.isVar()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.isVar()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.isWith()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.isWith()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isQuotedString()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isQuotedString()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.hasChildren()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.hasChildren()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isFromExterns()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isFromExterns()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.hasNext()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.hasNext()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.hasChild()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.hasChild()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.hasChild(name)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.hasChild(name)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isEquivalentTo(n)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isEquivalentTo(n)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isEquivalentToTyped()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isEquivalentToTyped()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isVarArgs()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isVarArgs()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isSyntheticBlock()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isSyntheticBlock()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.areAllFlagsSet()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.areAllFlagsSet()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isDebugger()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isDebugger()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isFunction()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isFunction()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isGetterDef()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isGetterDef()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isInstanceOf()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isInstanceOf()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isObjectLit()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isObjectLit()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isSetterDef()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isSetterDef()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isStringKey()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isStringKey()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isQuotedString()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isQuotedString()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.hasChildren()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.hasChildren()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isFromExterns()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isFromExterns()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.hasNext()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.hasNext()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.hasChild()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.hasChild()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.hasChild(name)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.hasChild(name)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isEquivalentTo(n)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isEquivalentTo(n)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isEquivalentToTyped()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isEquivalentToTyped()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isVarArgs()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isVarArgs()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isSyntheticBlock()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isSyntheticBlock()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.areAllFlagsSet()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.areAllFlagsSet()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isDebugger()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isDebugger()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isFunction()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isFunction()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isGetterDef()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isGetterDef()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isInstanceOf()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isInstanceOf()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isObjectLit()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isObjectLit()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isSetterDef()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isSetterDef()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isStringKey()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isStringKey()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!convention.isConstant()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!convention.isConstant()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!convention.isConstantKey()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!convention.isConstantKey()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.hasChildren()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.hasChildren()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.getBooleanProp()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.getBooleanProp()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.hasNext()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.hasNext()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.hasChild()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.hasChild()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.hasChild(name)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.hasChild(name)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.isEquivalentTo()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.isEquivalentTo()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.isLocalResultCall()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.isLocalResultCall()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.isArrayLit()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.isArrayLit()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.isAssignAdd()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.isAssignAdd()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.isDefaultCase()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.isDefaultCase()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.isLabelName()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.isLabelName()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.isObjectLit()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.isObjectLit()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.17647058823529413
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!LATE_PROVIDE_ERROR.inGlobalHoistScope()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!LATE_PROVIDE_ERROR.inGlobalHoistScope()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.hasOneChild()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.hasOneChild()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.hasChild(n)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.hasChild(n)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.hasChild(parent)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.hasChild(parent)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.hasChild(left)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.hasChild(left)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.hasChild(arg)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.hasChild(arg)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isEquivalentTo(parent)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isEquivalentTo(parent)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isEquivalentToShallow()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isEquivalentToShallow()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isUnscopedQualifiedName()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isUnscopedQualifiedName()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isNoSideEffectsCall()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isNoSideEffectsCall()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.mayMutateArguments()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.mayMutateArguments()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.hasChildren()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.hasChildren()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.getBooleanProp()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.getBooleanProp()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.hasNext()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.hasNext()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.hasChild()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.hasChild()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.hasChild(name)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.hasChild(name)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.isQualifiedName()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.isQualifiedName()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.isAdd()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.isAdd()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.isAnd()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.isAnd()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.isAssign()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.isAssign()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.isBreak()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.isBreak()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.isCall()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.isCall()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.isCast()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.isCast()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.isCatch()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.isCatch()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.isComma()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.isComma()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.isDefaultCase()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.isDefaultCase()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.isDelProp()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.isDelProp()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.isEmpty()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.isEmpty()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.isFunction()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.isFunction()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.isGetElem()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.isGetElem()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.isIf()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.isIf()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.isIn()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.isIn()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.isInstanceOf()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.isInstanceOf()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.isLabel()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.isLabel()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.isNE()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.isNE()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.isNew()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.isNew()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.isNull()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.isNull()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.isNumber()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.isNumber()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.isOr()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.isOr()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.isParamList()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.isParamList()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.isRegExp()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.isRegExp()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.isReturn()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.isReturn()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.isString()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.isString()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.isThis()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.isThis()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.isTry()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.isTry()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.isTypeOf()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.isTypeOf()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.isVar()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.isVar()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.isWith()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.isWith()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isQuotedString()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isQuotedString()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.hasChildren()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.hasChildren()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isFromExterns()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isFromExterns()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.hasNext()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.hasNext()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.hasChild()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.hasChild()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.hasChild(name)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.hasChild(name)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isEquivalentTo(n)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isEquivalentTo(n)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isEquivalentToTyped()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isEquivalentToTyped()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isVarArgs()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isVarArgs()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isSyntheticBlock()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isSyntheticBlock()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.areAllFlagsSet()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.areAllFlagsSet()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isDebugger()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isDebugger()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isFunction()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isFunction()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isGetterDef()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isGetterDef()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isInstanceOf()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isInstanceOf()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isObjectLit()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isObjectLit()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isSetterDef()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isSetterDef()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isStringKey()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isStringKey()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isQuotedString()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isQuotedString()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.hasChildren()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.hasChildren()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isFromExterns()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isFromExterns()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.hasNext()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.hasNext()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.hasChild()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.hasChild()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.hasChild(name)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.hasChild(name)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isEquivalentTo(n)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isEquivalentTo(n)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isEquivalentToTyped()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isEquivalentToTyped()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isVarArgs()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isVarArgs()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isSyntheticBlock()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isSyntheticBlock()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.areAllFlagsSet()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.areAllFlagsSet()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isDebugger()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isDebugger()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isFunction()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isFunction()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isGetterDef()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isGetterDef()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isInstanceOf()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isInstanceOf()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isObjectLit()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isObjectLit()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isSetterDef()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isSetterDef()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isStringKey()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isStringKey()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& convention.isConstant()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&convention.isConstant()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& convention.isConstantKey()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&convention.isConstantKey()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.hasChildren()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.hasChildren()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.getBooleanProp()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.getBooleanProp()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.hasNext()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.hasNext()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.hasChild()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.hasChild()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.hasChild(name)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.hasChild(name)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.isEquivalentTo()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.isEquivalentTo()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.isLocalResultCall()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.isLocalResultCall()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.isArrayLit()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.isArrayLit()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.isAssignAdd()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.isAssignAdd()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.isDefaultCase()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.isDefaultCase()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.isLabelName()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.isLabelName()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.isObjectLit()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.isObjectLit()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& LATE_PROVIDE_ERROR.inGlobalHoistScope()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&LATE_PROVIDE_ERROR.inGlobalHoistScope()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.hasMoreThanOneChild()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.hasMoreThanOneChild()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isEquivalentToShallow(n)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isEquivalentToShallow(n)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isEquivalentToTyped(arg)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isEquivalentToTyped(arg)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!n.isOnlyModifiesThisCall()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!n.isOnlyModifiesThisCall()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.isQuotedString()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.isQuotedString()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.isFromExterns()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.isFromExterns()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.hasOneChild()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.hasOneChild()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.hasChild(n)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.hasChild(n)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.hasChild(parent)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.hasChild(parent)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.hasChild(left)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.hasChild(left)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.hasChild(arg)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.hasChild(arg)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.isEquivalentTo()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.isEquivalentTo()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.isVarArgs()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.isVarArgs()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.isOptionalArg()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.isOptionalArg()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.isSyntheticBlock()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.isSyntheticBlock()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.isLocalResultCall()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.isLocalResultCall()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.isArrayLit()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.isArrayLit()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.isAssignAdd()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.isAssignAdd()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.isDebugger()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.isDebugger()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.isGetterDef()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.isGetterDef()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.isLabelName()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.isLabelName()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.isObjectLit()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.isObjectLit()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.isSetterDef()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.isSetterDef()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!parent.isStringKey()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!parent.isStringKey()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.hasOneChild()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.hasOneChild()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.hasChild(n)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.hasChild(n)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.hasChild(parent)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.hasChild(parent)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.hasChild(left)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.hasChild(left)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.hasChild(arg)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.hasChild(arg)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isEquivalentTo(left)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isEquivalentTo(left)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isEquivalentTo(arg)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isEquivalentTo(arg)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isEquivalentTo(name)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isEquivalentTo(name)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isEquivalentToTyped(n)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isEquivalentToTyped(n)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isOptionalArg()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isOptionalArg()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isAssignAdd()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isAssignAdd()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!left.isExprResult()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!left.isExprResult()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.hasOneChild()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.hasOneChild()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.hasChild(n)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.hasChild(n)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.hasChild(parent)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.hasChild(parent)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.hasChild(left)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.hasChild(left)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.hasChild(arg)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.hasChild(arg)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isEquivalentTo(left)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isEquivalentTo(left)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isEquivalentTo(arg)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isEquivalentTo(arg)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isEquivalentTo(name)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isEquivalentTo(name)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isEquivalentToTyped(n)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isEquivalentToTyped(n)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isOptionalArg()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isOptionalArg()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isAssignAdd()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isAssignAdd()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!arg.isExprResult()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!arg.isExprResult()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!convention.isConstant(ns)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!convention.isConstant(ns)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!convention.isExported(ns)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!convention.isExported(ns)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!convention.isPrivate(ns)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!convention.isPrivate(ns)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.isQuotedString()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.isQuotedString()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.isFromExterns()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.isFromExterns()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.hasOneChild()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.hasOneChild()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.hasChild(n)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.hasChild(n)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.hasChild(parent)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.hasChild(parent)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.hasChild(left)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.hasChild(left)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.hasChild(arg)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.hasChild(arg)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.isEquivalentTo(n)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.isEquivalentTo(n)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.isEquivalentToTyped()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.isEquivalentToTyped()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.isOptionalArg()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.isOptionalArg()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.isSyntheticBlock()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.isSyntheticBlock()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.areAllFlagsSet()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.areAllFlagsSet()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!name.isExprResult()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!name.isExprResult()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!NULL_ARGUMENT_ERROR.inGlobalHoistScope()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!NULL_ARGUMENT_ERROR.inGlobalHoistScope()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!INVALID_STYLE_ERROR.inGlobalHoistScope()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!INVALID_STYLE_ERROR.inGlobalHoistScope()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!compiler.isNormalized()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!compiler.isNormalized()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!providedNames.isEmpty()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!providedNames.isEmpty()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.18627450980392157
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&&!requiresLevel.isOn()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&!requiresLevel.isOn()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.19607843137254902
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.hasMoreThanOneChild()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.hasMoreThanOneChild()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.19607843137254902
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isEquivalentToShallow(n)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isEquivalentToShallow(n)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.19607843137254902
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isEquivalentToTyped(arg)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isEquivalentToTyped(arg)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.19607843137254902
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& n.isOnlyModifiesThisCall()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&n.isOnlyModifiesThisCall()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.19607843137254902
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.isQuotedString()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.isQuotedString()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.19607843137254902
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.isFromExterns()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.isFromExterns()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.19607843137254902
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.hasOneChild()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.hasOneChild()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.19607843137254902
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.hasChild(n)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.hasChild(n)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.19607843137254902
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.hasChild(parent)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.hasChild(parent)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.19607843137254902
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.hasChild(left)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.hasChild(left)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.19607843137254902
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.hasChild(arg)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.hasChild(arg)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.19607843137254902
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.isEquivalentTo()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.isEquivalentTo()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.19607843137254902
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.isVarArgs()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.isVarArgs()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.19607843137254902
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.isOptionalArg()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.isOptionalArg()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.19607843137254902
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.isSyntheticBlock()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.isSyntheticBlock()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.19607843137254902
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.isLocalResultCall()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.isLocalResultCall()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.19607843137254902
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.isArrayLit()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.isArrayLit()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.19607843137254902
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.isAssignAdd()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.isAssignAdd()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.19607843137254902
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.isDebugger()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.isDebugger()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.19607843137254902
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.isGetterDef()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.isGetterDef()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.19607843137254902
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.isLabelName()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.isLabelName()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.19607843137254902
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.isObjectLit()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.isObjectLit()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.19607843137254902
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.isSetterDef()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.isSetterDef()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.19607843137254902
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& parent.isStringKey()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&parent.isStringKey()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.19607843137254902
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.hasOneChild()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.hasOneChild()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.19607843137254902
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.hasChild(n)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.hasChild(n)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.19607843137254902
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.hasChild(parent)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.hasChild(parent)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.19607843137254902
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.hasChild(left)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.hasChild(left)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.19607843137254902
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.hasChild(arg)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.hasChild(arg)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.19607843137254902
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isEquivalentTo(left)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isEquivalentTo(left)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.19607843137254902
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isEquivalentTo(arg)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isEquivalentTo(arg)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.19607843137254902
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isEquivalentTo(name)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isEquivalentTo(name)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.19607843137254902
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isEquivalentToTyped(n)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isEquivalentToTyped(n)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.19607843137254902
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isOptionalArg()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isOptionalArg()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.19607843137254902
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isAssignAdd()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isAssignAdd()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.19607843137254902
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& left.isExprResult()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&left.isExprResult()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.19607843137254902
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.hasOneChild()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.hasOneChild()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.19607843137254902
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.hasChild(n)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.hasChild(n)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.19607843137254902
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.hasChild(parent)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.hasChild(parent)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.19607843137254902
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.hasChild(left)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.hasChild(left)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.19607843137254902
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.hasChild(arg)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.hasChild(arg)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.19607843137254902
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isEquivalentTo(left)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isEquivalentTo(left)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.19607843137254902
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isEquivalentTo(arg)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isEquivalentTo(arg)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.19607843137254902
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isEquivalentTo(name)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isEquivalentTo(name)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.19607843137254902
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isEquivalentToTyped(n)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isEquivalentToTyped(n)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.19607843137254902
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isOptionalArg()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isOptionalArg()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.19607843137254902
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isAssignAdd()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isAssignAdd()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.19607843137254902
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& arg.isExprResult()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&arg.isExprResult()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.19607843137254902
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& convention.isConstant(ns)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&convention.isConstant(ns)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.19607843137254902
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& convention.isExported(ns)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&convention.isExported(ns)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.19607843137254902
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& convention.isPrivate(ns)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&convention.isPrivate(ns)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.19607843137254902
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.isQuotedString()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.isQuotedString()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.19607843137254902
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.isFromExterns()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.isFromExterns()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.19607843137254902
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.hasOneChild()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.hasOneChild()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.19607843137254902
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.hasChild(n)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.hasChild(n)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.19607843137254902
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.hasChild(parent)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.hasChild(parent)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.19607843137254902
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.hasChild(left)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.hasChild(left)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.19607843137254902
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.hasChild(arg)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.hasChild(arg)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.19607843137254902
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.isEquivalentTo(n)){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.isEquivalentTo(n)){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.19607843137254902
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.isEquivalentToTyped()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.isEquivalentToTyped()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.19607843137254902
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.isOptionalArg()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.isOptionalArg()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.19607843137254902
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.isSyntheticBlock()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.isSyntheticBlock()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.19607843137254902
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.areAllFlagsSet()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.areAllFlagsSet()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.19607843137254902
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& name.isExprResult()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&name.isExprResult()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.19607843137254902
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& NULL_ARGUMENT_ERROR.inGlobalHoistScope()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&NULL_ARGUMENT_ERROR.inGlobalHoistScope()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.19607843137254902
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& INVALID_STYLE_ERROR.inGlobalHoistScope()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&INVALID_STYLE_ERROR.inGlobalHoistScope()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.19607843137254902
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& compiler.isNormalized()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&compiler.isNormalized()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.19607843137254902
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& providedNames.isEmpty()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&providedNames.isEmpty()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

0.19607843137254902
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& requiresLevel.isOn()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }
-if(provided!=null){
-parent.detachFromParent();
-compiler.reportCodeChange();
-}
+if(provided!=null&&requiresLevel.isOn()){
+parent.detachFromParent();
+compiler.reportCodeChange();
+}

FILE : /Users/ffengjay/Postgraduate/PLM4APR/tmp/defects4j_buggy//closure/closure_113_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java
SUCCESS
874 th patch
//Following are generated patch:
  private void processRequireCall(  NodeTraversal t,  Node n,  Node parent){
    Node left=n.getFirstChild();
    Node arg=left.getNext();
    if (verifyLastArgumentIsString(t,left,arg)) {
      String ns=arg.getString();
      ProvidedName provided=providedNames.get(ns);
      if (provided == null || !provided.isExplicitlyProvided()) {
        unrecognizedRequires.add(new UnrecognizedRequire(n,ns,t.getSourceName()));
      }
 else {
        JSModule providedModule=provided.explicitModule;
        Preconditions.checkNotNull(providedModule);
        JSModule module=t.getModule();
        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module,providedModule)) {
          compiler.report(t.makeError(n,XMODULE_REQUIRE_ERROR,ns,providedModule.getName(),module.getName()));
        }
      }
      maybeAddToSymbolTable(left);
      maybeAddStringNodeToSymbolTable(arg);
if(provided!=null&& requiresLevel.isOn()){
parent.detachFromParent();
compiler.reportCodeChange();
}
    }
  }

START : 
2023.11.13 AD at 19:06:36 CST
---------TIME : 
2023.11.13 AD at 19:06:48 CST
--------------- END -----------------
[1, 896, 102, 0, 0, 0, 0, 0, 0, 0]
Finish : closure-113 > patch : 1 | Start : Mon Nov 13 19:06:36 CST 2023 | End : 2023.11.13 AD at 19:06:48 CST
