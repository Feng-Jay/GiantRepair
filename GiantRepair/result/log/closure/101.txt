Repair : closure_101
Current failed test : com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives | 2023.11.13 AD at 18:59:57 CST
Patch Number: /Users/ffengjay/Postgraduate/PLM4APR/codex_out/valuable_patches_codellama_real/closure_101/patch.java
Following are 0th generated patches:
0.0
//Following are generated patch:
  protected CompilerOptions createOptions(){
    CompilerOptions options=new CompilerOptions();
    options.setCodingConvention(new ClosureCodingConvention());
    CompilationLevel level=flags.compilation_level;
    level.setOptionsForCompilationLevel(options);
    if (flags.debug) {
      level.setDebugOptionsForCompilationLevel(options);
    }
    WarningLevel wLevel=flags.warning_level;
    wLevel.setOptionsForWarningLevel(options);
    for (    FormattingOption formattingOption : flags.formatting) {
      formattingOption.applyToOptions(options);
    }
options.closurePass=flags.process_closure_primitives||flags.manage_closure_dependencies;
    if (flags.process_closure_primitives) {
    }
    initOptionsFromFlags(options);
    return options;
  }
-options.closurePass=true;
+options.closurePass=flags.process_closure_primitives||flags.manage_closure_dependencies;

0.0
//Following are generated patch:
  protected CompilerOptions createOptions(){
    CompilerOptions options=new CompilerOptions();
    options.setCodingConvention(new ClosureCodingConvention());
    CompilationLevel level=flags.compilation_level;
    level.setOptionsForCompilationLevel(options);
    if (flags.debug) {
      level.setDebugOptionsForCompilationLevel(options);
    }
    WarningLevel wLevel=flags.warning_level;
    wLevel.setOptionsForWarningLevel(options);
    for (    FormattingOption formattingOption : flags.formatting) {
      formattingOption.applyToOptions(options);
    }
options.closurePass=flags.process_closure_primitives||flags.manage_closure_dependencies;
    if (flags.process_closure_primitives) {
    }
    initOptionsFromFlags(options);
    return options;
  }
-options.closurePass=true;
+options.closurePass=flags.process_closure_primitives||flags.manage_closure_dependencies;

0.0
//Following are generated patch:
  protected CompilerOptions createOptions(){
    CompilerOptions options=new CompilerOptions();
    options.setCodingConvention(new ClosureCodingConvention());
    CompilationLevel level=flags.compilation_level;
    level.setOptionsForCompilationLevel(options);
    if (flags.debug) {
      level.setDebugOptionsForCompilationLevel(options);
    }
    WarningLevel wLevel=flags.warning_level;
    wLevel.setOptionsForWarningLevel(options);
    for (    FormattingOption formattingOption : flags.formatting) {
      formattingOption.applyToOptions(options);
    }
    initOptionsFromFlags(options);
    return options;
  }
-if(flags.process_closure_primitives){
-options.closurePass=true;
-}

0.0
//Following are generated patch:
  protected CompilerOptions createOptions(){
    CompilerOptions options=new CompilerOptions();
    options.setCodingConvention(new ClosureCodingConvention());
    CompilationLevel level=flags.compilation_level;
    level.setOptionsForCompilationLevel(options);
    if (flags.debug) {
      level.setDebugOptionsForCompilationLevel(options);
    }
    WarningLevel wLevel=flags.warning_level;
    wLevel.setOptionsForWarningLevel(options);
    for (    FormattingOption formattingOption : flags.formatting) {
      formattingOption.applyToOptions(options);
    }
options.closurePass=flags.process_closure_primitives||flags.manage_closure_dependencies;
    initOptionsFromFlags(options);
    return options;
  }
-if(flags.process_closure_primitives){
-options.closurePass=true;
-}
+options.closurePass=flags.process_closure_primitives||flags.manage_closure_dependencies;

0.0
//Following are generated patch:
  protected CompilerOptions createOptions(){
    CompilerOptions options=new CompilerOptions();
    options.setCodingConvention(new ClosureCodingConvention());
    CompilationLevel level=flags.compilation_level;
    level.setOptionsForCompilationLevel(options);
    if (flags.debug) {
      level.setDebugOptionsForCompilationLevel(options);
    }
    WarningLevel wLevel=flags.warning_level;
    wLevel.setOptionsForWarningLevel(options);
    for (    FormattingOption formattingOption : flags.formatting) {
      formattingOption.applyToOptions(options);
    }
options.closurePass=flags.process_closure_primitives||flags.manage_closure_dependencies;
    initOptionsFromFlags(options);
    return options;
  }
-if(flags.process_closure_primitives){
-options.closurePass=true;
-}
+options.closurePass=flags.process_closure_primitives||flags.manage_closure_dependencies;

0.0
//Following are generated patch:
  protected CompilerOptions createOptions(){
    CompilerOptions options=new CompilerOptions();
    options.setCodingConvention(new ClosureCodingConvention());
    CompilationLevel level=flags.compilation_level;
    level.setOptionsForCompilationLevel(options);
    if (flags.debug) {
      level.setDebugOptionsForCompilationLevel(options);
    }
    WarningLevel wLevel=flags.warning_level;
    wLevel.setOptionsForWarningLevel(options);
    for (    FormattingOption formattingOption : flags.formatting) {
      formattingOption.applyToOptions(options);
    }
    if (flags.process_closure_primitives) {
    }
    initOptionsFromFlags(options);
    return options;
  }
-options.closurePass=true;

0.0
//Following are generated patch:
  protected CompilerOptions createOptions(){
    CompilerOptions options=new CompilerOptions();
    options.setCodingConvention(new ClosureCodingConvention());
    CompilationLevel level=flags.compilation_level;
    level.setOptionsForCompilationLevel(options);
    if (flags.debug) {
      level.setDebugOptionsForCompilationLevel(options);
    }
    WarningLevel wLevel=flags.warning_level;
    wLevel.setOptionsForWarningLevel(options);
    for (    FormattingOption formattingOption : flags.formatting) {
      formattingOption.applyToOptions(options);
    }
options.closurePass=flags.process_closure_primitives||flags.manage_closure_dependencies;
    if (flags.process_closure_primitives) {
      options.closurePass=true;
    }
    initOptionsFromFlags(options);
    return options;
  }
+options.closurePass=flags.process_closure_primitives||flags.manage_closure_dependencies;

0.10227272727272728
//Following are generated patch:
  protected CompilerOptions createOptions(){
    CompilerOptions options=new CompilerOptions();
    options.setCodingConvention(new ClosureCodingConvention());
    CompilationLevel level=flags.compilation_level;
    level.setOptionsForCompilationLevel(options);
    if (flags.debug) {
      level.setDebugOptionsForCompilationLevel(options);
    }
    WarningLevel wLevel=flags.warning_level;
    wLevel.setOptionsForWarningLevel(options);
    for (    FormattingOption formattingOption : flags.formatting) {
      formattingOption.applyToOptions(options);
    }
options.options=flags.process_closure_primitives||flags.manage_closure_dependencies;
    if (flags.process_closure_primitives) {
    }
    initOptionsFromFlags(options);
    return options;
  }
-options.closurePass=true;
+options.options=flags.process_closure_primitives||flags.manage_closure_dependencies;

0.10227272727272728
//Following are generated patch:
  protected CompilerOptions createOptions(){
    CompilerOptions options=new CompilerOptions();
    options.setCodingConvention(new ClosureCodingConvention());
    CompilationLevel level=flags.compilation_level;
    level.setOptionsForCompilationLevel(options);
    if (flags.debug) {
      level.setDebugOptionsForCompilationLevel(options);
    }
    WarningLevel wLevel=flags.warning_level;
    wLevel.setOptionsForWarningLevel(options);
    for (    FormattingOption formattingOption : flags.formatting) {
      formattingOption.applyToOptions(options);
    }
options.level=flags.process_closure_primitives||flags.manage_closure_dependencies;
    if (flags.process_closure_primitives) {
    }
    initOptionsFromFlags(options);
    return options;
  }
-options.closurePass=true;
+options.level=flags.process_closure_primitives||flags.manage_closure_dependencies;

0.10227272727272728
//Following are generated patch:
  protected CompilerOptions createOptions(){
    CompilerOptions options=new CompilerOptions();
    options.setCodingConvention(new ClosureCodingConvention());
    CompilationLevel level=flags.compilation_level;
    level.setOptionsForCompilationLevel(options);
    if (flags.debug) {
      level.setDebugOptionsForCompilationLevel(options);
    }
    WarningLevel wLevel=flags.warning_level;
    wLevel.setOptionsForWarningLevel(options);
    for (    FormattingOption formattingOption : flags.formatting) {
      formattingOption.applyToOptions(options);
    }
options.options=flags.process_closure_primitives||flags.manage_closure_dependencies;
    initOptionsFromFlags(options);
    return options;
  }
-if(flags.process_closure_primitives){
-options.closurePass=true;
-}
+options.options=flags.process_closure_primitives||flags.manage_closure_dependencies;

0.10227272727272728
//Following are generated patch:
  protected CompilerOptions createOptions(){
    CompilerOptions options=new CompilerOptions();
    options.setCodingConvention(new ClosureCodingConvention());
    CompilationLevel level=flags.compilation_level;
    level.setOptionsForCompilationLevel(options);
    if (flags.debug) {
      level.setDebugOptionsForCompilationLevel(options);
    }
    WarningLevel wLevel=flags.warning_level;
    wLevel.setOptionsForWarningLevel(options);
    for (    FormattingOption formattingOption : flags.formatting) {
      formattingOption.applyToOptions(options);
    }
options.level=flags.process_closure_primitives||flags.manage_closure_dependencies;
    initOptionsFromFlags(options);
    return options;
  }
-if(flags.process_closure_primitives){
-options.closurePass=true;
-}
+options.level=flags.process_closure_primitives||flags.manage_closure_dependencies;

0.10227272727272728
//Following are generated patch:
  protected CompilerOptions createOptions(){
    CompilerOptions options=new CompilerOptions();
    options.setCodingConvention(new ClosureCodingConvention());
    CompilationLevel level=flags.compilation_level;
    level.setOptionsForCompilationLevel(options);
    if (flags.debug) {
      level.setDebugOptionsForCompilationLevel(options);
    }
    WarningLevel wLevel=flags.warning_level;
    wLevel.setOptionsForWarningLevel(options);
    for (    FormattingOption formattingOption : flags.formatting) {
      formattingOption.applyToOptions(options);
    }
options.options=flags.process_closure_primitives||flags.manage_closure_dependencies;
    if (flags.process_closure_primitives) {
      options.closurePass=true;
    }
    initOptionsFromFlags(options);
    return options;
  }
+options.options=flags.process_closure_primitives||flags.manage_closure_dependencies;

0.10227272727272728
//Following are generated patch:
  protected CompilerOptions createOptions(){
    CompilerOptions options=new CompilerOptions();
    options.setCodingConvention(new ClosureCodingConvention());
    CompilationLevel level=flags.compilation_level;
    level.setOptionsForCompilationLevel(options);
    if (flags.debug) {
      level.setDebugOptionsForCompilationLevel(options);
    }
    WarningLevel wLevel=flags.warning_level;
    wLevel.setOptionsForWarningLevel(options);
    for (    FormattingOption formattingOption : flags.formatting) {
      formattingOption.applyToOptions(options);
    }
options.level=flags.process_closure_primitives||flags.manage_closure_dependencies;
    if (flags.process_closure_primitives) {
      options.closurePass=true;
    }
    initOptionsFromFlags(options);
    return options;
  }
+options.level=flags.process_closure_primitives||flags.manage_closure_dependencies;

0.11363636363636363
//Following are generated patch:
  protected CompilerOptions createOptions(){
    CompilerOptions options=new CompilerOptions();
    options.setCodingConvention(new ClosureCodingConvention());
    CompilationLevel level=flags.compilation_level;
    level.setOptionsForCompilationLevel(options);
    if (flags.debug) {
      level.setDebugOptionsForCompilationLevel(options);
    }
    WarningLevel wLevel=flags.warning_level;
    wLevel.setOptionsForWarningLevel(options);
    for (    FormattingOption formattingOption : flags.formatting) {
      formattingOption.applyToOptions(options);
    }
options.wLevel=flags.process_closure_primitives||flags.manage_closure_dependencies;
    if (flags.process_closure_primitives) {
    }
    initOptionsFromFlags(options);
    return options;
  }
-options.closurePass=true;
+options.wLevel=flags.process_closure_primitives||flags.manage_closure_dependencies;

0.11363636363636363
//Following are generated patch:
  protected CompilerOptions createOptions(){
    CompilerOptions options=new CompilerOptions();
    options.setCodingConvention(new ClosureCodingConvention());
    CompilationLevel level=flags.compilation_level;
    level.setOptionsForCompilationLevel(options);
    if (flags.debug) {
      level.setDebugOptionsForCompilationLevel(options);
    }
    WarningLevel wLevel=flags.warning_level;
    wLevel.setOptionsForWarningLevel(options);
    for (    FormattingOption formattingOption : flags.formatting) {
      formattingOption.applyToOptions(options);
    }
options.wLevel=flags.process_closure_primitives||flags.manage_closure_dependencies;
    initOptionsFromFlags(options);
    return options;
  }
-if(flags.process_closure_primitives){
-options.closurePass=true;
-}
+options.wLevel=flags.process_closure_primitives||flags.manage_closure_dependencies;

0.11363636363636363
//Following are generated patch:
  protected CompilerOptions createOptions(){
    CompilerOptions options=new CompilerOptions();
    options.setCodingConvention(new ClosureCodingConvention());
    CompilationLevel level=flags.compilation_level;
    level.setOptionsForCompilationLevel(options);
    if (flags.debug) {
      level.setDebugOptionsForCompilationLevel(options);
    }
    WarningLevel wLevel=flags.warning_level;
    wLevel.setOptionsForWarningLevel(options);
    for (    FormattingOption formattingOption : flags.formatting) {
      formattingOption.applyToOptions(options);
    }
options.wLevel=flags.process_closure_primitives||flags.manage_closure_dependencies;
    if (flags.process_closure_primitives) {
      options.closurePass=true;
    }
    initOptionsFromFlags(options);
    return options;
  }
+options.wLevel=flags.process_closure_primitives||flags.manage_closure_dependencies;

0.23863636363636365
//Following are generated patch:
  protected CompilerOptions createOptions(){
    CompilerOptions options=new CompilerOptions();
    options.setCodingConvention(new ClosureCodingConvention());
    CompilationLevel level=flags.compilation_level;
    level.setOptionsForCompilationLevel(options);
    if (flags.debug) {
      level.setDebugOptionsForCompilationLevel(options);
    }
    WarningLevel wLevel=flags.warning_level;
    wLevel.setOptionsForWarningLevel(options);
    for (    FormattingOption formattingOption : flags.formatting) {
      formattingOption.applyToOptions(options);
    }
options.closurePass=flags.options||flags.manage_closure_dependencies;
    if (flags.process_closure_primitives) {
    }
    initOptionsFromFlags(options);
    return options;
  }
-options.closurePass=true;
+options.closurePass=flags.options||flags.manage_closure_dependencies;

0.23863636363636365
//Following are generated patch:
  protected CompilerOptions createOptions(){
    CompilerOptions options=new CompilerOptions();
    options.setCodingConvention(new ClosureCodingConvention());
    CompilationLevel level=flags.compilation_level;
    level.setOptionsForCompilationLevel(options);
    if (flags.debug) {
      level.setDebugOptionsForCompilationLevel(options);
    }
    WarningLevel wLevel=flags.warning_level;
    wLevel.setOptionsForWarningLevel(options);
    for (    FormattingOption formattingOption : flags.formatting) {
      formattingOption.applyToOptions(options);
    }
options.closurePass=flags.options||flags.manage_closure_dependencies;
    initOptionsFromFlags(options);
    return options;
  }
-if(flags.process_closure_primitives){
-options.closurePass=true;
-}
+options.closurePass=flags.options||flags.manage_closure_dependencies;

0.23863636363636365
//Following are generated patch:
  protected CompilerOptions createOptions(){
    CompilerOptions options=new CompilerOptions();
    options.setCodingConvention(new ClosureCodingConvention());
    CompilationLevel level=flags.compilation_level;
    level.setOptionsForCompilationLevel(options);
    if (flags.debug) {
      level.setDebugOptionsForCompilationLevel(options);
    }
    WarningLevel wLevel=flags.warning_level;
    wLevel.setOptionsForWarningLevel(options);
    for (    FormattingOption formattingOption : flags.formatting) {
      formattingOption.applyToOptions(options);
    }
options.closurePass=flags.options||flags.manage_closure_dependencies;
    if (flags.process_closure_primitives) {
      options.closurePass=true;
    }
    initOptionsFromFlags(options);
    return options;
  }
+options.closurePass=flags.options||flags.manage_closure_dependencies;

0.25
//Following are generated patch:
  protected CompilerOptions createOptions(){
    CompilerOptions options=new CompilerOptions();
    options.setCodingConvention(new ClosureCodingConvention());
    CompilationLevel level=flags.compilation_level;
    level.setOptionsForCompilationLevel(options);
    if (flags.debug) {
      level.setDebugOptionsForCompilationLevel(options);
    }
    WarningLevel wLevel=flags.warning_level;
    wLevel.setOptionsForWarningLevel(options);
    for (    FormattingOption formattingOption : flags.formatting) {
      formattingOption.applyToOptions(options);
    }
options.closurePass=flags.level||flags.manage_closure_dependencies;
    if (flags.process_closure_primitives) {
    }
    initOptionsFromFlags(options);
    return options;
  }
-options.closurePass=true;
+options.closurePass=flags.level||flags.manage_closure_dependencies;

0.25
//Following are generated patch:
  protected CompilerOptions createOptions(){
    CompilerOptions options=new CompilerOptions();
    options.setCodingConvention(new ClosureCodingConvention());
    CompilationLevel level=flags.compilation_level;
    level.setOptionsForCompilationLevel(options);
    if (flags.debug) {
      level.setDebugOptionsForCompilationLevel(options);
    }
    WarningLevel wLevel=flags.warning_level;
    wLevel.setOptionsForWarningLevel(options);
    for (    FormattingOption formattingOption : flags.formatting) {
      formattingOption.applyToOptions(options);
    }
options.closurePass=flags.level||flags.manage_closure_dependencies;
    initOptionsFromFlags(options);
    return options;
  }
-if(flags.process_closure_primitives){
-options.closurePass=true;
-}
+options.closurePass=flags.level||flags.manage_closure_dependencies;

0.25
//Following are generated patch:
  protected CompilerOptions createOptions(){
    CompilerOptions options=new CompilerOptions();
    options.setCodingConvention(new ClosureCodingConvention());
    CompilationLevel level=flags.compilation_level;
    level.setOptionsForCompilationLevel(options);
    if (flags.debug) {
      level.setDebugOptionsForCompilationLevel(options);
    }
    WarningLevel wLevel=flags.warning_level;
    wLevel.setOptionsForWarningLevel(options);
    for (    FormattingOption formattingOption : flags.formatting) {
      formattingOption.applyToOptions(options);
    }
options.closurePass=flags.level||flags.manage_closure_dependencies;
    if (flags.process_closure_primitives) {
      options.closurePass=true;
    }
    initOptionsFromFlags(options);
    return options;
  }
+options.closurePass=flags.level||flags.manage_closure_dependencies;

0.26136363636363635
//Following are generated patch:
  protected CompilerOptions createOptions(){
    CompilerOptions options=new CompilerOptions();
    options.setCodingConvention(new ClosureCodingConvention());
    CompilationLevel level=flags.compilation_level;
    level.setOptionsForCompilationLevel(options);
    if (flags.debug) {
      level.setDebugOptionsForCompilationLevel(options);
    }
    WarningLevel wLevel=flags.warning_level;
    wLevel.setOptionsForWarningLevel(options);
    for (    FormattingOption formattingOption : flags.formatting) {
      formattingOption.applyToOptions(options);
    }
options.closurePass=flags.wLevel||flags.manage_closure_dependencies;
    if (flags.process_closure_primitives) {
    }
    initOptionsFromFlags(options);
    return options;
  }
-options.closurePass=true;
+options.closurePass=flags.wLevel||flags.manage_closure_dependencies;

0.26136363636363635
//Following are generated patch:
  protected CompilerOptions createOptions(){
    CompilerOptions options=new CompilerOptions();
    options.setCodingConvention(new ClosureCodingConvention());
    CompilationLevel level=flags.compilation_level;
    level.setOptionsForCompilationLevel(options);
    if (flags.debug) {
      level.setDebugOptionsForCompilationLevel(options);
    }
    WarningLevel wLevel=flags.warning_level;
    wLevel.setOptionsForWarningLevel(options);
    for (    FormattingOption formattingOption : flags.formatting) {
      formattingOption.applyToOptions(options);
    }
options.closurePass=flags.process_closure_primitives||flags.options;
    if (flags.process_closure_primitives) {
    }
    initOptionsFromFlags(options);
    return options;
  }
-options.closurePass=true;
+options.closurePass=flags.process_closure_primitives||flags.options;

0.26136363636363635
//Following are generated patch:
  protected CompilerOptions createOptions(){
    CompilerOptions options=new CompilerOptions();
    options.setCodingConvention(new ClosureCodingConvention());
    CompilationLevel level=flags.compilation_level;
    level.setOptionsForCompilationLevel(options);
    if (flags.debug) {
      level.setDebugOptionsForCompilationLevel(options);
    }
    WarningLevel wLevel=flags.warning_level;
    wLevel.setOptionsForWarningLevel(options);
    for (    FormattingOption formattingOption : flags.formatting) {
      formattingOption.applyToOptions(options);
    }
options.closurePass=flags.wLevel||flags.manage_closure_dependencies;
    initOptionsFromFlags(options);
    return options;
  }
-if(flags.process_closure_primitives){
-options.closurePass=true;
-}
+options.closurePass=flags.wLevel||flags.manage_closure_dependencies;

0.26136363636363635
//Following are generated patch:
  protected CompilerOptions createOptions(){
    CompilerOptions options=new CompilerOptions();
    options.setCodingConvention(new ClosureCodingConvention());
    CompilationLevel level=flags.compilation_level;
    level.setOptionsForCompilationLevel(options);
    if (flags.debug) {
      level.setDebugOptionsForCompilationLevel(options);
    }
    WarningLevel wLevel=flags.warning_level;
    wLevel.setOptionsForWarningLevel(options);
    for (    FormattingOption formattingOption : flags.formatting) {
      formattingOption.applyToOptions(options);
    }
options.closurePass=flags.process_closure_primitives||flags.options;
    initOptionsFromFlags(options);
    return options;
  }
-if(flags.process_closure_primitives){
-options.closurePass=true;
-}
+options.closurePass=flags.process_closure_primitives||flags.options;

0.26136363636363635
//Following are generated patch:
  protected CompilerOptions createOptions(){
    CompilerOptions options=new CompilerOptions();
    options.setCodingConvention(new ClosureCodingConvention());
    CompilationLevel level=flags.compilation_level;
    level.setOptionsForCompilationLevel(options);
    if (flags.debug) {
      level.setDebugOptionsForCompilationLevel(options);
    }
    WarningLevel wLevel=flags.warning_level;
    wLevel.setOptionsForWarningLevel(options);
    for (    FormattingOption formattingOption : flags.formatting) {
      formattingOption.applyToOptions(options);
    }
options.closurePass=flags.wLevel||flags.manage_closure_dependencies;
    if (flags.process_closure_primitives) {
      options.closurePass=true;
    }
    initOptionsFromFlags(options);
    return options;
  }
+options.closurePass=flags.wLevel||flags.manage_closure_dependencies;

0.26136363636363635
//Following are generated patch:
  protected CompilerOptions createOptions(){
    CompilerOptions options=new CompilerOptions();
    options.setCodingConvention(new ClosureCodingConvention());
    CompilationLevel level=flags.compilation_level;
    level.setOptionsForCompilationLevel(options);
    if (flags.debug) {
      level.setDebugOptionsForCompilationLevel(options);
    }
    WarningLevel wLevel=flags.warning_level;
    wLevel.setOptionsForWarningLevel(options);
    for (    FormattingOption formattingOption : flags.formatting) {
      formattingOption.applyToOptions(options);
    }
options.closurePass=flags.process_closure_primitives||flags.options;
    if (flags.process_closure_primitives) {
      options.closurePass=true;
    }
    initOptionsFromFlags(options);
    return options;
  }
+options.closurePass=flags.process_closure_primitives||flags.options;

0.2727272727272727
//Following are generated patch:
  protected CompilerOptions createOptions(){
    CompilerOptions options=new CompilerOptions();
    options.setCodingConvention(new ClosureCodingConvention());
    CompilationLevel level=flags.compilation_level;
    level.setOptionsForCompilationLevel(options);
    if (flags.debug) {
      level.setDebugOptionsForCompilationLevel(options);
    }
    WarningLevel wLevel=flags.warning_level;
    wLevel.setOptionsForWarningLevel(options);
    for (    FormattingOption formattingOption : flags.formatting) {
      formattingOption.applyToOptions(options);
    }
options.closurePass=flags.flags||flags.manage_closure_dependencies;
    if (flags.process_closure_primitives) {
    }
    initOptionsFromFlags(options);
    return options;
  }
-options.closurePass=true;
+options.closurePass=flags.flags||flags.manage_closure_dependencies;

0.2727272727272727
//Following are generated patch:
  protected CompilerOptions createOptions(){
    CompilerOptions options=new CompilerOptions();
    options.setCodingConvention(new ClosureCodingConvention());
    CompilationLevel level=flags.compilation_level;
    level.setOptionsForCompilationLevel(options);
    if (flags.debug) {
      level.setDebugOptionsForCompilationLevel(options);
    }
    WarningLevel wLevel=flags.warning_level;
    wLevel.setOptionsForWarningLevel(options);
    for (    FormattingOption formattingOption : flags.formatting) {
      formattingOption.applyToOptions(options);
    }
options.closurePass=flags.process_closure_primitives||!flags.options;
    if (flags.process_closure_primitives) {
    }
    initOptionsFromFlags(options);
    return options;
  }
-options.closurePass=true;
+options.closurePass=flags.process_closure_primitives||!flags.options;

0.2727272727272727
//Following are generated patch:
  protected CompilerOptions createOptions(){
    CompilerOptions options=new CompilerOptions();
    options.setCodingConvention(new ClosureCodingConvention());
    CompilationLevel level=flags.compilation_level;
    level.setOptionsForCompilationLevel(options);
    if (flags.debug) {
      level.setDebugOptionsForCompilationLevel(options);
    }
    WarningLevel wLevel=flags.warning_level;
    wLevel.setOptionsForWarningLevel(options);
    for (    FormattingOption formattingOption : flags.formatting) {
      formattingOption.applyToOptions(options);
    }
options.closurePass=flags.process_closure_primitives||flags.level;
    if (flags.process_closure_primitives) {
    }
    initOptionsFromFlags(options);
    return options;
  }
-options.closurePass=true;
+options.closurePass=flags.process_closure_primitives||flags.level;

0.2727272727272727
//Following are generated patch:
  protected CompilerOptions createOptions(){
    CompilerOptions options=new CompilerOptions();
    options.setCodingConvention(new ClosureCodingConvention());
    CompilationLevel level=flags.compilation_level;
    level.setOptionsForCompilationLevel(options);
    if (flags.debug) {
      level.setDebugOptionsForCompilationLevel(options);
    }
    WarningLevel wLevel=flags.warning_level;
    wLevel.setOptionsForWarningLevel(options);
    for (    FormattingOption formattingOption : flags.formatting) {
      formattingOption.applyToOptions(options);
    }
options.closurePass=flags.process_closure_primitives||flags.flags;
    if (flags.process_closure_primitives) {
    }
    initOptionsFromFlags(options);
    return options;
  }
-options.closurePass=true;
+options.closurePass=flags.process_closure_primitives||flags.flags;

0.2727272727272727
//Following are generated patch:
  protected CompilerOptions createOptions(){
    CompilerOptions options=new CompilerOptions();
    options.setCodingConvention(new ClosureCodingConvention());
    CompilationLevel level=flags.compilation_level;
    level.setOptionsForCompilationLevel(options);
    if (flags.debug) {
      level.setDebugOptionsForCompilationLevel(options);
    }
    WarningLevel wLevel=flags.warning_level;
    wLevel.setOptionsForWarningLevel(options);
    for (    FormattingOption formattingOption : flags.formatting) {
      formattingOption.applyToOptions(options);
    }
options.closurePass=flags.flags||flags.manage_closure_dependencies;
    initOptionsFromFlags(options);
    return options;
  }
-if(flags.process_closure_primitives){
-options.closurePass=true;
-}
+options.closurePass=flags.flags||flags.manage_closure_dependencies;

0.2727272727272727
//Following are generated patch:
  protected CompilerOptions createOptions(){
    CompilerOptions options=new CompilerOptions();
    options.setCodingConvention(new ClosureCodingConvention());
    CompilationLevel level=flags.compilation_level;
    level.setOptionsForCompilationLevel(options);
    if (flags.debug) {
      level.setDebugOptionsForCompilationLevel(options);
    }
    WarningLevel wLevel=flags.warning_level;
    wLevel.setOptionsForWarningLevel(options);
    for (    FormattingOption formattingOption : flags.formatting) {
      formattingOption.applyToOptions(options);
    }
options.closurePass=flags.process_closure_primitives||!flags.options;
    initOptionsFromFlags(options);
    return options;
  }
-if(flags.process_closure_primitives){
-options.closurePass=true;
-}
+options.closurePass=flags.process_closure_primitives||!flags.options;

0.2727272727272727
//Following are generated patch:
  protected CompilerOptions createOptions(){
    CompilerOptions options=new CompilerOptions();
    options.setCodingConvention(new ClosureCodingConvention());
    CompilationLevel level=flags.compilation_level;
    level.setOptionsForCompilationLevel(options);
    if (flags.debug) {
      level.setDebugOptionsForCompilationLevel(options);
    }
    WarningLevel wLevel=flags.warning_level;
    wLevel.setOptionsForWarningLevel(options);
    for (    FormattingOption formattingOption : flags.formatting) {
      formattingOption.applyToOptions(options);
    }
options.closurePass=flags.process_closure_primitives||flags.level;
    initOptionsFromFlags(options);
    return options;
  }
-if(flags.process_closure_primitives){
-options.closurePass=true;
-}
+options.closurePass=flags.process_closure_primitives||flags.level;

0.2727272727272727
//Following are generated patch:
  protected CompilerOptions createOptions(){
    CompilerOptions options=new CompilerOptions();
    options.setCodingConvention(new ClosureCodingConvention());
    CompilationLevel level=flags.compilation_level;
    level.setOptionsForCompilationLevel(options);
    if (flags.debug) {
      level.setDebugOptionsForCompilationLevel(options);
    }
    WarningLevel wLevel=flags.warning_level;
    wLevel.setOptionsForWarningLevel(options);
    for (    FormattingOption formattingOption : flags.formatting) {
      formattingOption.applyToOptions(options);
    }
options.closurePass=flags.process_closure_primitives||flags.flags;
    initOptionsFromFlags(options);
    return options;
  }
-if(flags.process_closure_primitives){
-options.closurePass=true;
-}
+options.closurePass=flags.process_closure_primitives||flags.flags;

0.2727272727272727
//Following are generated patch:
  protected CompilerOptions createOptions(){
    CompilerOptions options=new CompilerOptions();
    options.setCodingConvention(new ClosureCodingConvention());
    CompilationLevel level=flags.compilation_level;
    level.setOptionsForCompilationLevel(options);
    if (flags.debug) {
      level.setDebugOptionsForCompilationLevel(options);
    }
    WarningLevel wLevel=flags.warning_level;
    wLevel.setOptionsForWarningLevel(options);
    for (    FormattingOption formattingOption : flags.formatting) {
      formattingOption.applyToOptions(options);
    }
options.closurePass=flags.flags||flags.manage_closure_dependencies;
    if (flags.process_closure_primitives) {
      options.closurePass=true;
    }
    initOptionsFromFlags(options);
    return options;
  }
+options.closurePass=flags.flags||flags.manage_closure_dependencies;

0.2727272727272727
//Following are generated patch:
  protected CompilerOptions createOptions(){
    CompilerOptions options=new CompilerOptions();
    options.setCodingConvention(new ClosureCodingConvention());
    CompilationLevel level=flags.compilation_level;
    level.setOptionsForCompilationLevel(options);
    if (flags.debug) {
      level.setDebugOptionsForCompilationLevel(options);
    }
    WarningLevel wLevel=flags.warning_level;
    wLevel.setOptionsForWarningLevel(options);
    for (    FormattingOption formattingOption : flags.formatting) {
      formattingOption.applyToOptions(options);
    }
options.closurePass=flags.process_closure_primitives||!flags.options;
    if (flags.process_closure_primitives) {
      options.closurePass=true;
    }
    initOptionsFromFlags(options);
    return options;
  }
+options.closurePass=flags.process_closure_primitives||!flags.options;

0.2727272727272727
//Following are generated patch:
  protected CompilerOptions createOptions(){
    CompilerOptions options=new CompilerOptions();
    options.setCodingConvention(new ClosureCodingConvention());
    CompilationLevel level=flags.compilation_level;
    level.setOptionsForCompilationLevel(options);
    if (flags.debug) {
      level.setDebugOptionsForCompilationLevel(options);
    }
    WarningLevel wLevel=flags.warning_level;
    wLevel.setOptionsForWarningLevel(options);
    for (    FormattingOption formattingOption : flags.formatting) {
      formattingOption.applyToOptions(options);
    }
options.closurePass=flags.process_closure_primitives||flags.level;
    if (flags.process_closure_primitives) {
      options.closurePass=true;
    }
    initOptionsFromFlags(options);
    return options;
  }
+options.closurePass=flags.process_closure_primitives||flags.level;

0.2727272727272727
//Following are generated patch:
  protected CompilerOptions createOptions(){
    CompilerOptions options=new CompilerOptions();
    options.setCodingConvention(new ClosureCodingConvention());
    CompilationLevel level=flags.compilation_level;
    level.setOptionsForCompilationLevel(options);
    if (flags.debug) {
      level.setDebugOptionsForCompilationLevel(options);
    }
    WarningLevel wLevel=flags.warning_level;
    wLevel.setOptionsForWarningLevel(options);
    for (    FormattingOption formattingOption : flags.formatting) {
      formattingOption.applyToOptions(options);
    }
options.closurePass=flags.process_closure_primitives||flags.flags;
    if (flags.process_closure_primitives) {
      options.closurePass=true;
    }
    initOptionsFromFlags(options);
    return options;
  }
+options.closurePass=flags.process_closure_primitives||flags.flags;

0.2840909090909091
//Following are generated patch:
  protected CompilerOptions createOptions(){
    CompilerOptions options=new CompilerOptions();
    options.setCodingConvention(new ClosureCodingConvention());
    CompilationLevel level=flags.compilation_level;
    level.setOptionsForCompilationLevel(options);
    if (flags.debug) {
      level.setDebugOptionsForCompilationLevel(options);
    }
    WarningLevel wLevel=flags.warning_level;
    wLevel.setOptionsForWarningLevel(options);
    for (    FormattingOption formattingOption : flags.formatting) {
      formattingOption.applyToOptions(options);
    }
options.closurePass=flags.process_closure_primitives||!flags.level;
    if (flags.process_closure_primitives) {
    }
    initOptionsFromFlags(options);
    return options;
  }
-options.closurePass=true;
+options.closurePass=flags.process_closure_primitives||!flags.level;

0.2840909090909091
//Following are generated patch:
  protected CompilerOptions createOptions(){
    CompilerOptions options=new CompilerOptions();
    options.setCodingConvention(new ClosureCodingConvention());
    CompilationLevel level=flags.compilation_level;
    level.setOptionsForCompilationLevel(options);
    if (flags.debug) {
      level.setDebugOptionsForCompilationLevel(options);
    }
    WarningLevel wLevel=flags.warning_level;
    wLevel.setOptionsForWarningLevel(options);
    for (    FormattingOption formattingOption : flags.formatting) {
      formattingOption.applyToOptions(options);
    }
options.closurePass=flags.process_closure_primitives||!flags.flags;
    if (flags.process_closure_primitives) {
    }
    initOptionsFromFlags(options);
    return options;
  }
-options.closurePass=true;
+options.closurePass=flags.process_closure_primitives||!flags.flags;

0.2840909090909091
//Following are generated patch:
  protected CompilerOptions createOptions(){
    CompilerOptions options=new CompilerOptions();
    options.setCodingConvention(new ClosureCodingConvention());
    CompilationLevel level=flags.compilation_level;
    level.setOptionsForCompilationLevel(options);
    if (flags.debug) {
      level.setDebugOptionsForCompilationLevel(options);
    }
    WarningLevel wLevel=flags.warning_level;
    wLevel.setOptionsForWarningLevel(options);
    for (    FormattingOption formattingOption : flags.formatting) {
      formattingOption.applyToOptions(options);
    }
options.closurePass=flags.process_closure_primitives||flags.wLevel;
    if (flags.process_closure_primitives) {
    }
    initOptionsFromFlags(options);
    return options;
  }
-options.closurePass=true;
+options.closurePass=flags.process_closure_primitives||flags.wLevel;

0.2840909090909091
//Following are generated patch:
  protected CompilerOptions createOptions(){
    CompilerOptions options=new CompilerOptions();
    options.setCodingConvention(new ClosureCodingConvention());
    CompilationLevel level=flags.compilation_level;
    level.setOptionsForCompilationLevel(options);
    if (flags.debug) {
      level.setDebugOptionsForCompilationLevel(options);
    }
    WarningLevel wLevel=flags.warning_level;
    wLevel.setOptionsForWarningLevel(options);
    for (    FormattingOption formattingOption : flags.formatting) {
      formattingOption.applyToOptions(options);
    }
options.closurePass=flags.process_closure_primitives||!flags.level;
    initOptionsFromFlags(options);
    return options;
  }
-if(flags.process_closure_primitives){
-options.closurePass=true;
-}
+options.closurePass=flags.process_closure_primitives||!flags.level;

0.2840909090909091
//Following are generated patch:
  protected CompilerOptions createOptions(){
    CompilerOptions options=new CompilerOptions();
    options.setCodingConvention(new ClosureCodingConvention());
    CompilationLevel level=flags.compilation_level;
    level.setOptionsForCompilationLevel(options);
    if (flags.debug) {
      level.setDebugOptionsForCompilationLevel(options);
    }
    WarningLevel wLevel=flags.warning_level;
    wLevel.setOptionsForWarningLevel(options);
    for (    FormattingOption formattingOption : flags.formatting) {
      formattingOption.applyToOptions(options);
    }
options.closurePass=flags.process_closure_primitives||!flags.flags;
    initOptionsFromFlags(options);
    return options;
  }
-if(flags.process_closure_primitives){
-options.closurePass=true;
-}
+options.closurePass=flags.process_closure_primitives||!flags.flags;

0.2840909090909091
//Following are generated patch:
  protected CompilerOptions createOptions(){
    CompilerOptions options=new CompilerOptions();
    options.setCodingConvention(new ClosureCodingConvention());
    CompilationLevel level=flags.compilation_level;
    level.setOptionsForCompilationLevel(options);
    if (flags.debug) {
      level.setDebugOptionsForCompilationLevel(options);
    }
    WarningLevel wLevel=flags.warning_level;
    wLevel.setOptionsForWarningLevel(options);
    for (    FormattingOption formattingOption : flags.formatting) {
      formattingOption.applyToOptions(options);
    }
options.closurePass=flags.process_closure_primitives||flags.wLevel;
    initOptionsFromFlags(options);
    return options;
  }
-if(flags.process_closure_primitives){
-options.closurePass=true;
-}
+options.closurePass=flags.process_closure_primitives||flags.wLevel;

0.2840909090909091
//Following are generated patch:
  protected CompilerOptions createOptions(){
    CompilerOptions options=new CompilerOptions();
    options.setCodingConvention(new ClosureCodingConvention());
    CompilationLevel level=flags.compilation_level;
    level.setOptionsForCompilationLevel(options);
    if (flags.debug) {
      level.setDebugOptionsForCompilationLevel(options);
    }
    WarningLevel wLevel=flags.warning_level;
    wLevel.setOptionsForWarningLevel(options);
    for (    FormattingOption formattingOption : flags.formatting) {
      formattingOption.applyToOptions(options);
    }
options.closurePass=flags.process_closure_primitives||!flags.level;
    if (flags.process_closure_primitives) {
      options.closurePass=true;
    }
    initOptionsFromFlags(options);
    return options;
  }
+options.closurePass=flags.process_closure_primitives||!flags.level;

0.2840909090909091
//Following are generated patch:
  protected CompilerOptions createOptions(){
    CompilerOptions options=new CompilerOptions();
    options.setCodingConvention(new ClosureCodingConvention());
    CompilationLevel level=flags.compilation_level;
    level.setOptionsForCompilationLevel(options);
    if (flags.debug) {
      level.setDebugOptionsForCompilationLevel(options);
    }
    WarningLevel wLevel=flags.warning_level;
    wLevel.setOptionsForWarningLevel(options);
    for (    FormattingOption formattingOption : flags.formatting) {
      formattingOption.applyToOptions(options);
    }
options.closurePass=flags.process_closure_primitives||!flags.flags;
    if (flags.process_closure_primitives) {
      options.closurePass=true;
    }
    initOptionsFromFlags(options);
    return options;
  }
+options.closurePass=flags.process_closure_primitives||!flags.flags;

0.2840909090909091
//Following are generated patch:
  protected CompilerOptions createOptions(){
    CompilerOptions options=new CompilerOptions();
    options.setCodingConvention(new ClosureCodingConvention());
    CompilationLevel level=flags.compilation_level;
    level.setOptionsForCompilationLevel(options);
    if (flags.debug) {
      level.setDebugOptionsForCompilationLevel(options);
    }
    WarningLevel wLevel=flags.warning_level;
    wLevel.setOptionsForWarningLevel(options);
    for (    FormattingOption formattingOption : flags.formatting) {
      formattingOption.applyToOptions(options);
    }
options.closurePass=flags.process_closure_primitives||flags.wLevel;
    if (flags.process_closure_primitives) {
      options.closurePass=true;
    }
    initOptionsFromFlags(options);
    return options;
  }
+options.closurePass=flags.process_closure_primitives||flags.wLevel;

0.29545454545454547
//Following are generated patch:
  protected CompilerOptions createOptions(){
    CompilerOptions options=new CompilerOptions();
    options.setCodingConvention(new ClosureCodingConvention());
    CompilationLevel level=flags.compilation_level;
    level.setOptionsForCompilationLevel(options);
    if (flags.debug) {
      level.setDebugOptionsForCompilationLevel(options);
    }
    WarningLevel wLevel=flags.warning_level;
    wLevel.setOptionsForWarningLevel(options);
    for (    FormattingOption formattingOption : flags.formatting) {
      formattingOption.applyToOptions(options);
    }
options.closurePass=flags.process_closure_primitives||!flags.wLevel;
    if (flags.process_closure_primitives) {
    }
    initOptionsFromFlags(options);
    return options;
  }
-options.closurePass=true;
+options.closurePass=flags.process_closure_primitives||!flags.wLevel;

0.29545454545454547
//Following are generated patch:
  protected CompilerOptions createOptions(){
    CompilerOptions options=new CompilerOptions();
    options.setCodingConvention(new ClosureCodingConvention());
    CompilationLevel level=flags.compilation_level;
    level.setOptionsForCompilationLevel(options);
    if (flags.debug) {
      level.setDebugOptionsForCompilationLevel(options);
    }
    WarningLevel wLevel=flags.warning_level;
    wLevel.setOptionsForWarningLevel(options);
    for (    FormattingOption formattingOption : flags.formatting) {
      formattingOption.applyToOptions(options);
    }
options.closurePass=flags.process_closure_primitives||!flags.wLevel;
    initOptionsFromFlags(options);
    return options;
  }
-if(flags.process_closure_primitives){
-options.closurePass=true;
-}
+options.closurePass=flags.process_closure_primitives||!flags.wLevel;

0.29545454545454547
//Following are generated patch:
  protected CompilerOptions createOptions(){
    CompilerOptions options=new CompilerOptions();
    options.setCodingConvention(new ClosureCodingConvention());
    CompilationLevel level=flags.compilation_level;
    level.setOptionsForCompilationLevel(options);
    if (flags.debug) {
      level.setDebugOptionsForCompilationLevel(options);
    }
    WarningLevel wLevel=flags.warning_level;
    wLevel.setOptionsForWarningLevel(options);
    for (    FormattingOption formattingOption : flags.formatting) {
      formattingOption.applyToOptions(options);
    }
options.closurePass=flags.process_closure_primitives||!flags.wLevel;
    if (flags.process_closure_primitives) {
      options.closurePass=true;
    }
    initOptionsFromFlags(options);
    return options;
  }
+options.closurePass=flags.process_closure_primitives||!flags.wLevel;

0.38636363636363635
//Following are generated patch:
  protected CompilerOptions createOptions(){
    CompilerOptions options=new CompilerOptions();
    options.setCodingConvention(new ClosureCodingConvention());
    CompilationLevel level=flags.compilation_level;
    level.setOptionsForCompilationLevel(options);
    if (flags.debug) {
      level.setDebugOptionsForCompilationLevel(options);
    }
    WarningLevel wLevel=flags.warning_level;
    wLevel.setOptionsForWarningLevel(options);
    for (    FormattingOption formattingOption : flags.formatting) {
      formattingOption.applyToOptions(options);
    }
options.closurePass=flags.manage_closure_dependencies;
    if (flags.process_closure_primitives) {
    }
    initOptionsFromFlags(options);
    return options;
  }
-options.closurePass=true;
+options.closurePass=flags.manage_closure_dependencies;

0.38636363636363635
//Following are generated patch:
  protected CompilerOptions createOptions(){
    CompilerOptions options=new CompilerOptions();
    options.setCodingConvention(new ClosureCodingConvention());
    CompilationLevel level=flags.compilation_level;
    level.setOptionsForCompilationLevel(options);
    if (flags.debug) {
      level.setDebugOptionsForCompilationLevel(options);
    }
    WarningLevel wLevel=flags.warning_level;
    wLevel.setOptionsForWarningLevel(options);
    for (    FormattingOption formattingOption : flags.formatting) {
      formattingOption.applyToOptions(options);
    }
options.closurePass=flags.manage_closure_dependencies;
    initOptionsFromFlags(options);
    return options;
  }
-if(flags.process_closure_primitives){
-options.closurePass=true;
-}
+options.closurePass=flags.manage_closure_dependencies;

0.38636363636363635
//Following are generated patch:
  protected CompilerOptions createOptions(){
    CompilerOptions options=new CompilerOptions();
    options.setCodingConvention(new ClosureCodingConvention());
    CompilationLevel level=flags.compilation_level;
    level.setOptionsForCompilationLevel(options);
    if (flags.debug) {
      level.setDebugOptionsForCompilationLevel(options);
    }
    WarningLevel wLevel=flags.warning_level;
    wLevel.setOptionsForWarningLevel(options);
    for (    FormattingOption formattingOption : flags.formatting) {
      formattingOption.applyToOptions(options);
    }
options.closurePass=flags.manage_closure_dependencies;
    if (flags.process_closure_primitives) {
      options.closurePass=true;
    }
    initOptionsFromFlags(options);
    return options;
  }
+options.closurePass=flags.manage_closure_dependencies;

0.3977272727272727
//Following are generated patch:
  protected CompilerOptions createOptions(){
    CompilerOptions options=new CompilerOptions();
    options.setCodingConvention(new ClosureCodingConvention());
    CompilationLevel level=flags.compilation_level;
    level.setOptionsForCompilationLevel(options);
    if (flags.debug) {
      level.setDebugOptionsForCompilationLevel(options);
    }
    WarningLevel wLevel=flags.warning_level;
    wLevel.setOptionsForWarningLevel(options);
    for (    FormattingOption formattingOption : flags.formatting) {
      formattingOption.applyToOptions(options);
    }
options.closurePass=flags.process_closure_primitives;
    if (flags.process_closure_primitives) {
    }
    initOptionsFromFlags(options);
    return options;
  }
-options.closurePass=true;
+options.closurePass=flags.process_closure_primitives;

0.3977272727272727
//Following are generated patch:
  protected CompilerOptions createOptions(){
    CompilerOptions options=new CompilerOptions();
    options.setCodingConvention(new ClosureCodingConvention());
    CompilationLevel level=flags.compilation_level;
    level.setOptionsForCompilationLevel(options);
    if (flags.debug) {
      level.setDebugOptionsForCompilationLevel(options);
    }
    WarningLevel wLevel=flags.warning_level;
    wLevel.setOptionsForWarningLevel(options);
    for (    FormattingOption formattingOption : flags.formatting) {
      formattingOption.applyToOptions(options);
    }
options.closurePass=flags.process_closure_primitives;
    initOptionsFromFlags(options);
    return options;
  }
-if(flags.process_closure_primitives){
-options.closurePass=true;
-}
+options.closurePass=flags.process_closure_primitives;

FILE : /Users/ffengjay/Postgraduate/PLM4APR/tmp/defects4j_buggy//closure/closure_101_buggy/src/com/google/javascript/jscomp/CommandLineRunner.java
SUCCESS
57 th patch
//Following are generated patch:
  protected CompilerOptions createOptions(){
    CompilerOptions options=new CompilerOptions();
    options.setCodingConvention(new ClosureCodingConvention());
    CompilationLevel level=flags.compilation_level;
    level.setOptionsForCompilationLevel(options);
    if (flags.debug) {
      level.setDebugOptionsForCompilationLevel(options);
    }
    WarningLevel wLevel=flags.warning_level;
    wLevel.setOptionsForWarningLevel(options);
    for (    FormattingOption formattingOption : flags.formatting) {
      formattingOption.applyToOptions(options);
    }
options.closurePass=flags.process_closure_primitives;
    initOptionsFromFlags(options);
    return options;
  }

START : 
2023.11.13 AD at 18:59:57 CST
---------TIME : 
2023.11.13 AD at 18:59:58 CST
--------------- END -----------------
[7, 9, 36, 6, 0, 0, 12, 0, 0, 0]
Finish : closure-101 > patch : 1 | Start : Mon Nov 13 18:59:57 CST 2023 | End : 2023.11.13 AD at 18:59:59 CST
