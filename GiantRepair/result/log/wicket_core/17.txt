Repair : wicket_core_17
Current file:/Users/ffengjay/Postgraduate/PLM4APR/codex_out/valuable_patches_growing_real/wicket_core_17/patch.java
Patch Number: /Users/ffengjay/Postgraduate/PLM4APR/codex_out/valuable_patches_growing_real/wicket_core_17/patch.java
Following are 0th generated patches:
0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(FLAG_AFTER_RENDERING,false);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(FLAG_AFTER_RENDERING,false);

[1, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Following are 1th generated patches:
0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(FLAG_AFTER_RENDERING,false);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(FLAG_AFTER_RENDERING,false);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(FLAG_AFTER_RENDERING,true);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(FLAG_AFTER_RENDERING,true);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(FLAG_RENDERING,false);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(FLAG_RENDERING,false);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_set(FLAG_AFTER_RENDERING,false);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_set(FLAG_AFTER_RENDERING,false);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
getFlag(FLAG_AFTER_RENDERING);
    }
  }
-setFlag(FLAG_RENDERING,false);
+getFlag(FLAG_AFTER_RENDERING);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setRequestFlag(FLAG_AFTER_RENDERING,false);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setRequestFlag(FLAG_AFTER_RENDERING,false);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(FLAG_HAS_BEEN_RENDERED,false);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(FLAG_HAS_BEEN_RENDERED,false);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_insert(FLAG_AFTER_RENDERING,false);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_insert(FLAG_AFTER_RENDERING,false);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(FLAG_RENDERING,true);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(FLAG_RENDERING,true);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_set(FLAG_AFTER_RENDERING,data);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_set(FLAG_AFTER_RENDERING,data);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(FLAG_RESERVED3,false);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(FLAG_RESERVED3,false);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(FLAG_RESERVED2,false);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(FLAG_RESERVED2,false);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(FLAG_RESERVED1,false);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(FLAG_RESERVED1,false);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(FLAG_DETACHING,false);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(FLAG_DETACHING,false);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(FLAG_RESERVED4,false);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(FLAG_RESERVED4,false);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(FLAG_VERSIONED,false);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(FLAG_VERSIONED,false);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(FLAG_RESERVED5,false);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(FLAG_RESERVED5,false);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(FLAG_RESERVED8,false);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(FLAG_RESERVED8,false);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(FLAG_REMOVED,false);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(FLAG_REMOVED,false);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(FLAG_PLACEHOLDER,false);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(FLAG_PLACEHOLDER,false);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(FLAG_MODEL_SET,false);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(FLAG_MODEL_SET,false);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(FLAG_RENDER_BODY_ONLY,false);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(FLAG_RENDER_BODY_ONLY,false);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_get(FLAG_AFTER_RENDERING);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_get(FLAG_AFTER_RENDERING);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
getFlag(FLAG_RENDERING);
    }
  }
-setFlag(FLAG_RENDERING,false);
+getFlag(FLAG_RENDERING);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(FLAG_AUTO,false);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(FLAG_AUTO,false);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(FLAG_ENABLED,false);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(FLAG_ENABLED,false);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(FLAG_PREPARED_FOR_RENDER,false);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(FLAG_PREPARED_FOR_RENDER,false);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(FLAG_HAS_BEEN_RENDERED,true);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(FLAG_HAS_BEEN_RENDERED,true);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(FLAG_UNUSED3,false);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(FLAG_UNUSED3,false);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(FLAG_UNUSED2,false);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(FLAG_UNUSED2,false);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(FLAG_UNUSED1,false);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(FLAG_UNUSED1,false);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(FLAG_UNUSED0,false);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(FLAG_UNUSED0,false);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(FLAG_IS_RENDER_ALLOWED,false);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(FLAG_IS_RENDER_ALLOWED,false);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_insert(FLAG_AFTER_RENDERING,data);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_insert(FLAG_AFTER_RENDERING,data);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(FLAG_OUTPUT_MARKUP_ID,false);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(FLAG_OUTPUT_MARKUP_ID,false);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(FLAG_INITIALIZED,false);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(FLAG_INITIALIZED,false);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(FLAG_VISIBLE,false);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(FLAG_VISIBLE,false);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(FLAG_INHERITABLE_MODEL,false);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(FLAG_INHERITABLE_MODEL,false);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(FLAG_ESCAPE_MODEL_STRINGS,false);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(FLAG_ESCAPE_MODEL_STRINGS,false);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
getFlag(FLAG_IS_RENDER_ALLOWED);
    }
  }
-setFlag(FLAG_RENDERING,false);
+getFlag(FLAG_IS_RENDER_ALLOWED);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(FLAG_RESERVED3,true);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(FLAG_RESERVED3,true);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(FLAG_RESERVED2,true);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(FLAG_RESERVED2,true);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(FLAG_RESERVED1,true);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(FLAG_RESERVED1,true);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(FLAG_DETACHING,true);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(FLAG_DETACHING,true);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(FLAG_RESERVED4,true);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(FLAG_RESERVED4,true);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(FLAG_VERSIONED,true);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(FLAG_VERSIONED,true);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(FLAG_RESERVED5,true);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(FLAG_RESERVED5,true);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(FLAG_RESERVED8,true);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(FLAG_RESERVED8,true);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_remove(FLAG_AFTER_RENDERING);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_remove(FLAG_AFTER_RENDERING);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
getFlag(FLAG_HAS_BEEN_RENDERED);
    }
  }
-setFlag(FLAG_RENDERING,false);
+getFlag(FLAG_HAS_BEEN_RENDERED);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(FLAG_REMOVED,true);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(FLAG_REMOVED,true);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(FLAG_PLACEHOLDER,true);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(FLAG_PLACEHOLDER,true);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(FLAG_MODEL_SET,true);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(FLAG_MODEL_SET,true);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(FLAG_RENDER_BODY_ONLY,true);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(FLAG_RENDER_BODY_ONLY,true);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_set(FLAG_RENDERING,data);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_set(FLAG_RENDERING,data);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
getFlag(FLAG_RENDER_BODY_ONLY);
    }
  }
-setFlag(FLAG_RENDERING,false);
+getFlag(FLAG_RENDER_BODY_ONLY);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(FLAG_AUTO,true);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(FLAG_AUTO,true);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(FLAG_ENABLED,true);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(FLAG_ENABLED,true);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(FLAG_PREPARED_FOR_RENDER,true);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(FLAG_PREPARED_FOR_RENDER,true);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(FLAG_UNUSED3,true);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(FLAG_UNUSED3,true);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(FLAG_UNUSED2,true);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(FLAG_UNUSED2,true);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(FLAG_UNUSED1,true);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(FLAG_UNUSED1,true);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(FLAG_UNUSED0,true);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(FLAG_UNUSED0,true);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(FLAG_IS_RENDER_ALLOWED,true);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(FLAG_IS_RENDER_ALLOWED,true);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
getFlag(FLAG_RESERVED3);
    }
  }
-setFlag(FLAG_RENDERING,false);
+getFlag(FLAG_RESERVED3);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
getFlag(FLAG_RESERVED2);
    }
  }
-setFlag(FLAG_RENDERING,false);
+getFlag(FLAG_RESERVED2);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
getFlag(FLAG_RESERVED1);
    }
  }
-setFlag(FLAG_RENDERING,false);
+getFlag(FLAG_RESERVED1);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
getFlag(FLAG_PREPARED_FOR_RENDER);
    }
  }
-setFlag(FLAG_RENDERING,false);
+getFlag(FLAG_PREPARED_FOR_RENDER);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
getFlag(FLAG_DETACHING);
    }
  }
-setFlag(FLAG_RENDERING,false);
+getFlag(FLAG_DETACHING);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
getFlag(FLAG_RESERVED4);
    }
  }
-setFlag(FLAG_RENDERING,false);
+getFlag(FLAG_RESERVED4);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
getFlag(FLAG_VERSIONED);
    }
  }
-setFlag(FLAG_RENDERING,false);
+getFlag(FLAG_VERSIONED);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
getFlag(FLAG_RESERVED5);
    }
  }
-setFlag(FLAG_RENDERING,false);
+getFlag(FLAG_RESERVED5);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
getFlag(FLAG_RESERVED8);
    }
  }
-setFlag(FLAG_RENDERING,false);
+getFlag(FLAG_RESERVED8);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(FLAG_OUTPUT_MARKUP_ID,true);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(FLAG_OUTPUT_MARKUP_ID,true);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(FLAG_VISIBILITY_ALLOWED,false);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(FLAG_VISIBILITY_ALLOWED,false);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(FLAG_INITIALIZED,true);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(FLAG_INITIALIZED,true);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(FLAG_VISIBLE,true);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(FLAG_VISIBLE,true);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(FLAG_INHERITABLE_MODEL,true);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(FLAG_INHERITABLE_MODEL,true);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(FLAG_ESCAPE_MODEL_STRINGS,true);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(FLAG_ESCAPE_MODEL_STRINGS,true);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setRequestFlag(RFLAG_CONTAINER_DEQUEING,false);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setRequestFlag(RFLAG_CONTAINER_DEQUEING,false);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
getBehaviorById(FLAG_AFTER_RENDERING);
    }
  }
-setFlag(FLAG_RENDERING,false);
+getBehaviorById(FLAG_AFTER_RENDERING);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_get(FLAG_RENDERING);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_get(FLAG_RENDERING);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_insert(FLAG_RENDERING,data);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_insert(FLAG_RENDERING,data);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
getFlag(FLAG_REMOVED);
    }
  }
-setFlag(FLAG_RENDERING,false);
+getFlag(FLAG_REMOVED);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
getFlag(FLAG_PLACEHOLDER);
    }
  }
-setFlag(FLAG_RENDERING,false);
+getFlag(FLAG_PLACEHOLDER);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
getFlag(FLAG_MODEL_SET);
    }
  }
-setFlag(FLAG_RENDERING,false);
+getFlag(FLAG_MODEL_SET);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
getFlag(FLAG_INHERITABLE_MODEL);
    }
  }
-setFlag(FLAG_RENDERING,false);
+getFlag(FLAG_INHERITABLE_MODEL);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(generatedMarkupId,false);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(generatedMarkupId,false);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(FLAG_REMOVING_FROM_HIERARCHY,false);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(FLAG_REMOVING_FROM_HIERARCHY,false);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(FLAG_IGNORE_ATTRIBUTE_MODIFIER,false);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(FLAG_IGNORE_ATTRIBUTE_MODIFIER,false);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_set(FLAG_HAS_BEEN_RENDERED,data);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_set(FLAG_HAS_BEEN_RENDERED,data);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
getFlag(FLAG_OUTPUT_MARKUP_ID);
    }
  }
-setFlag(FLAG_RENDERING,false);
+getFlag(FLAG_OUTPUT_MARKUP_ID);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
getFlag(FLAG_AUTO);
    }
  }
-setFlag(FLAG_RENDERING,false);
+getFlag(FLAG_AUTO);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
getFlag(FLAG_ENABLED);
    }
  }
-setFlag(FLAG_RENDERING,false);
+getFlag(FLAG_ENABLED);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
getFlag(FLAG_INITIALIZED);
    }
  }
-setFlag(FLAG_RENDERING,false);
+getFlag(FLAG_INITIALIZED);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
getFlag(FLAG_UNUSED3);
    }
  }
-setFlag(FLAG_RENDERING,false);
+getFlag(FLAG_UNUSED3);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
getFlag(FLAG_UNUSED2);
    }
  }
-setFlag(FLAG_RENDERING,false);
+getFlag(FLAG_UNUSED2);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
getFlag(FLAG_UNUSED1);
    }
  }
-setFlag(FLAG_RENDERING,false);
+getFlag(FLAG_UNUSED1);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
getFlag(FLAG_UNUSED0);
    }
  }
-setFlag(FLAG_RENDERING,false);
+getFlag(FLAG_UNUSED0);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
getFlag(FLAG_ESCAPE_MODEL_STRINGS);
    }
  }
-setFlag(FLAG_RENDERING,false);
+getFlag(FLAG_ESCAPE_MODEL_STRINGS);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(flags,false);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(flags,false);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(0,false);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(0,false);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(1,false);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(1,false);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(-1,false);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(-1,false);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_get(FLAG_IS_RENDER_ALLOWED);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_get(FLAG_IS_RENDER_ALLOWED);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_remove(FLAG_RENDERING);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_remove(FLAG_RENDERING);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
getFlag(FLAG_VISIBLE);
    }
  }
-setFlag(FLAG_RENDERING,false);
+getFlag(FLAG_VISIBLE);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setRequestFlag(RFLAG_CONFIGURED,false);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setRequestFlag(RFLAG_CONFIGURED,false);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_get(FLAG_HAS_BEEN_RENDERED);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_get(FLAG_HAS_BEEN_RENDERED);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_set(FLAG_RESERVED3,data);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_set(FLAG_RESERVED3,data);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_set(FLAG_RESERVED2,data);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_set(FLAG_RESERVED2,data);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_set(FLAG_RESERVED1,data);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_set(FLAG_RESERVED1,data);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_set(FLAG_DETACHING,data);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_set(FLAG_DETACHING,data);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_set(FLAG_RESERVED4,data);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_set(FLAG_RESERVED4,data);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_set(FLAG_VERSIONED,data);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_set(FLAG_VERSIONED,data);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_set(FLAG_RESERVED5,data);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_set(FLAG_RESERVED5,data);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_set(FLAG_RESERVED8,data);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_set(FLAG_RESERVED8,data);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
getFlag(FLAG_VISIBILITY_ALLOWED);
    }
  }
-setFlag(FLAG_RENDERING,false);
+getFlag(FLAG_VISIBILITY_ALLOWED);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(FLAG_VISIBILITY_ALLOWED,true);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(FLAG_VISIBILITY_ALLOWED,true);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setRequestFlag(RFLAG_CONTAINER_DEQUEING,true);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setRequestFlag(RFLAG_CONTAINER_DEQUEING,true);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
getBehaviorById(FLAG_RENDERING);
    }
  }
-setFlag(FLAG_RENDERING,false);
+getBehaviorById(FLAG_RENDERING);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_get(FLAG_RENDER_BODY_ONLY);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_get(FLAG_RENDER_BODY_ONLY);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_set(FLAG_REMOVED,data);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_set(FLAG_REMOVED,data);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_set(FLAG_PLACEHOLDER,data);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_set(FLAG_PLACEHOLDER,data);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_set(FLAG_MODEL_SET,data);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_set(FLAG_MODEL_SET,data);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_set(FLAG_RENDER_BODY_ONLY,data);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_set(FLAG_RENDER_BODY_ONLY,data);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_insert(FLAG_HAS_BEEN_RENDERED,data);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_insert(FLAG_HAS_BEEN_RENDERED,data);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
getFlag(FLAG_REMOVING_FROM_HIERARCHY);
    }
  }
-setFlag(FLAG_RENDERING,false);
+getFlag(FLAG_REMOVING_FROM_HIERARCHY);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
getFlag(FLAG_IGNORE_ATTRIBUTE_MODIFIER);
    }
  }
-setFlag(FLAG_RENDERING,false);
+getFlag(FLAG_IGNORE_ATTRIBUTE_MODIFIER);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(generatedMarkupId,true);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(generatedMarkupId,true);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(FLAG_REMOVING_FROM_HIERARCHY,true);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(FLAG_REMOVING_FROM_HIERARCHY,true);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(FLAG_IGNORE_ATTRIBUTE_MODIFIER,true);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(FLAG_IGNORE_ATTRIBUTE_MODIFIER,true);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setId(Action.RENDER);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setId(Action.RENDER);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_get(FLAG_RESERVED3);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_get(FLAG_RESERVED3);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_get(FLAG_RESERVED2);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_get(FLAG_RESERVED2);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_get(FLAG_RESERVED1);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_get(FLAG_RESERVED1);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_get(FLAG_PREPARED_FOR_RENDER);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_get(FLAG_PREPARED_FOR_RENDER);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_get(FLAG_DETACHING);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_get(FLAG_DETACHING);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_get(FLAG_RESERVED4);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_get(FLAG_RESERVED4);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_get(FLAG_VERSIONED);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_get(FLAG_VERSIONED);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_get(FLAG_RESERVED5);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_get(FLAG_RESERVED5);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_get(FLAG_RESERVED8);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_get(FLAG_RESERVED8);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_set(FLAG_AUTO,data);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_set(FLAG_AUTO,data);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_set(FLAG_ENABLED,data);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_set(FLAG_ENABLED,data);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_set(FLAG_PREPARED_FOR_RENDER,data);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_set(FLAG_PREPARED_FOR_RENDER,data);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_set(FLAG_UNUSED3,data);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_set(FLAG_UNUSED3,data);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_set(FLAG_UNUSED2,data);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_set(FLAG_UNUSED2,data);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_set(FLAG_UNUSED1,data);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_set(FLAG_UNUSED1,data);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_set(FLAG_UNUSED0,data);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_set(FLAG_UNUSED0,data);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_set(FLAG_IS_RENDER_ALLOWED,data);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_set(FLAG_IS_RENDER_ALLOWED,data);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_insert(FLAG_DETACHING,data);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_insert(FLAG_DETACHING,data);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_remove(FLAG_IS_RENDER_ALLOWED);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_remove(FLAG_IS_RENDER_ALLOWED);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setMarkupId(Action.RENDER);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setMarkupId(Action.RENDER);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(flags,true);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(flags,true);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(0,true);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(0,true);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(1,true);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(1,true);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setFlag(-1,true);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setFlag(-1,true);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
get(Action.RENDER);
    }
  }
-setFlag(FLAG_RENDERING,false);
+get(Action.RENDER);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_get(FLAG_REMOVED);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_get(FLAG_REMOVED);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_get(FLAG_PLACEHOLDER);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_get(FLAG_PLACEHOLDER);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_get(FLAG_MODEL_SET);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_get(FLAG_MODEL_SET);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_get(FLAG_INHERITABLE_MODEL);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_get(FLAG_INHERITABLE_MODEL);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_set(FLAG_OUTPUT_MARKUP_ID,data);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_set(FLAG_OUTPUT_MARKUP_ID,data);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_set(FLAG_INITIALIZED,data);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_set(FLAG_INITIALIZED,data);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_set(FLAG_VISIBLE,data);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_set(FLAG_VISIBLE,data);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_set(FLAG_INHERITABLE_MODEL,data);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_set(FLAG_INHERITABLE_MODEL,data);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_set(FLAG_ESCAPE_MODEL_STRINGS,data);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_set(FLAG_ESCAPE_MODEL_STRINGS,data);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_insert(FLAG_RESERVED3,data);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_insert(FLAG_RESERVED3,data);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_insert(FLAG_RESERVED2,data);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_insert(FLAG_RESERVED2,data);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_insert(FLAG_RESERVED1,data);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_insert(FLAG_RESERVED1,data);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_insert(FLAG_RESERVED4,data);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_insert(FLAG_RESERVED4,data);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_insert(FLAG_VERSIONED,data);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_insert(FLAG_VERSIONED,data);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_insert(FLAG_RESERVED5,data);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_insert(FLAG_RESERVED5,data);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_insert(FLAG_RESERVED8,data);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_insert(FLAG_RESERVED8,data);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_remove(FLAG_RENDER_BODY_ONLY);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_remove(FLAG_RENDER_BODY_ONLY);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_remove(FLAG_HAS_BEEN_RENDERED);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_remove(FLAG_HAS_BEEN_RENDERED);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
getMarkupId(false);
    }
  }
-setFlag(FLAG_RENDERING,false);
+getMarkupId(false);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
getString(Action.RENDER);
    }
  }
-setFlag(FLAG_RENDERING,false);
+getString(Action.RENDER);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setEnabled(false);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setEnabled(false);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setOutputMarkupId(false);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setOutputMarkupId(false);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
getFlag(flags);
    }
  }
-setFlag(FLAG_RENDERING,false);
+getFlag(flags);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
getRequestFlag(RFLAG_CONTAINER_DEQUEING);
    }
  }
-setFlag(FLAG_RENDERING,false);
+getRequestFlag(RFLAG_CONTAINER_DEQUEING);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setAuto(false);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setAuto(false);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setRequestFlag(RFLAG_CONFIGURED,true);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setRequestFlag(RFLAG_CONFIGURED,true);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setRequestFlag(requestFlags,false);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setRequestFlag(requestFlags,false);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setIgnoreAttributeModifier(false);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setIgnoreAttributeModifier(false);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setRenderAllowed(false);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setRenderAllowed(false);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setVisibilityAllowed(false);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setVisibilityAllowed(false);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_get(FLAG_OUTPUT_MARKUP_ID);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_get(FLAG_OUTPUT_MARKUP_ID);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_get(FLAG_AUTO);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_get(FLAG_AUTO);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_get(FLAG_ENABLED);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_get(FLAG_ENABLED);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_get(FLAG_INITIALIZED);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_get(FLAG_INITIALIZED);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_get(FLAG_UNUSED3);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_get(FLAG_UNUSED3);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_get(FLAG_UNUSED2);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_get(FLAG_UNUSED2);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_get(FLAG_UNUSED1);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_get(FLAG_UNUSED1);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_get(FLAG_UNUSED0);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_get(FLAG_UNUSED0);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_get(FLAG_ESCAPE_MODEL_STRINGS);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_get(FLAG_ESCAPE_MODEL_STRINGS);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_insert(FLAG_REMOVED,data);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_insert(FLAG_REMOVED,data);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_insert(FLAG_PLACEHOLDER,data);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_insert(FLAG_PLACEHOLDER,data);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_insert(FLAG_ENABLED,data);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_insert(FLAG_ENABLED,data);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_insert(FLAG_MODEL_SET,data);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_insert(FLAG_MODEL_SET,data);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_insert(FLAG_RENDER_BODY_ONLY,data);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_insert(FLAG_RENDER_BODY_ONLY,data);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_remove(FLAG_RESERVED3);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_remove(FLAG_RESERVED3);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_remove(FLAG_RESERVED2);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_remove(FLAG_RESERVED2);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_remove(FLAG_RESERVED1);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_remove(FLAG_RESERVED1);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_remove(FLAG_DETACHING);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_remove(FLAG_DETACHING);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_remove(FLAG_RESERVED4);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_remove(FLAG_RESERVED4);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_remove(FLAG_RESERVED5);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_remove(FLAG_RESERVED5);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_remove(FLAG_RESERVED8);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_remove(FLAG_RESERVED8);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
internalPrepareForRender(false);
    }
  }
-setFlag(FLAG_RENDERING,false);
+internalPrepareForRender(false);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setEscapeModelStrings(false);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setEscapeModelStrings(false);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setRenderBodyOnly(false);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setRenderBodyOnly(false);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setVersioned(false);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setVersioned(false);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setVisible(false);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setVisible(false);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
getFlag(generatedMarkupId);
    }
  }
-setFlag(FLAG_RENDERING,false);
+getFlag(generatedMarkupId);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setId(PARENT_PATH);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setId(PARENT_PATH);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
setId(MARKUP_ID_ATTR_NAME);
    }
  }
-setFlag(FLAG_RENDERING,false);
+setId(MARKUP_ID_ATTR_NAME);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
getBehaviorById(FLAG_RENDER_BODY_ONLY);
    }
  }
-setFlag(FLAG_RENDERING,false);
+getBehaviorById(FLAG_RENDER_BODY_ONLY);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
getBehaviorById(FLAG_IS_RENDER_ALLOWED);
    }
  }
-setFlag(FLAG_RENDERING,false);
+getBehaviorById(FLAG_IS_RENDER_ALLOWED);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_get(FLAG_VISIBLE);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_get(FLAG_VISIBLE);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_insert(FLAG_AUTO,data);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_insert(FLAG_AUTO,data);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_insert(FLAG_PREPARED_FOR_RENDER,data);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_insert(FLAG_PREPARED_FOR_RENDER,data);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_insert(FLAG_UNUSED3,data);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_insert(FLAG_UNUSED3,data);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_insert(FLAG_UNUSED2,data);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_insert(FLAG_UNUSED2,data);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_insert(FLAG_UNUSED1,data);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_insert(FLAG_UNUSED1,data);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_insert(FLAG_UNUSED0,data);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_insert(FLAG_UNUSED0,data);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_insert(FLAG_IS_RENDER_ALLOWED,data);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_insert(FLAG_IS_RENDER_ALLOWED,data);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_remove(FLAG_PREPARED_FOR_RENDER);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_remove(FLAG_PREPARED_FOR_RENDER);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
data_remove(FLAG_VERSIONED);
    }
  }
-setFlag(FLAG_RENDERING,false);
+data_remove(FLAG_VERSIONED);

0.0
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
markRendering(false);
    }
  }
-setFlag(FLAG_RENDERING,false);
+markRendering(false);

FILE : /Users/ffengjay/Postgraduate/PLM4APR/tmp/defects4j_buggy//wicket_core/wicket_core_17_buggy/wicket-core/src/main/java/org/apache/wicket/Component.java
SUCCESS
//Following are generated patch:
  /** 
 * Called on every component after the page is rendered. It will call onAfterRender for it self and its children.
 */
  public final void afterRender(){
    try {
      setFlag(FLAG_AFTER_RENDERING,true);
      onAfterRenderChildren();
      onAfterRender();
      getApplication().getComponentOnAfterRenderListeners().onAfterRender(this);
      if (getFlag(FLAG_AFTER_RENDERING)) {
        throw new IllegalStateException(Component.class.getName() + " has not been properly detached. Something in the hierarchy of " + getClass().getName()+ " has not called super.onAfterRender() in the override of onAfterRender() method");
      }
    }
  finally {
markRendering(false);
    }
  }

230 th patch/231
START : 
2024.02.27 AD at 08:58:32 CST
---------TIME : 
2024.02.27 AD at 08:58:37 CST
--------------- END -----------------
[386, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Tested:0 patches
Compile failed:0 patches
Compilation rate:NaN
Finish : wicket_core-17 > patch : 1 | Start : Tue Feb 27 08:58:32 CST 2024 | End : 2024.02.27 AD at 08:58:37 CST
