FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Solution---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
- final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
+ final int max=(maxIterations<=0)?Integer.MAX_VALUE:maxIterations;
 for(int count=0;count<max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:19:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java[83,135]
------------Solution---------------
 public List<Cluster<T>> cluster(Collection<T> points,int k,int maxIterations){
 List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
 assignPointsToClusters(clusters,points);
- final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;
-for(int count=0;count<max;count++){
+ final int max=(maxIterations<=0)?Integer.MAX_VALUE:maxIterations;
+for(int count=0;count<=max;count++){
 boolean clusteringChanged=false;
 List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
 for(Cluster<T> cluster : clusters){
  final T newCenter;
 if(cluster.getPoints().isEmpty()){
 switch (emptyStrategy){
 case LARGEST_VARIANCE :
 
 newCenter=getPointFromLargestVarianceCluster(clusters);
 break;
 case LARGEST_POINTS_NUMBER :
 
 newCenter=getPointFromLargestNumberCluster(clusters);
 break;
 case FARTHEST_POINT :
 
 newCenter=getFarthestPoint(clusters);
 break;
 default :
 
 throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
 }
 clusteringChanged=true;
 }else {
 newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
 if(!newCenter.equals(cluster.getCenter())){
 clusteringChanged=true;
 }
 }
 newClusters.add(new Cluster<T>(newCenter));
 }
 if(!clusteringChanged){
 return clusters;
 }
 assignPointsToClusters(newClusters,points);
 clusters=newClusters;
 }
 return clusters;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4679/pattern-ver1-serial/src.course.Grass.java-render.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances]
---------START : 2019.09.06 AD at 17:55:26 CDT
---------TIME : 2019.09.06 AD at 19:22:51 CDT
--------------- END -----------------
