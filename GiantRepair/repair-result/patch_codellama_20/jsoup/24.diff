Following diff 2:
-t.dataBuffer.append(c);
+r.unconsume();
+t.emit("&lt;"+c);
Following diff 3:
+r.unconsume();
Following diff 5:
-r.advance();
-t.dataBuffer.append(c);
Following diff 5:
-r.advance();
Following diff 5:
-r.advance();
-t.dataBuffer.append(c);
+r.matchConsume("]]>");
Following diff 5:
-r.advance();
-t.dataBuffer.append(c);
+r.matchConsume("[CDATA[");
Following diff 5:
-r.advance();
-t.dataBuffer.append(c);
+r.matchConsumeIgnoreCase("SYSTEM");
Following diff 5:
-r.advance();
-t.dataBuffer.append(c);
+r.matches('-');
Following diff 5:
-r.advance();
-t.dataBuffer.append(c);
+r.matchConsume("--");
Following diff 5:
-r.advance();
-t.dataBuffer.append(c);
+r.matches('>');
Following diff 5:
-r.advance();
-t.dataBuffer.append(c);
+r.matches('/');
Following diff 5:
-r.advance();
-t.dataBuffer.append(c);
+r.current();
Following diff 5:
-r.advance();
-t.dataBuffer.append(c);
+t.isAppropriateEndTagToken();
Following diff 5:
-r.advance();
-t.dataBuffer.append(c);
+r.matchConsumeIgnoreCase("PUBLIC");
Following diff 5:
-r.advance();
-t.dataBuffer.append(c);
+r.matchConsumeIgnoreCase("DOCTYPE");
Following diff 5:
-r.advance();
-t.dataBuffer.append(c);
+t.transition(RawtextEndTagName);
Following diff 5:
-r.advance();
-t.dataBuffer.append(c);
+r.matchesAny('\t','\n','\f','');
Following diff 5:
-r.advance();
-t.dataBuffer.append(c);
+r.isEmpty();
Following diff 5:
-r.advance();
-t.dataBuffer.append(c);
+r.containsIgnoreCase("</"+t.appropriateEndTagName());
Following diff 5:
-r.advance();
-t.dataBuffer.append(c);
+t.transition(ScriptDataEndTagName);
Following diff 5:
-r.advance();
-t.dataBuffer.append(c);
+t.appropriateEndTagName();
Following diff 5:
-r.advance();
-t.dataBuffer.append(c);
+t.createDoctypePending();
Following diff 5:
-r.advance();
-t.dataBuffer.append(c);
+r.matchesLetter();
Following diff 5:
-r.advance();
-t.dataBuffer.append(c);
+t.createCommentPending();
Following diff 5:
-r.advance();
-t.dataBuffer.append(c);
+t.error(this);
Following diff 5:
-r.advance();
-t.dataBuffer.append(c);
+t.currentNodeInHtmlNS();
Following diff 5:
-r.advance();
-t.dataBuffer.append(c);
+t.eofError(this);
Following diff 5:
-r.advance();
-t.dataBuffer.append(c);
+name.toLowerCase();
Following diff 5:
-r.advance();
-t.dataBuffer.append(c);
+t.getState();
Following diff 5:
-r.advance();
-t.dataBuffer.append(c);
+t.acknowledgeSelfClosingFlag();
Following diff 5:
-r.advance();
-t.dataBuffer.append(c);
+t.error(BeforeAttributeName);
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
Following diff 6:
-t.tagPending.appendTagName(name.toLowerCase());
-r.advance();
Following diff 6:
-r.advance();
-if(t.isAppropriateEndTagToken()&&!r.isEmpty()){
-charc=r.consume();
-switch(c){
-case'\t':
-case'\n':
-case'\f':
-case'':
-t.transition(BeforeAttributeName);
-break;
-case'/':
-t.transition(SelfClosingStartTag);
-break;
-case'>':
-t.emitTagPending();
-t.transition(Data);
-break;
-default:
-t.dataBuffer.append(c);
-anythingElse(t,r);
-break;
-}
-}
Following diff 6:
-r.advance();
-return;
Following diff 6:
-r.advance();
-case'\t':
Following diff 6:
-r.advance();
-switch(c){
-case'\t':
-case'\n':
-case'\f':
-case'':
-t.transition(BeforeAttributeName);
-break;
-case'/':
-t.transition(SelfClosingStartTag);
-break;
-case'>':
-t.emitTagPending();
-t.transition(Data);
-break;
-default:
-t.dataBuffer.append(c);
-anythingElse(t,r);
-break;
-}
Following diff 6:
-r.advance();
-case'\n':
Following diff 6:
-r.advance();
-case'\f':
Following diff 6:
-r.advance();
-t.transition(BeforeAttributeName);
Following diff 6:
-r.advance();
-case'':
Following diff 6:
-r.advance();
-break;
Following diff 6:
-r.advance();
-break;
Following diff 6:
-r.advance();
-t.transition(SelfClosingStartTag);
Following diff 6:
-r.advance();
-t.transition(Data);
Following diff 6:
-r.advance();
-t.emitTagPending();
Following diff 6:
-r.advance();
-break;
Following diff 6:
-r.advance();
-t.dataBuffer.append(c);
Following diff 6:
-r.advance();
-anythingElse(t,r);
Following diff 6:
-r.advance();
-break;
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-switch(c){
-case'\t':
-case'\n':
-case'\f':
-case'':
-t.transition(BeforeAttributeName);
-break;
-case'/':
-t.transition(SelfClosingStartTag);
-break;
-case'>':
-t.emitTagPending();
-t.transition(Data);
-break;
-default:
-t.dataBuffer.append(c);
-anythingElse(t,r);
-break;
-}
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(BeforeAttributeName);
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(SelfClosingStartTag);
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.emitTagPending();
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(Data);
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.dataBuffer.append(c);
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-anythingElse(t,r);
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
Following diff 6:
-r.advance();
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-switch(c){
-case'\t':
-case'\n':
-case'\f':
-case'':
-t.transition(BeforeAttributeName);
-break;
-case'/':
-t.transition(SelfClosingStartTag);
-break;
-case'>':
-t.emitTagPending();
-t.transition(Data);
-break;
-default:
-t.dataBuffer.append(c);
-anythingElse(t,r);
-break;
-}
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(BeforeAttributeName);
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(SelfClosingStartTag);
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.emitTagPending();
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(Data);
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.dataBuffer.append(c);
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-anythingElse(t,r);
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-charc=r.consume();
-switch(c){
-case'\t':
-case'\n':
-case'\f':
-case'':
-t.transition(BeforeAttributeName);
-break;
-case'/':
-t.transition(SelfClosingStartTag);
-break;
-case'>':
-t.emitTagPending();
-t.transition(Data);
-break;
-default:
-t.dataBuffer.append(c);
-anythingElse(t,r);
-break;
-}
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-case'\n':
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-case'':
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-case'\f':
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-t.emitTagPending();
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-t.transition(BeforeAttributeName);
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-t.transition(SelfClosingStartTag);
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-break;
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-t.transition(Data);
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-break;
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-break;
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-t.dataBuffer.append(c);
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-anythingElse(t,r);
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-break;
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-case'\f':
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-case'':
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-break;
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-t.transition(BeforeAttributeName);
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-t.transition(SelfClosingStartTag);
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-break;
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-t.emitTagPending();
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-t.transition(Data);
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-break;
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-t.dataBuffer.append(c);
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-anythingElse(t,r);
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-break;
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
-case'':
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
-break;
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
-t.transition(BeforeAttributeName);
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
-t.transition(SelfClosingStartTag);
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
-break;
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
-t.emitTagPending();
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
-t.dataBuffer.append(c);
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
-t.transition(Data);
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
-break;
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
-anythingElse(t,r);
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
-break;
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
-t.transition(BeforeAttributeName);
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
-break;
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
-t.transition(SelfClosingStartTag);
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
-break;
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
-t.emitTagPending();
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
-t.transition(Data);
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
-break;
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
-t.dataBuffer.append(c);
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.dataBuffer.append(c);
-break;
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-anythingElse(t,r);
-break;
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
-anythingElse(t,r);
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(BeforeAttributeName);
-t.emitTagPending();
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(BeforeAttributeName);
-t.transition(Data);
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.dataBuffer.append(c);
-anythingElse(t,r);
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(BeforeAttributeName);
-break;
Following diff 6:
-t.tagPending.appendTagName(name.toLowerCase());
-r.advance();
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(BeforeAttributeName);
-t.dataBuffer.append(c);
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(BeforeAttributeName);
-anythingElse(t,r);
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(BeforeAttributeName);
-break;
Following diff 6:
-r.advance();
-return;
Following diff 6:
-r.advance();
-if(t.isAppropriateEndTagToken()&&!r.isEmpty()){
-charc=r.consume();
-switch(c){
-case'\t':
-case'\n':
-case'\f':
-case'':
-t.transition(BeforeAttributeName);
-break;
-case'/':
-t.transition(SelfClosingStartTag);
-break;
-case'>':
-t.emitTagPending();
-t.transition(Data);
-break;
-default:
-t.dataBuffer.append(c);
-anythingElse(t,r);
-break;
-}
-}
Following diff 6:
-r.advance();
-case'\t':
Following diff 6:
-r.advance();
-switch(c){
-case'\t':
-case'\n':
-case'\f':
-case'':
-t.transition(BeforeAttributeName);
-break;
-case'/':
-t.transition(SelfClosingStartTag);
-break;
-case'>':
-t.emitTagPending();
-t.transition(Data);
-break;
-default:
-t.dataBuffer.append(c);
-anythingElse(t,r);
-break;
-}
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-case'/':
Following diff 6:
-r.advance();
-case'\n':
Following diff 6:
-r.advance();
-case'\f':
Following diff 6:
-r.advance();
-t.transition(BeforeAttributeName);
Following diff 6:
-r.advance();
-break;
Following diff 6:
-r.advance();
-case'':
Following diff 6:
-r.advance();
-t.transition(SelfClosingStartTag);
Following diff 6:
-r.advance();
-break;
Following diff 6:
-r.advance();
-t.emitTagPending();
Following diff 6:
-r.advance();
-t.transition(Data);
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
-break;
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-t.transition(SelfClosingStartTag);
Following diff 6:
-r.advance();
-break;
Following diff 6:
-r.advance();
-t.dataBuffer.append(c);
Following diff 6:
-r.advance();
-anythingElse(t,r);
Following diff 6:
-r.advance();
-break;
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-break;
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-t.emitTagPending();
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-t.transition(Data);
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-break;
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-anythingElse(t,r);
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-t.dataBuffer.append(c);
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-break;
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(SelfClosingStartTag);
-break;
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(SelfClosingStartTag);
-t.emitTagPending();
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(SelfClosingStartTag);
-t.transition(Data);
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(SelfClosingStartTag);
-break;
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(BeforeAttributeName);
-break;
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(SelfClosingStartTag);
-t.dataBuffer.append(c);
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(SelfClosingStartTag);
-anythingElse(t,r);
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(SelfClosingStartTag);
-break;
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-case'>':
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-t.emitTagPending();
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-t.transition(Data);
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-break;
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-anythingElse(t,r);
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-t.dataBuffer.append(c);
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-break;
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(BeforeAttributeName);
-t.transition(SelfClosingStartTag);
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.emitTagPending();
-t.transition(Data);
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.emitTagPending();
-break;
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.emitTagPending();
-t.dataBuffer.append(c);
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.emitTagPending();
-anythingElse(t,r);
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.emitTagPending();
-break;
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(BeforeAttributeName);
-break;
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(Data);
-break;
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(Data);
-t.dataBuffer.append(c);
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(Data);
-anythingElse(t,r);
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(Data);
-break;
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-default:
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-t.dataBuffer.append(c);
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-anythingElse(t,r);
Following diff 6:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-break;
Following diff 8:
+r.unconsume();
Following diff 9:
-t.tagPending.appendTagName(name.toLowerCase());
-r.advance();
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
Following diff 9:
-r.advance();
-return;
Following diff 9:
-r.advance();
-if(t.isAppropriateEndTagToken()&&!r.isEmpty()){
-charc=r.consume();
-switch(c){
-case'\t':
-case'\n':
-case'\f':
-case'':
-t.transition(BeforeAttributeName);
-break;
-case'/':
-t.transition(SelfClosingStartTag);
-break;
-case'>':
-t.emitTagPending();
-t.transition(Data);
-break;
-default:
-t.dataBuffer.append(c);
-anythingElse(t,r);
-break;
-}
-}
Following diff 9:
-r.advance();
-switch(c){
-case'\t':
-case'\n':
-case'\f':
-case'':
-t.transition(BeforeAttributeName);
-break;
-case'/':
-t.transition(SelfClosingStartTag);
-break;
-case'>':
-t.emitTagPending();
-t.transition(Data);
-break;
-default:
-t.dataBuffer.append(c);
-anythingElse(t,r);
-break;
-}
Following diff 9:
-r.advance();
-case'\t':
Following diff 9:
-r.advance();
-case'\n':
Following diff 9:
-r.advance();
-case'\f':
Following diff 9:
-r.advance();
-case'':
Following diff 9:
-r.advance();
-break;
Following diff 9:
-r.advance();
-t.transition(SelfClosingStartTag);
Following diff 9:
-r.advance();
-t.transition(BeforeAttributeName);
Following diff 9:
-r.advance();
-break;
Following diff 9:
-r.advance();
-t.emitTagPending();
Following diff 9:
-r.advance();
-break;
Following diff 9:
-r.advance();
-t.transition(Data);
Following diff 9:
-r.advance();
-t.dataBuffer.append(c);
Following diff 9:
-r.advance();
-anythingElse(t,r);
Following diff 9:
-r.advance();
-break;
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-switch(c){
-case'\t':
-case'\n':
-case'\f':
-case'':
-t.transition(BeforeAttributeName);
-break;
-case'/':
-t.transition(SelfClosingStartTag);
-break;
-case'>':
-t.emitTagPending();
-t.transition(Data);
-break;
-default:
-t.dataBuffer.append(c);
-anythingElse(t,r);
-break;
-}
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(BeforeAttributeName);
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(SelfClosingStartTag);
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.emitTagPending();
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(Data);
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.dataBuffer.append(c);
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-anythingElse(t,r);
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
Following diff 9:
-r.advance();
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-switch(c){
-case'\t':
-case'\n':
-case'\f':
-case'':
-t.transition(BeforeAttributeName);
-break;
-case'/':
-t.transition(SelfClosingStartTag);
-break;
-case'>':
-t.emitTagPending();
-t.transition(Data);
-break;
-default:
-t.dataBuffer.append(c);
-anythingElse(t,r);
-break;
-}
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(BeforeAttributeName);
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(SelfClosingStartTag);
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.emitTagPending();
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(Data);
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.dataBuffer.append(c);
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-anythingElse(t,r);
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-charc=r.consume();
-switch(c){
-case'\t':
-case'\n':
-case'\f':
-case'':
-t.transition(BeforeAttributeName);
-break;
-case'/':
-t.transition(SelfClosingStartTag);
-break;
-case'>':
-t.emitTagPending();
-t.transition(Data);
-break;
-default:
-t.dataBuffer.append(c);
-anythingElse(t,r);
-break;
-}
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-case'\n':
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-case'\f':
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-t.transition(BeforeAttributeName);
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-break;
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-break;
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-case'':
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-t.transition(SelfClosingStartTag);
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-t.emitTagPending();
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-t.transition(Data);
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-break;
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-t.dataBuffer.append(c);
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-anythingElse(t,r);
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-break;
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-case'\f':
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-case'':
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-t.transition(BeforeAttributeName);
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-break;
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-t.emitTagPending();
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-break;
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-t.transition(SelfClosingStartTag);
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-t.transition(Data);
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-break;
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-t.dataBuffer.append(c);
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-anythingElse(t,r);
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-break;
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
-case'':
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
-t.transition(BeforeAttributeName);
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
-break;
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
-t.transition(SelfClosingStartTag);
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
-break;
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
-t.emitTagPending();
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
-break;
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
-t.transition(Data);
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
-t.dataBuffer.append(c);
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
-anythingElse(t,r);
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
-break;
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
-t.transition(BeforeAttributeName);
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
-break;
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
-t.transition(SelfClosingStartTag);
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
-break;
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
-t.emitTagPending();
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
-t.transition(Data);
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
-break;
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(BeforeAttributeName);
-t.transition(Data);
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
-t.dataBuffer.append(c);
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-anythingElse(t,r);
-break;
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(BeforeAttributeName);
-t.emitTagPending();
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
-anythingElse(t,r);
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.dataBuffer.append(c);
-anythingElse(t,r);
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.dataBuffer.append(c);
-break;
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(BeforeAttributeName);
-break;
Following diff 9:
-t.tagPending.appendTagName(name.toLowerCase());
-r.advance();
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(BeforeAttributeName);
-t.dataBuffer.append(c);
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(BeforeAttributeName);
-anythingElse(t,r);
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(BeforeAttributeName);
-break;
Following diff 9:
-r.advance();
-return;
Following diff 9:
-r.advance();
-if(t.isAppropriateEndTagToken()&&!r.isEmpty()){
-charc=r.consume();
-switch(c){
-case'\t':
-case'\n':
-case'\f':
-case'':
-t.transition(BeforeAttributeName);
-break;
-case'/':
-t.transition(SelfClosingStartTag);
-break;
-case'>':
-t.emitTagPending();
-t.transition(Data);
-break;
-default:
-t.dataBuffer.append(c);
-anythingElse(t,r);
-break;
-}
-}
Following diff 9:
-r.advance();
-switch(c){
-case'\t':
-case'\n':
-case'\f':
-case'':
-t.transition(BeforeAttributeName);
-break;
-case'/':
-t.transition(SelfClosingStartTag);
-break;
-case'>':
-t.emitTagPending();
-t.transition(Data);
-break;
-default:
-t.dataBuffer.append(c);
-anythingElse(t,r);
-break;
-}
Following diff 9:
-r.advance();
-case'\n':
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-case'/':
Following diff 9:
-r.advance();
-case'\f':
Following diff 9:
-r.advance();
-case'\t':
Following diff 9:
-r.advance();
-break;
Following diff 9:
-r.advance();
-case'':
Following diff 9:
-r.advance();
-t.transition(BeforeAttributeName);
Following diff 9:
-r.advance();
-t.transition(SelfClosingStartTag);
Following diff 9:
-r.advance();
-break;
Following diff 9:
-r.advance();
-t.emitTagPending();
Following diff 9:
-r.advance();
-t.transition(Data);
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
-break;
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-t.transition(SelfClosingStartTag);
Following diff 9:
-r.advance();
-break;
Following diff 9:
-r.advance();
-t.dataBuffer.append(c);
Following diff 9:
-r.advance();
-anythingElse(t,r);
Following diff 9:
-r.advance();
-break;
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-break;
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-t.emitTagPending();
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-t.transition(Data);
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-break;
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-t.dataBuffer.append(c);
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-anythingElse(t,r);
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-break;
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(SelfClosingStartTag);
-break;
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(SelfClosingStartTag);
-t.emitTagPending();
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(SelfClosingStartTag);
-t.transition(Data);
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(BeforeAttributeName);
-break;
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(SelfClosingStartTag);
-break;
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(SelfClosingStartTag);
-t.dataBuffer.append(c);
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(SelfClosingStartTag);
-anythingElse(t,r);
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(SelfClosingStartTag);
-break;
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-case'>':
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-t.emitTagPending();
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-t.transition(Data);
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-break;
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-t.dataBuffer.append(c);
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-anythingElse(t,r);
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-break;
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(BeforeAttributeName);
-t.transition(SelfClosingStartTag);
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.emitTagPending();
-t.transition(Data);
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.emitTagPending();
-break;
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.emitTagPending();
-t.dataBuffer.append(c);
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.emitTagPending();
-break;
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.emitTagPending();
-anythingElse(t,r);
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(BeforeAttributeName);
-break;
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(Data);
-break;
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(Data);
-t.dataBuffer.append(c);
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(Data);
-anythingElse(t,r);
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(Data);
-break;
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-default:
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-anythingElse(t,r);
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-t.dataBuffer.append(c);
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-break;
Following diff 9:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-switch(c){
-case'\t':
-case'\n':
-case'\f':
-case'':
-t.transition(BeforeAttributeName);
-break;
-case'/':
-t.transition(SelfClosingStartTag);
-break;
-case'>':
-t.emitTagPending();
-t.transition(Data);
-break;
-default:
-t.dataBuffer.append(c);
-anythingElse(t,r);
-break;
-}
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
Following diff 10:
-r.advance();
-switch(c){
-case'\t':
-case'\n':
-case'\f':
-case'':
-t.transition(BeforeAttributeName);
-break;
-case'/':
-t.transition(SelfClosingStartTag);
-break;
-case'>':
-t.emitTagPending();
-t.transition(Data);
-break;
-default:
-t.dataBuffer.append(c);
-anythingElse(t,r);
-break;
-}
Following diff 10:
-r.advance();
-case'\f':
Following diff 10:
-r.advance();
-case'\n':
Following diff 10:
-r.advance();
-return;
Following diff 10:
-r.advance();
-case'\t':
Following diff 10:
-r.advance();
-break;
Following diff 10:
-r.advance();
-if(t.isAppropriateEndTagToken()&&!r.isEmpty()){
-charc=r.consume();
-switch(c){
-case'\t':
-case'\n':
-case'\f':
-case'':
-t.transition(BeforeAttributeName);
-break;
-case'/':
-t.transition(SelfClosingStartTag);
-break;
-case'>':
-t.emitTagPending();
-t.transition(Data);
-break;
-default:
-t.dataBuffer.append(c);
-anythingElse(t,r);
-break;
-}
-}
Following diff 10:
-r.advance();
-case'':
Following diff 10:
-r.advance();
-t.transition(BeforeAttributeName);
Following diff 10:
-r.advance();
-t.transition(SelfClosingStartTag);
Following diff 10:
-r.advance();
-break;
Following diff 10:
-r.advance();
-t.emitTagPending();
Following diff 10:
-r.advance();
-t.transition(Data);
Following diff 10:
-r.advance();
-t.dataBuffer.append(c);
Following diff 10:
-r.advance();
-break;
Following diff 10:
-r.advance();
-anythingElse(t,r);
Following diff 10:
-r.advance();
-break;
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-switch(c){
-case'\t':
-case'\n':
-case'\f':
-case'':
-t.transition(BeforeAttributeName);
-break;
-case'/':
-t.transition(SelfClosingStartTag);
-break;
-case'>':
-t.emitTagPending();
-t.transition(Data);
-break;
-default:
-t.dataBuffer.append(c);
-anythingElse(t,r);
-break;
-}
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(BeforeAttributeName);
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(SelfClosingStartTag);
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
Following diff 10:
-r.advance();
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.emitTagPending();
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(Data);
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.dataBuffer.append(c);
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-anythingElse(t,r);
Following diff 10:
-t.tagPending.appendTagName(name.toLowerCase());
-r.advance();
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-charc=r.consume();
-switch(c){
-case'\t':
-case'\n':
-case'\f':
-case'':
-t.transition(BeforeAttributeName);
-break;
-case'/':
-t.transition(SelfClosingStartTag);
-break;
-case'>':
-t.emitTagPending();
-t.transition(Data);
-break;
-default:
-t.dataBuffer.append(c);
-anythingElse(t,r);
-break;
-}
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-case'\n':
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-case'':
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-case'\f':
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-t.transition(SelfClosingStartTag);
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-t.transition(BeforeAttributeName);
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-break;
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-break;
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-t.emitTagPending();
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-t.transition(Data);
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-break;
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-t.dataBuffer.append(c);
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-anythingElse(t,r);
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-break;
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-case'':
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-case'\f':
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-t.transition(BeforeAttributeName);
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-break;
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-break;
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-t.emitTagPending();
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-t.transition(SelfClosingStartTag);
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-break;
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-t.transition(Data);
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-t.dataBuffer.append(c);
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-anythingElse(t,r);
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-break;
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
-t.transition(BeforeAttributeName);
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
-case'':
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
-break;
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
-break;
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
-t.transition(SelfClosingStartTag);
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
-t.emitTagPending();
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
-t.transition(Data);
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
-break;
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
-t.dataBuffer.append(c);
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
-anythingElse(t,r);
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
-break;
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
-t.transition(BeforeAttributeName);
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
-break;
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
-break;
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
-t.emitTagPending();
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
-t.transition(SelfClosingStartTag);
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
-t.transition(Data);
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
-break;
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
-t.dataBuffer.append(c);
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
-anythingElse(t,r);
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
-break;
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(BeforeAttributeName);
-break;
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(BeforeAttributeName);
-t.transition(SelfClosingStartTag);
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(BeforeAttributeName);
-break;
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(BeforeAttributeName);
-t.emitTagPending();
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(BeforeAttributeName);
-break;
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(BeforeAttributeName);
-t.transition(Data);
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(BeforeAttributeName);
-break;
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(BeforeAttributeName);
-anythingElse(t,r);
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(BeforeAttributeName);
-t.dataBuffer.append(c);
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-case'/':
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-t.transition(SelfClosingStartTag);
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-break;
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-t.transition(Data);
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-t.emitTagPending();
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-break;
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-t.dataBuffer.append(c);
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-anythingElse(t,r);
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-break;
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(SelfClosingStartTag);
-t.emitTagPending();
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(SelfClosingStartTag);
-break;
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(SelfClosingStartTag);
-break;
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(SelfClosingStartTag);
-t.transition(Data);
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(SelfClosingStartTag);
-t.dataBuffer.append(c);
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(SelfClosingStartTag);
-anythingElse(t,r);
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-anythingElse(t,r);
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(SelfClosingStartTag);
-break;
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-break;
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.emitTagPending();
-t.transition(Data);
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.emitTagPending();
-break;
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.emitTagPending();
-t.dataBuffer.append(c);
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.emitTagPending();
-anythingElse(t,r);
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.emitTagPending();
-break;
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(Data);
-break;
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(Data);
-break;
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(Data);
-anythingElse(t,r);
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(Data);
-t.dataBuffer.append(c);
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-default:
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-anythingElse(t,r);
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-case'>':
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-t.dataBuffer.append(c);
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-break;
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.dataBuffer.append(c);
-anythingElse(t,r);
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-t.emitTagPending();
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-anythingElse(t,r);
-break;
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.dataBuffer.append(c);
-break;
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-t.transition(Data);
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-break;
Following diff 10:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-t.dataBuffer.append(c);
Following diff 10:
-t.tagPending.appendTagName(name.toLowerCase());
-r.advance();
-return;
Following diff 10:
-t.tagPending.appendTagName(name.toLowerCase());
-r.advance();
-if(t.isAppropriateEndTagToken()&&!r.isEmpty()){
-charc=r.consume();
-switch(c){
-case'\t':
-case'\n':
-case'\f':
-case'':
-t.transition(BeforeAttributeName);
-break;
-case'/':
-t.transition(SelfClosingStartTag);
-break;
-case'>':
-t.emitTagPending();
-t.transition(Data);
-break;
-default:
-t.dataBuffer.append(c);
-anythingElse(t,r);
-break;
-}
-}
Following diff 10:
-t.tagPending.appendTagName(name.toLowerCase());
-r.advance();
-switch(c){
-case'\t':
-case'\n':
-case'\f':
-case'':
-t.transition(BeforeAttributeName);
-break;
-case'/':
-t.transition(SelfClosingStartTag);
-break;
-case'>':
-t.emitTagPending();
-t.transition(Data);
-break;
-default:
-t.dataBuffer.append(c);
-anythingElse(t,r);
-break;
-}
Following diff 10:
-t.tagPending.appendTagName(name.toLowerCase());
-r.advance();
-case'\f':
Following diff 10:
-t.tagPending.appendTagName(name.toLowerCase());
-r.advance();
-case'\n':
Following diff 10:
-t.tagPending.appendTagName(name.toLowerCase());
-r.advance();
-case'\t':
Following diff 10:
-t.tagPending.appendTagName(name.toLowerCase());
-r.advance();
-case'':
Following diff 10:
-t.tagPending.appendTagName(name.toLowerCase());
-r.advance();
-t.transition(BeforeAttributeName);
Following diff 10:
-t.tagPending.appendTagName(name.toLowerCase());
-r.advance();
-t.transition(Data);
Following diff 10:
-t.tagPending.appendTagName(name.toLowerCase());
-r.advance();
-break;
Following diff 10:
-t.tagPending.appendTagName(name.toLowerCase());
-r.advance();
-break;
Following diff 10:
-t.tagPending.appendTagName(name.toLowerCase());
-r.advance();
-t.emitTagPending();
Following diff 10:
-t.tagPending.appendTagName(name.toLowerCase());
-r.advance();
-t.transition(SelfClosingStartTag);
Following diff 10:
-t.tagPending.appendTagName(name.toLowerCase());
-r.advance();
-break;
Following diff 10:
-t.tagPending.appendTagName(name.toLowerCase());
-r.advance();
-t.dataBuffer.append(c);
Following diff 10:
-t.tagPending.appendTagName(name.toLowerCase());
-r.advance();
-anythingElse(t,r);
Following diff 10:
-t.tagPending.appendTagName(name.toLowerCase());
-r.advance();
-break;
Following diff 12:
-t.dataBuffer.append(c);
+r.unconsume();
+t.emit('<');
+t.emit(c);
Following diff 12:
+r.unconsume();
+t.emit(c);
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
Following diff 13:
-r.advance();
-return;
Following diff 13:
-r.advance();
-if(t.isAppropriateEndTagToken()&&!r.isEmpty()){
-charc=r.consume();
-switch(c){
-case'\t':
-case'\n':
-case'\f':
-case'':
-t.transition(BeforeAttributeName);
-break;
-case'/':
-t.transition(SelfClosingStartTag);
-break;
-case'>':
-t.emitTagPending();
-t.transition(Data);
-break;
-default:
-t.dataBuffer.append(c);
-anythingElse(t,r);
-break;
-}
-}
Following diff 13:
-r.advance();
-case'\t':
Following diff 13:
-r.advance();
-switch(c){
-case'\t':
-case'\n':
-case'\f':
-case'':
-t.transition(BeforeAttributeName);
-break;
-case'/':
-t.transition(SelfClosingStartTag);
-break;
-case'>':
-t.emitTagPending();
-t.transition(Data);
-break;
-default:
-t.dataBuffer.append(c);
-anythingElse(t,r);
-break;
-}
Following diff 13:
-r.advance();
-case'\n':
Following diff 13:
-r.advance();
-break;
Following diff 13:
-r.advance();
-case'\f':
Following diff 13:
-r.advance();
-t.transition(BeforeAttributeName);
Following diff 13:
-r.advance();
-t.transition(Data);
Following diff 13:
-r.advance();
-break;
Following diff 13:
-r.advance();
-t.transition(SelfClosingStartTag);
Following diff 13:
-r.advance();
-case'':
Following diff 13:
-r.advance();
-t.emitTagPending();
Following diff 13:
-r.advance();
-break;
Following diff 13:
-r.advance();
-t.dataBuffer.append(c);
Following diff 13:
-r.advance();
-anythingElse(t,r);
Following diff 13:
-r.advance();
-break;
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-switch(c){
-case'\t':
-case'\n':
-case'\f':
-case'':
-t.transition(BeforeAttributeName);
-break;
-case'/':
-t.transition(SelfClosingStartTag);
-break;
-case'>':
-t.emitTagPending();
-t.transition(Data);
-break;
-default:
-t.dataBuffer.append(c);
-anythingElse(t,r);
-break;
-}
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(BeforeAttributeName);
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(SelfClosingStartTag);
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(Data);
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.emitTagPending();
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.dataBuffer.append(c);
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-anythingElse(t,r);
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
Following diff 13:
-r.advance();
Following diff 13:
-t.tagPending.appendTagName(name.toLowerCase());
-r.advance();
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-switch(c){
-case'\t':
-case'\n':
-case'\f':
-case'':
-t.transition(BeforeAttributeName);
-break;
-case'/':
-t.transition(SelfClosingStartTag);
-break;
-case'>':
-t.emitTagPending();
-t.transition(Data);
-break;
-default:
-t.dataBuffer.append(c);
-anythingElse(t,r);
-break;
-}
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(BeforeAttributeName);
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(SelfClosingStartTag);
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.emitTagPending();
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(Data);
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.dataBuffer.append(c);
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-anythingElse(t,r);
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-charc=r.consume();
-switch(c){
-case'\t':
-case'\n':
-case'\f':
-case'':
-t.transition(BeforeAttributeName);
-break;
-case'/':
-t.transition(SelfClosingStartTag);
-break;
-case'>':
-t.emitTagPending();
-t.transition(Data);
-break;
-default:
-t.dataBuffer.append(c);
-anythingElse(t,r);
-break;
-}
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-break;
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-case'\f':
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-case'':
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-case'\n':
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-t.transition(BeforeAttributeName);
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-break;
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-t.transition(SelfClosingStartTag);
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-t.emitTagPending();
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-t.transition(Data);
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-break;
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-t.dataBuffer.append(c);
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-anythingElse(t,r);
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-break;
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-case'\f':
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-t.transition(SelfClosingStartTag);
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-case'':
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-break;
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-t.transition(BeforeAttributeName);
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-break;
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-break;
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-t.emitTagPending();
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-t.transition(Data);
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-t.dataBuffer.append(c);
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-anythingElse(t,r);
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-break;
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
-case'':
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
-t.transition(BeforeAttributeName);
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
-break;
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
-break;
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
-t.transition(SelfClosingStartTag);
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
-t.emitTagPending();
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
-t.transition(Data);
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
-break;
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
-t.dataBuffer.append(c);
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
-anythingElse(t,r);
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
-break;
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
-t.transition(BeforeAttributeName);
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
-break;
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
-t.transition(SelfClosingStartTag);
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
-break;
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
-t.emitTagPending();
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
-t.transition(Data);
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
-break;
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
-anythingElse(t,r);
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
-t.dataBuffer.append(c);
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.dataBuffer.append(c);
-anythingElse(t,r);
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-anythingElse(t,r);
-break;
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(BeforeAttributeName);
-t.transition(Data);
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(BeforeAttributeName);
-t.emitTagPending();
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.dataBuffer.append(c);
-break;
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(BeforeAttributeName);
-break;
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(BeforeAttributeName);
-t.dataBuffer.append(c);
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(BeforeAttributeName);
-anythingElse(t,r);
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(BeforeAttributeName);
-break;
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-case'/':
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
-break;
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-t.transition(SelfClosingStartTag);
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-break;
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-t.emitTagPending();
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-t.transition(Data);
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-break;
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-t.dataBuffer.append(c);
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-anythingElse(t,r);
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-break;
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(SelfClosingStartTag);
-break;
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(SelfClosingStartTag);
-t.emitTagPending();
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(SelfClosingStartTag);
-t.transition(Data);
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(BeforeAttributeName);
-break;
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(SelfClosingStartTag);
-anythingElse(t,r);
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(SelfClosingStartTag);
-break;
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(SelfClosingStartTag);
-t.dataBuffer.append(c);
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(SelfClosingStartTag);
-break;
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-case'>':
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-t.emitTagPending();
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-t.transition(Data);
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-break;
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-t.dataBuffer.append(c);
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-anythingElse(t,r);
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-break;
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(BeforeAttributeName);
-t.transition(SelfClosingStartTag);
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.emitTagPending();
-t.transition(Data);
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.emitTagPending();
-break;
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.emitTagPending();
-anythingElse(t,r);
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.emitTagPending();
-t.dataBuffer.append(c);
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.emitTagPending();
-break;
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(BeforeAttributeName);
-break;
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(Data);
-break;
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(Data);
-t.dataBuffer.append(c);
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(Data);
-break;
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(Data);
-anythingElse(t,r);
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-default:
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-t.dataBuffer.append(c);
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-anythingElse(t,r);
Following diff 13:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-break;
Following diff 13:
-t.tagPending.appendTagName(name.toLowerCase());
-r.advance();
Following diff 13:
-t.tagPending.appendTagName(name.toLowerCase());
-r.advance();
-return;
Following diff 13:
-t.tagPending.appendTagName(name.toLowerCase());
-r.advance();
-case'\t':
Following diff 13:
-t.tagPending.appendTagName(name.toLowerCase());
-r.advance();
-switch(c){
-case'\t':
-case'\n':
-case'\f':
-case'':
-t.transition(BeforeAttributeName);
-break;
-case'/':
-t.transition(SelfClosingStartTag);
-break;
-case'>':
-t.emitTagPending();
-t.transition(Data);
-break;
-default:
-t.dataBuffer.append(c);
-anythingElse(t,r);
-break;
-}
Following diff 13:
-t.tagPending.appendTagName(name.toLowerCase());
-r.advance();
-if(t.isAppropriateEndTagToken()&&!r.isEmpty()){
-charc=r.consume();
-switch(c){
-case'\t':
-case'\n':
-case'\f':
-case'':
-t.transition(BeforeAttributeName);
-break;
-case'/':
-t.transition(SelfClosingStartTag);
-break;
-case'>':
-t.emitTagPending();
-t.transition(Data);
-break;
-default:
-t.dataBuffer.append(c);
-anythingElse(t,r);
-break;
-}
-}
Following diff 13:
-t.tagPending.appendTagName(name.toLowerCase());
-r.advance();
-case'\n':
Following diff 13:
-t.tagPending.appendTagName(name.toLowerCase());
-r.advance();
-case'\f':
Following diff 13:
-t.tagPending.appendTagName(name.toLowerCase());
-r.advance();
-case'':
Following diff 13:
-t.tagPending.appendTagName(name.toLowerCase());
-r.advance();
-t.transition(BeforeAttributeName);
Following diff 13:
-t.tagPending.appendTagName(name.toLowerCase());
-r.advance();
-break;
Following diff 13:
-t.tagPending.appendTagName(name.toLowerCase());
-r.advance();
-t.transition(SelfClosingStartTag);
Following diff 13:
-t.tagPending.appendTagName(name.toLowerCase());
-r.advance();
-break;
Following diff 13:
-t.tagPending.appendTagName(name.toLowerCase());
-r.advance();
-t.emitTagPending();
Following diff 13:
-t.tagPending.appendTagName(name.toLowerCase());
-r.advance();
-t.transition(Data);
Following diff 13:
-t.tagPending.appendTagName(name.toLowerCase());
-r.advance();
-break;
Following diff 13:
-t.tagPending.appendTagName(name.toLowerCase());
-r.advance();
-t.dataBuffer.append(c);
Following diff 13:
-t.tagPending.appendTagName(name.toLowerCase());
-r.advance();
-anythingElse(t,r);
Following diff 13:
-t.tagPending.appendTagName(name.toLowerCase());
-r.advance();
-break;
Following diff 14:
+r.unconsume();
+t.emit("&gt;");
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
Following diff 16:
-t.tagPending.appendTagName(name.toLowerCase());
-r.advance();
Following diff 16:
-r.advance();
-switch(c){
-case'\t':
-case'\n':
-case'\f':
-case'':
-t.transition(BeforeAttributeName);
-break;
-case'/':
-t.transition(SelfClosingStartTag);
-break;
-case'>':
-t.emitTagPending();
-t.transition(Data);
-break;
-default:
-t.dataBuffer.append(c);
-anythingElse(t,r);
-break;
-}
Following diff 16:
-r.advance();
-if(t.isAppropriateEndTagToken()&&!r.isEmpty()){
-charc=r.consume();
-switch(c){
-case'\t':
-case'\n':
-case'\f':
-case'':
-t.transition(BeforeAttributeName);
-break;
-case'/':
-t.transition(SelfClosingStartTag);
-break;
-case'>':
-t.emitTagPending();
-t.transition(Data);
-break;
-default:
-t.dataBuffer.append(c);
-anythingElse(t,r);
-break;
-}
-}
Following diff 16:
-r.advance();
-return;
Following diff 16:
-r.advance();
-case'\t':
Following diff 16:
-r.advance();
-case'\n':
Following diff 16:
-r.advance();
-case'\f':
Following diff 16:
-r.advance();
-case'':
Following diff 16:
-r.advance();
-t.transition(BeforeAttributeName);
Following diff 16:
-r.advance();
-break;
Following diff 16:
-r.advance();
-t.emitTagPending();
Following diff 16:
-r.advance();
-break;
Following diff 16:
-r.advance();
-t.transition(SelfClosingStartTag);
Following diff 16:
-r.advance();
-t.transition(Data);
Following diff 16:
-r.advance();
-break;
Following diff 16:
-r.advance();
-t.dataBuffer.append(c);
Following diff 16:
-r.advance();
-anythingElse(t,r);
Following diff 16:
-r.advance();
-break;
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-switch(c){
-case'\t':
-case'\n':
-case'\f':
-case'':
-t.transition(BeforeAttributeName);
-break;
-case'/':
-t.transition(SelfClosingStartTag);
-break;
-case'>':
-t.emitTagPending();
-t.transition(Data);
-break;
-default:
-t.dataBuffer.append(c);
-anythingElse(t,r);
-break;
-}
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(BeforeAttributeName);
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(SelfClosingStartTag);
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.emitTagPending();
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(Data);
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.dataBuffer.append(c);
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-anythingElse(t,r);
Following diff 16:
-r.advance();
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-switch(c){
-case'\t':
-case'\n':
-case'\f':
-case'':
-t.transition(BeforeAttributeName);
-break;
-case'/':
-t.transition(SelfClosingStartTag);
-break;
-case'>':
-t.emitTagPending();
-t.transition(Data);
-break;
-default:
-t.dataBuffer.append(c);
-anythingElse(t,r);
-break;
-}
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(BeforeAttributeName);
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(SelfClosingStartTag);
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.emitTagPending();
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(Data);
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.dataBuffer.append(c);
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-anythingElse(t,r);
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-charc=r.consume();
-switch(c){
-case'\t':
-case'\n':
-case'\f':
-case'':
-t.transition(BeforeAttributeName);
-break;
-case'/':
-t.transition(SelfClosingStartTag);
-break;
-case'>':
-t.emitTagPending();
-t.transition(Data);
-break;
-default:
-t.dataBuffer.append(c);
-anythingElse(t,r);
-break;
-}
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-case'\n':
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-case'\f':
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-break;
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-case'':
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-t.transition(BeforeAttributeName);
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-t.transition(Data);
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-t.transition(SelfClosingStartTag);
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-t.emitTagPending();
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-break;
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-break;
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-t.dataBuffer.append(c);
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-anythingElse(t,r);
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-break;
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-t.transition(BeforeAttributeName);
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-case'\f':
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-case'':
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-break;
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-t.transition(SelfClosingStartTag);
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-break;
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-t.transition(Data);
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-break;
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-t.emitTagPending();
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-t.dataBuffer.append(c);
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-anythingElse(t,r);
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-break;
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
-case'':
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
-t.transition(BeforeAttributeName);
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
-break;
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
-t.transition(SelfClosingStartTag);
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
-break;
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
-t.transition(Data);
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
-t.emitTagPending();
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
-t.dataBuffer.append(c);
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
-break;
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
-anythingElse(t,r);
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
-break;
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
-t.transition(BeforeAttributeName);
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
-break;
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
-t.transition(SelfClosingStartTag);
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
-t.emitTagPending();
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
-break;
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
-t.transition(Data);
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
-break;
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.dataBuffer.append(c);
-break;
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-anythingElse(t,r);
-break;
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
-anythingElse(t,r);
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
-t.dataBuffer.append(c);
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(BeforeAttributeName);
-t.emitTagPending();
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(BeforeAttributeName);
-t.transition(Data);
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.dataBuffer.append(c);
-anythingElse(t,r);
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(BeforeAttributeName);
-break;
Following diff 16:
-t.tagPending.appendTagName(name.toLowerCase());
-r.advance();
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(BeforeAttributeName);
-t.dataBuffer.append(c);
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(BeforeAttributeName);
-anythingElse(t,r);
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(BeforeAttributeName);
-break;
Following diff 16:
-r.advance();
-switch(c){
-case'\t':
-case'\n':
-case'\f':
-case'':
-t.transition(BeforeAttributeName);
-break;
-case'/':
-t.transition(SelfClosingStartTag);
-break;
-case'>':
-t.emitTagPending();
-t.transition(Data);
-break;
-default:
-t.dataBuffer.append(c);
-anythingElse(t,r);
-break;
-}
Following diff 16:
-r.advance();
-return;
Following diff 16:
-r.advance();
-if(t.isAppropriateEndTagToken()&&!r.isEmpty()){
-charc=r.consume();
-switch(c){
-case'\t':
-case'\n':
-case'\f':
-case'':
-t.transition(BeforeAttributeName);
-break;
-case'/':
-t.transition(SelfClosingStartTag);
-break;
-case'>':
-t.emitTagPending();
-t.transition(Data);
-break;
-default:
-t.dataBuffer.append(c);
-anythingElse(t,r);
-break;
-}
-}
Following diff 16:
-r.advance();
-case'\n':
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-case'/':
Following diff 16:
-r.advance();
-case'\t':
Following diff 16:
-r.advance();
-case'\f':
Following diff 16:
-r.advance();
-case'':
Following diff 16:
-r.advance();
-t.transition(BeforeAttributeName);
Following diff 16:
-r.advance();
-t.transition(SelfClosingStartTag);
Following diff 16:
-r.advance();
-break;
Following diff 16:
-r.advance();
-break;
Following diff 16:
-r.advance();
-t.emitTagPending();
Following diff 16:
-r.advance();
-t.transition(Data);
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
-break;
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-t.transition(SelfClosingStartTag);
Following diff 16:
-r.advance();
-anythingElse(t,r);
Following diff 16:
-r.advance();
-break;
Following diff 16:
-r.advance();
-t.dataBuffer.append(c);
Following diff 16:
-r.advance();
-break;
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-break;
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-t.emitTagPending();
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-t.transition(Data);
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-break;
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-t.dataBuffer.append(c);
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-anythingElse(t,r);
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-break;
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(SelfClosingStartTag);
-break;
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(SelfClosingStartTag);
-t.emitTagPending();
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(SelfClosingStartTag);
-break;
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(BeforeAttributeName);
-break;
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(SelfClosingStartTag);
-t.dataBuffer.append(c);
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(SelfClosingStartTag);
-t.transition(Data);
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(SelfClosingStartTag);
-anythingElse(t,r);
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(SelfClosingStartTag);
-break;
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-case'>':
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-t.emitTagPending();
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-t.transition(Data);
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-break;
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-anythingElse(t,r);
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-t.dataBuffer.append(c);
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-break;
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(BeforeAttributeName);
-t.transition(SelfClosingStartTag);
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.emitTagPending();
-t.transition(Data);
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.emitTagPending();
-break;
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.emitTagPending();
-t.dataBuffer.append(c);
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(BeforeAttributeName);
-break;
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.emitTagPending();
-break;
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.emitTagPending();
-anythingElse(t,r);
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(Data);
-break;
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(Data);
-t.dataBuffer.append(c);
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(Data);
-anythingElse(t,r);
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(Data);
-break;
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-default:
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-t.dataBuffer.append(c);
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-anythingElse(t,r);
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-break;
Following diff 16:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
Following diff 17:
-t.dataBuffer.append(c);
+r.unconsume();
+t.emit(t.dataBuffer.toString());
+t.dataBuffer.setLength(0);
Following diff 18:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
Following diff 18:
-t.tagPending.appendTagName(name.toLowerCase());
-r.advance();
Following diff 18:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-switch(c){
-case'\t':
-case'\n':
-case'\f':
-case'':
-t.transition(BeforeAttributeName);
-break;
-case'/':
-t.transition(SelfClosingStartTag);
-break;
-case'>':
-t.emitTagPending();
-t.transition(Data);
-break;
-default:
-t.dataBuffer.append(c);
-anythingElse(t,r);
-break;
-}
Following diff 18:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
Following diff 18:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
Following diff 18:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
Following diff 18:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
Following diff 18:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
Following diff 18:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(BeforeAttributeName);
Following diff 18:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(SelfClosingStartTag);
Following diff 18:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
Following diff 18:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.emitTagPending();
Following diff 18:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(Data);
Following diff 18:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
Following diff 18:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.dataBuffer.append(c);
Following diff 18:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-anythingElse(t,r);
Following diff 18:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
Following diff 18:
-r.advance();
Following diff 18:
-r.advance();
-return;
Following diff 18:
-r.advance();
-if(t.isAppropriateEndTagToken()&&!r.isEmpty()){
-charc=r.consume();
-switch(c){
-case'\t':
-case'\n':
-case'\f':
-case'':
-t.transition(BeforeAttributeName);
-break;
-case'/':
-t.transition(SelfClosingStartTag);
-break;
-case'>':
-t.emitTagPending();
-t.transition(Data);
-break;
-default:
-t.dataBuffer.append(c);
-anythingElse(t,r);
-break;
-}
-}
Following diff 18:
-r.advance();
-switch(c){
-case'\t':
-case'\n':
-case'\f':
-case'':
-t.transition(BeforeAttributeName);
-break;
-case'/':
-t.transition(SelfClosingStartTag);
-break;
-case'>':
-t.emitTagPending();
-t.transition(Data);
-break;
-default:
-t.dataBuffer.append(c);
-anythingElse(t,r);
-break;
-}
Following diff 18:
-r.advance();
-case'\t':
Following diff 18:
-r.advance();
-case'\n':
Following diff 18:
-r.advance();
-break;
Following diff 18:
-r.advance();
-t.emitTagPending();
Following diff 18:
-r.advance();
-case'\f':
Following diff 18:
-r.advance();
-t.transition(Data);
Following diff 18:
-r.advance();
-t.transition(SelfClosingStartTag);
Following diff 18:
-r.advance();
-t.transition(BeforeAttributeName);
Following diff 18:
-r.advance();
-break;
Following diff 18:
-r.advance();
-case'':
Following diff 18:
-r.advance();
-t.dataBuffer.append(c);
Following diff 18:
-r.advance();
-break;
Following diff 18:
-r.advance();
-anythingElse(t,r);
Following diff 18:
-r.advance();
-break;
Following diff 18:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-switch(c){
-case'\t':
-case'\n':
-case'\f':
-case'':
-t.transition(BeforeAttributeName);
-break;
-case'/':
-t.transition(SelfClosingStartTag);
-break;
-case'>':
-t.emitTagPending();
-t.transition(Data);
-break;
-default:
-t.dataBuffer.append(c);
-anythingElse(t,r);
-break;
-}
Following diff 18:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
Following diff 18:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
Following diff 18:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
Following diff 18:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(BeforeAttributeName);
Following diff 18:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
Following diff 18:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
Following diff 18:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(SelfClosingStartTag);
Following diff 18:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
Following diff 18:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.emitTagPending();
Following diff 18:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(Data);
Following diff 18:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
Following diff 18:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.dataBuffer.append(c);
Following diff 18:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-anythingElse(t,r);
Following diff 18:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
Following diff 18:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
Following diff 18:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-charc=r.consume();
-switch(c){
-case'\t':
-case'\n':
-case'\f':
-case'':
-t.transition(BeforeAttributeName);
-break;
-case'/':
-t.transition(SelfClosingStartTag);
-break;
-case'>':
-t.emitTagPending();
-t.transition(Data);
-break;
-default:
-t.dataBuffer.append(c);
-anythingElse(t,r);
-break;
-}
Following diff 18:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-case'':
Following diff 18:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-t.transition(BeforeAttributeName);
Following diff 18:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-case'\n':
Following diff 18:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-break;
Following diff 18:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-case'\f':
Following diff 18:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-break;
Following diff 18:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-t.transition(SelfClosingStartTag);
Following diff 18:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-break;
Following diff 18:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-t.emitTagPending();
Following diff 18:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-t.transition(Data);
Following diff 18:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-t.dataBuffer.append(c);
Following diff 18:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-anythingElse(t,r);
Following diff 18:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-break;
Following diff 18:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-case'\f':
Following diff 18:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-case'':
Following diff 18:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-t.transition(BeforeAttributeName);
Following diff 18:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-break;
Following diff 18:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-t.transition(SelfClosingStartTag);
Following diff 22:
+r.unconsume();
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
Following diff 23:
-t.tagPending.appendTagName(name.toLowerCase());
-r.advance();
Following diff 23:
-r.advance();
-return;
Following diff 23:
-r.advance();
-if(t.isAppropriateEndTagToken()&&!r.isEmpty()){
-charc=r.consume();
-switch(c){
-case'\t':
-case'\n':
-case'\f':
-case'':
-t.transition(BeforeAttributeName);
-break;
-case'/':
-t.transition(SelfClosingStartTag);
-break;
-case'>':
-t.emitTagPending();
-t.transition(Data);
-break;
-default:
-t.dataBuffer.append(c);
-anythingElse(t,r);
-break;
-}
-}
Following diff 23:
-r.advance();
-switch(c){
-case'\t':
-case'\n':
-case'\f':
-case'':
-t.transition(BeforeAttributeName);
-break;
-case'/':
-t.transition(SelfClosingStartTag);
-break;
-case'>':
-t.emitTagPending();
-t.transition(Data);
-break;
-default:
-t.dataBuffer.append(c);
-anythingElse(t,r);
-break;
-}
Following diff 23:
-r.advance();
-case'\n':
Following diff 23:
-r.advance();
-case'\t':
Following diff 23:
-r.advance();
-case'\f':
Following diff 23:
-r.advance();
-case'':
Following diff 23:
-r.advance();
-t.transition(BeforeAttributeName);
Following diff 23:
-r.advance();
-break;
Following diff 23:
-r.advance();
-t.emitTagPending();
Following diff 23:
-r.advance();
-break;
Following diff 23:
-r.advance();
-t.transition(SelfClosingStartTag);
Following diff 23:
-r.advance();
-t.transition(Data);
Following diff 23:
-r.advance();
-break;
Following diff 23:
-r.advance();
-t.dataBuffer.append(c);
Following diff 23:
-r.advance();
-anythingElse(t,r);
Following diff 23:
-r.advance();
-break;
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-switch(c){
-case'\t':
-case'\n':
-case'\f':
-case'':
-t.transition(BeforeAttributeName);
-break;
-case'/':
-t.transition(SelfClosingStartTag);
-break;
-case'>':
-t.emitTagPending();
-t.transition(Data);
-break;
-default:
-t.dataBuffer.append(c);
-anythingElse(t,r);
-break;
-}
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(BeforeAttributeName);
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(SelfClosingStartTag);
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.emitTagPending();
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(Data);
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.dataBuffer.append(c);
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-anythingElse(t,r);
Following diff 23:
-r.advance();
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-switch(c){
-case'\t':
-case'\n':
-case'\f':
-case'':
-t.transition(BeforeAttributeName);
-break;
-case'/':
-t.transition(SelfClosingStartTag);
-break;
-case'>':
-t.emitTagPending();
-t.transition(Data);
-break;
-default:
-t.dataBuffer.append(c);
-anythingElse(t,r);
-break;
-}
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(BeforeAttributeName);
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(SelfClosingStartTag);
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(Data);
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.emitTagPending();
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.dataBuffer.append(c);
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-anythingElse(t,r);
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-charc=r.consume();
-switch(c){
-case'\t':
-case'\n':
-case'\f':
-case'':
-t.transition(BeforeAttributeName);
-break;
-case'/':
-t.transition(SelfClosingStartTag);
-break;
-case'>':
-t.emitTagPending();
-t.transition(Data);
-break;
-default:
-t.dataBuffer.append(c);
-anythingElse(t,r);
-break;
-}
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-case'\n':
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-case'':
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-case'\f':
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-t.transition(SelfClosingStartTag);
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-t.transition(BeforeAttributeName);
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-break;
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-t.emitTagPending();
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-break;
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-t.transition(Data);
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-break;
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-t.dataBuffer.append(c);
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-anythingElse(t,r);
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
-break;
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-case'':
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-case'\f':
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-t.transition(BeforeAttributeName);
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-break;
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-t.transition(SelfClosingStartTag);
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-t.emitTagPending();
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-break;
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-t.transition(Data);
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-break;
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-t.dataBuffer.append(c);
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-anythingElse(t,r);
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
-break;
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
-case'':
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
-t.transition(BeforeAttributeName);
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
-break;
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
-break;
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
-t.transition(SelfClosingStartTag);
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
-t.emitTagPending();
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
-t.transition(Data);
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
-break;
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
-t.dataBuffer.append(c);
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
-anythingElse(t,r);
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
-break;
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
-t.transition(BeforeAttributeName);
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
-break;
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
-t.transition(SelfClosingStartTag);
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
-break;
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
-t.transition(Data);
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
-t.emitTagPending();
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
-break;
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.dataBuffer.append(c);
-anythingElse(t,r);
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(BeforeAttributeName);
-t.emitTagPending();
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
-t.dataBuffer.append(c);
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(BeforeAttributeName);
-t.transition(Data);
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-anythingElse(t,r);
-break;
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.dataBuffer.append(c);
-break;
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
-anythingElse(t,r);
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(BeforeAttributeName);
-break;
Following diff 23:
-t.tagPending.appendTagName(name.toLowerCase());
-r.advance();
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(BeforeAttributeName);
-t.dataBuffer.append(c);
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(BeforeAttributeName);
-anythingElse(t,r);
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(BeforeAttributeName);
-break;
Following diff 23:
-r.advance();
-return;
Following diff 23:
-r.advance();
-if(t.isAppropriateEndTagToken()&&!r.isEmpty()){
-charc=r.consume();
-switch(c){
-case'\t':
-case'\n':
-case'\f':
-case'':
-t.transition(BeforeAttributeName);
-break;
-case'/':
-t.transition(SelfClosingStartTag);
-break;
-case'>':
-t.emitTagPending();
-t.transition(Data);
-break;
-default:
-t.dataBuffer.append(c);
-anythingElse(t,r);
-break;
-}
-}
Following diff 23:
-r.advance();
-switch(c){
-case'\t':
-case'\n':
-case'\f':
-case'':
-t.transition(BeforeAttributeName);
-break;
-case'/':
-t.transition(SelfClosingStartTag);
-break;
-case'>':
-t.emitTagPending();
-t.transition(Data);
-break;
-default:
-t.dataBuffer.append(c);
-anythingElse(t,r);
-break;
-}
Following diff 23:
-r.advance();
-case'\t':
Following diff 23:
-r.advance();
-case'\n':
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-case'/':
Following diff 23:
-r.advance();
-case'\f':
Following diff 23:
-r.advance();
-case'':
Following diff 23:
-r.advance();
-t.transition(BeforeAttributeName);
Following diff 23:
-r.advance();
-break;
Following diff 23:
-r.advance();
-t.transition(SelfClosingStartTag);
Following diff 23:
-r.advance();
-break;
Following diff 23:
-r.advance();
-t.emitTagPending();
Following diff 23:
-r.advance();
-t.transition(Data);
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
-break;
Following diff 23:
-r.advance();
-break;
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-t.transition(SelfClosingStartTag);
Following diff 23:
-r.advance();
-t.dataBuffer.append(c);
Following diff 23:
-r.advance();
-anythingElse(t,r);
Following diff 23:
-r.advance();
-break;
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-break;
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-t.emitTagPending();
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-t.transition(Data);
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-break;
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-t.dataBuffer.append(c);
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-break;
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-anythingElse(t,r);
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(SelfClosingStartTag);
-break;
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(SelfClosingStartTag);
-t.emitTagPending();
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(SelfClosingStartTag);
-t.transition(Data);
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(SelfClosingStartTag);
-break;
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(SelfClosingStartTag);
-t.dataBuffer.append(c);
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(BeforeAttributeName);
-break;
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(SelfClosingStartTag);
-anythingElse(t,r);
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(SelfClosingStartTag);
-break;
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-case'>':
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-t.emitTagPending();
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-t.transition(Data);
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-break;
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-t.dataBuffer.append(c);
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-anythingElse(t,r);
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-break;
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(BeforeAttributeName);
-t.transition(SelfClosingStartTag);
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.emitTagPending();
-t.transition(Data);
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.emitTagPending();
-break;
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.emitTagPending();
-t.dataBuffer.append(c);
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.emitTagPending();
-anythingElse(t,r);
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.emitTagPending();
-break;
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(BeforeAttributeName);
-break;
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(Data);
-break;
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(Data);
-t.dataBuffer.append(c);
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(Data);
-anythingElse(t,r);
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(Data);
-break;
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-default:
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-break;
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-anythingElse(t,r);
Following diff 23:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
-t.dataBuffer.append(c);
Following diff 24:
+r.unconsume();
+t.emit(c);
Following diff 24:
-t.dataBuffer.append(c);
+r.unconsume();
Following diff 24:
-t.dataBuffer.append(c);
+r.unconsume();
+t.emit(c);
Following diff 26:
-r.advance();
-t.dataBuffer.append(c);
Following diff 26:
-r.advance();
Following diff 26:
-r.advance();
+t.emit("</");
Following diff 26:
-r.advance();
+t.emit(c);
Following diff 26:
-r.advance();
-t.dataBuffer.append(c);
+t.emit("</");
Following diff 26:
-r.advance();
-t.dataBuffer.append(c);
+t.emit(c);
Following diff 26:
-r.advance();
+t.emit("</");
+t.emit(c);
Following diff 26:
+r.unconsume();
+t.emit(c);
Following diff 26:
-t.dataBuffer.append(c);
+r.unconsume();
+t.emit("</");
Following diff 27:
+r.unconsume();
+t.transition(TagOpen);
Following diff 27:
+r.unconsume();
Following diff 27:
+t.transition(TagOpen);
+r.unconsume();
+t.transition(TagOpen);
Following diff 27:
-t.dataBuffer.append(c);
+t.emit("&lt;");
+t.transition(TagOpen);
+r.unconsume();
Following diff 28:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
Following diff 28:
-t.tagPending.appendTagName(name.toLowerCase());
-r.advance();
Following diff 28:
-r.advance();
-return;
Following diff 28:
-r.advance();
-if(t.isAppropriateEndTagToken()&&!r.isEmpty()){
-charc=r.consume();
-switch(c){
-case'\t':
-case'\n':
-case'\f':
-case'':
-t.transition(BeforeAttributeName);
-break;
-case'/':
-t.transition(SelfClosingStartTag);
-break;
-case'>':
-t.emitTagPending();
-t.transition(Data);
-break;
-default:
-t.dataBuffer.append(c);
-anythingElse(t,r);
-break;
-}
-}
Following diff 28:
-r.advance();
-switch(c){
-case'\t':
-case'\n':
-case'\f':
-case'':
-t.transition(BeforeAttributeName);
-break;
-case'/':
-t.transition(SelfClosingStartTag);
-break;
-case'>':
-t.emitTagPending();
-t.transition(Data);
-break;
-default:
-t.dataBuffer.append(c);
-anythingElse(t,r);
-break;
-}
Following diff 28:
-r.advance();
-case'\t':
Following diff 28:
-r.advance();
-case'\n':
Following diff 28:
-r.advance();
-case'\f':
Following diff 28:
-r.advance();
-case'':
Following diff 28:
-r.advance();
-t.transition(BeforeAttributeName);
Following diff 28:
-r.advance();
-break;
Following diff 28:
-r.advance();
-t.transition(SelfClosingStartTag);
Following diff 28:
-r.advance();
-t.emitTagPending();
Following diff 28:
-r.advance();
-break;
Following diff 28:
-r.advance();
-t.transition(Data);
Following diff 28:
-r.advance();
-break;
Following diff 28:
-r.advance();
-t.dataBuffer.append(c);
Following diff 28:
-r.advance();
-anythingElse(t,r);
Following diff 28:
-r.advance();
-break;
Following diff 28:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-switch(c){
-case'\t':
-case'\n':
-case'\f':
-case'':
-t.transition(BeforeAttributeName);
-break;
-case'/':
-t.transition(SelfClosingStartTag);
-break;
-case'>':
-t.emitTagPending();
-t.transition(Data);
-break;
-default:
-t.dataBuffer.append(c);
-anythingElse(t,r);
-break;
-}
Following diff 28:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\t':
Following diff 28:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\n':
Following diff 28:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'\f':
Following diff 28:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-case'':
Following diff 28:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(BeforeAttributeName);
Following diff 28:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
Following diff 28:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
Following diff 28:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.emitTagPending();
Following diff 28:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(SelfClosingStartTag);
Following diff 28:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.transition(Data);
Following diff 28:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
Following diff 28:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-t.dataBuffer.append(c);
Following diff 28:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-anythingElse(t,r);
Following diff 28:
-r.advance();
Following diff 28:
-if(r.matchesLetter()){
-Stringname=r.consumeLetterSequence();
-t.tagPending.appendTagName(name.toLowerCase());
-t.dataBuffer.append(name);
-r.advance();
-return;
-}
-break;
