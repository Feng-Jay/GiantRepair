Following diff 11:
-if(u*v==0){
-return(Math.abs(u)+Math.abs(v));
-}
-if(u>0){
-u=-u;
-}
-if(v>0){
-v=-v;
-}
-intk=0;
-while((u&1)==0&&(v&1)==0&&k<31){
-u/=2;
-v/=2;
-k++;
-}
-if(k==31){
-thrownewArithmeticException("overflow:gcdis2^31");
-}
-intt=((u&1)==1)?v:-(u/2);
-do{
-while((t&1)==0){
-t/=2;
-}
-if(t>0){
-u=-t;
-}
-else{
-v=t;
-}
-t=(v-u)/2;
-}
-while(t!=0);
-return-u*(1<<k);
+inta=Math.abs(u);
+intb=Math.abs(v);
+intc;
+while(b!=0){
+c=b;
+b=a%b;
+a=c;
+}
+returna;
Following diff 13:
-if(u*v==0){
-return(Math.abs(u)+Math.abs(v));
-}
+if(u==0||v==0){
+returnMath.abs(u)+Math.abs(v);
+}
Following diff 16:
-if(u*v==0){
+if(u==0||v==0){
Following diff 16:
-if(u*v==0){
-return(Math.abs(u)+Math.abs(v));
+if(u==0||v==0){
+returnMath.abs(u)+Math.abs(v);
Following diff 16:
-if(u*v==0){
+if(u==0||v==0){
+intshift;
Following diff 16:
-if(u*v==0){
-if(k==31){
-thrownewArithmeticException("overflow:gcdis2^31");
-}
+if(u==0||v==0){
Following diff 16:
-if(u*v==0){
+if(u==0||v==0){
+while((u&1)==0){
+u/=2;
+}
Following diff 16:
-if(u*v==0){
-thrownewArithmeticException("overflow:gcdis2^31");
+if(u==0||v==0){
Following diff 16:
-if(u*v==0){
+if(u==0||v==0){
+intshift;
+while((u&1)==0){
+u/=2;
+}
Following diff 16:
-if(u*v==0){
-if(k==31){
-thrownewArithmeticException("overflow:gcdis2^31");
-}
+if(u==0||v==0){
+intshift;
Following diff 16:
-if(u*v==0){
-thrownewArithmeticException("overflow:gcdis2^31");
+if(u==0||v==0){
+intshift;
Following diff 16:
-if(u*v==0){
-thrownewArithmeticException("overflow:gcdis2^31");
+if(u==0||v==0){
+while((u&1)==0){
+u/=2;
+}
Following diff 16:
-if(u*v==0){
-if(k==31){
-thrownewArithmeticException("overflow:gcdis2^31");
-}
+if(u==0||v==0){
+while((u&1)==0){
+u/=2;
+}
Following diff 16:
-if(u*v==0){
-return(Math.abs(u)+Math.abs(v));
+if(u==0||v==0){
+returnMath.abs(u)+Math.abs(v);
+intshift;
Following diff 16:
-if(u*v==0){
-return(Math.abs(u)+Math.abs(v));
-if(k==31){
-thrownewArithmeticException("overflow:gcdis2^31");
-}
+if(u==0||v==0){
+returnMath.abs(u)+Math.abs(v);
Following diff 16:
-if(u*v==0){
-return(Math.abs(u)+Math.abs(v));
+if(u==0||v==0){
+returnMath.abs(u)+Math.abs(v);
+while((u&1)==0){
+u/=2;
+}
Following diff 16:
-if(u*v==0){
-return(Math.abs(u)+Math.abs(v));
-thrownewArithmeticException("overflow:gcdis2^31");
+if(u==0||v==0){
+returnMath.abs(u)+Math.abs(v);
