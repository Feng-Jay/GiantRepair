Repair : lang_58
Current failed test : org.apache.commons.lang.math.NumberUtilsTest::testLang300 | 2019.09.07 AD at 11:19:49 CDT
Location : org.apache.commons.lang.math.NumberUtils.createNumber:[464, 398, 401, 404, 411, 414, 418, 419, 421, 433, 436, 438, 440, 441, 444, 447, 448, 449, 452, 457]#0.7071067811865475
Compute Candidate : 2019.09.07 AD at 11:20:18 CDT - 2019.09.07 AD at 13:52:46 CDT , PNumber : 11383, CandNumber : 940 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
-int decPos=str.indexOf('.');
+ int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:52:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
-char lastChar=str.charAt(str.length()-1);
+ char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:52:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+ String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:52:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+ int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:52:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
-boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+ boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:52:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")){
+if(str.startsWith("0x")&&str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V17/3484/pattern-ver1-serial/src.com.massivecraft.creativegates.MainListener.java-stabilizePortalContent.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:53:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
+if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'&&Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V17/3484/pattern-ver1-serial/src.com.massivecraft.creativegates.MainListener.java-stabilizePortalContent.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:53:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
+if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)==0||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/4568/pattern-ver1-serial/src.client.game.GameFrame.java-received.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:53:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
-if(decPos>-1){
+if(decPos>=-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V59/3225/pattern-ver1-serial/src.org.peg4d.ParserContext.java-beginPeformStat.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:53:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
-if(expPos>-1){
+if(expPos>=-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V59/3225/pattern-ver1-serial/src.org.peg4d.ParserContext.java-beginPeformStat.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:53:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>=-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V59/3225/pattern-ver1-serial/src.org.peg4d.ParserContext.java-beginPeformStat.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:53:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
+return null;
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:53:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
+return null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:53:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
+return null;
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:53:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
+return null;
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:53:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
-if(str==null){
+if(str!=null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4111/pattern-ver1-serial/tephra-core.src.main.java.co.cask.tephra.snapshot.SnapshotCodecV4.java-encodeInProgress.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:53:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
+if(dec!=null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4111/pattern-ver1-serial/tephra-core.src.main.java.co.cask.tephra.snapshot.SnapshotCodecV4.java-encodeInProgress.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:53:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
+if(dec==null&&exp!=null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4111/pattern-ver1-serial/tephra-core.src.main.java.co.cask.tephra.snapshot.SnapshotCodecV4.java-encodeInProgress.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:54:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
+return null;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V41/1695/pattern-ver1-serial/src.fr.project.bluechat.layout.activity.MainActivity.java-newName.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:54:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
-if(expPos>-1){
+if(expPos>=-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/6603/pattern-ver1-serial/java.ak.EnchantChanger.block.EcBlockMaterializer.java-checkCost.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:54:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>=-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/6603/pattern-ver1-serial/java.ak.EnchantChanger.block.EcBlockMaterializer.java-checkCost.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:54:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
+return null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/2057/pattern-ver1-serial/multiplication-game.Main.java-ollie.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:54:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<=str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:54:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<=str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V32/1247/pattern-ver1-serial/src.connect4.HumanPlayer.java-drop.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:54:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
-if(expPos<decPos){
+if(expPos<=decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V32/1247/pattern-ver1-serial/src.connect4.HumanPlayer.java-drop.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:54:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
-if(str.startsWith("--")){
+if(str.startsWith("--",0)){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/3557/pattern-ver1-serial/src.main.java.com.jetbrains.jetpad.vclang.term.expr.sort.Level.java-prettyPrint.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:54:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")){
+if(str.startsWith("0x",0)||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/3557/pattern-ver1-serial/src.main.java.com.jetbrains.jetpad.vclang.term.expr.sort.Level.java-prettyPrint.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:54:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")){
+if(str.startsWith("0x")||str.startsWith("-0x",0)){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/3557/pattern-ver1-serial/src.main.java.com.jetbrains.jetpad.vclang.term.expr.sort.Level.java-prettyPrint.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:54:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
-int decPos=str.indexOf('.');
+int decPos=str.indexOf('.',0);
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/3557/pattern-ver1-serial/src.main.java.com.jetbrains.jetpad.vclang.term.expr.sort.Level.java-prettyPrint.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:55:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf('e',0)+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/3557/pattern-ver1-serial/src.main.java.com.jetbrains.jetpad.vclang.term.expr.sort.Level.java-prettyPrint.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:55:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf('e')+str.indexOf('E',0)+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/3557/pattern-ver1-serial/src.main.java.com.jetbrains.jetpad.vclang.term.expr.sort.Level.java-prettyPrint.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:55:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
-int decPos=str.indexOf('.');
+int decPos=str.indexOf(str,'.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7601/pattern-ver1-serial/src.neu.ComputerPlayer.java-checkImmidiateFour.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:55:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf(str,'e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7601/pattern-ver1-serial/src.neu.ComputerPlayer.java-checkImmidiateFour.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:55:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf('e')+str.indexOf(str,'E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7601/pattern-ver1-serial/src.neu.ComputerPlayer.java-checkImmidiateFour.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:55:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos>str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:55:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
+if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)<='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:55:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf('e')-str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/163/pattern-ver1-serial/app.src.main.java.th.zirata.Blocks.EnemyBlocks.Hydra.java-createHydra.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:55:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf('e')+str.indexOf('E')-1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/163/pattern-ver1-serial/app.src.main.java.th.zirata.Blocks.EnemyBlocks.Hydra.java-createHydra.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:55:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(str+str);
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:55:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
-if(decPos>-1){
+if(decPos<-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3672/pattern-ver1-serial/src.edu.miamioh.cse283.htw.Room.java-shoot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:55:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
-if(expPos>-1){
+if(expPos<-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3672/pattern-ver1-serial/src.edu.miamioh.cse283.htw.Room.java-shoot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:55:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos<-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3672/pattern-ver1-serial/src.edu.miamioh.cse283.htw.Room.java-shoot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:55:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
-if(expPos>-1){
+if(expPos<-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3672/pattern-ver1-serial/src.edu.miamioh.cse283.htw.Room.java-shoot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:55:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos<-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3672/pattern-ver1-serial/src.edu.miamioh.cse283.htw.Room.java-shoot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:55:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
+if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)>='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:55:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
-if(decPos>-1){
+if(decPos!=-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/71/pattern-ver1-serial/src.edu.stanford.nlp.mt.decoder.feat.base.TranslationModelFeaturizer.java-ruleFeaturize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:55:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
-if(expPos>-1){
+if(expPos!=-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/71/pattern-ver1-serial/src.edu.stanford.nlp.mt.decoder.feat.base.TranslationModelFeaturizer.java-ruleFeaturize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:55:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos!=-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/71/pattern-ver1-serial/src.edu.stanford.nlp.mt.decoder.feat.base.TranslationModelFeaturizer.java-ruleFeaturize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:55:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
-int decPos=str.indexOf('.');
+int decPos=str.indexOf("",'.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/1081/pattern-ver1-serial/src.main.java.edu.kit.ipd.crowdcontrol.objectservice.moneytransfer.MoneyTransferManager.java-sendNotification.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:55:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf("",'e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/1081/pattern-ver1-serial/src.main.java.edu.kit.ipd.crowdcontrol.objectservice.moneytransfer.MoneyTransferManager.java-sendNotification.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:55:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf('e')+str.indexOf("",'E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/1081/pattern-ver1-serial/src.main.java.edu.kit.ipd.crowdcontrol.objectservice.moneytransfer.MoneyTransferManager.java-sendNotification.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:55:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
+if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)!='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:56:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
+return 0;
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2131/pattern-ver1-serial/src.nl.dobots.bluenet.extended.structs.BleDeviceList.java-compare.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:56:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
+return 0;
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2131/pattern-ver1-serial/src.nl.dobots.bluenet.extended.structs.BleDeviceList.java-compare.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:56:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
+return 0;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2131/pattern-ver1-serial/src.nl.dobots.bluenet.extended.structs.BleDeviceList.java-compare.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:56:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
-int decPos=str.indexOf('.');
+Integer decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:56:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+Integer expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:56:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
-int decPos=str.indexOf('.');
+int decPos=str.indexOf(1,'.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6767/pattern-ver1-serial/src.main.java.org.gedcom4j.writer.GedcomWriter.java-emitRepositories.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:56:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf(1,'e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6767/pattern-ver1-serial/src.main.java.org.gedcom4j.writer.GedcomWriter.java-emitRepositories.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:56:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
+return 0;
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/5432/pattern-ver1-serial/app.src.main.java.com.rrdevs.peerboard.DBCompare.java-authenticateLogin.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:56:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
+return 0;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/5432/pattern-ver1-serial/app.src.main.java.com.rrdevs.peerboard.DBCompare.java-authenticateLogin.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:56:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
-char lastChar=str.charAt(str.length()-1);
+char lastChar=str.charAt(str.length()-2);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/1120/pattern-ver1-serial/src.main.java.com.pratilipi.data.util.PratilipiDataUtil.java-updatePratilipiStats.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:56:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<str.length()-2){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/1120/pattern-ver1-serial/src.main.java.com.pratilipi.data.util.PratilipiDataUtil.java-updatePratilipiStats.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:56:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+String numeric=str.substring(0,str.length()-2);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/1120/pattern-ver1-serial/src.main.java.com.pratilipi.data.util.PratilipiDataUtil.java-updatePratilipiStats.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:56:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
-int decPos=str.indexOf('.');
+int decPos=str.indexOf('.',lastChar);
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V16/6746/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.vplexcontroller.VPlexDeviceController.java-deleteStorageView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:56:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf('e',lastChar)+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V16/6746/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.vplexcontroller.VPlexDeviceController.java-deleteStorageView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:56:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf('e')+str.indexOf('E',lastChar)+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V16/6746/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.vplexcontroller.VPlexDeviceController.java-deleteStorageView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:56:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf('e')+str.indexOf(1,'E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/1851/pattern-ver1-serial/mail.src.main.java.javax.mail.internet.MailDateFormat.java-parseMinute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:56:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
+if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'!=Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/4891/pattern-ver1-serial/app.src.main.java.edu.temple.androidpermissions.MainActivity.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:56:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
+if(dec==null&&exp==null!=isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/4891/pattern-ver1-serial/app.src.main.java.edu.temple.androidpermissions.MainActivity.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:56:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
+if(dec==null&&exp==null&&isDigits(numeric.substring(1))!=(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/4891/pattern-ver1-serial/app.src.main.java.edu.temple.androidpermissions.MainActivity.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:56:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
-int decPos=str.indexOf('.');
+int decPos=str.indexOf('+');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/5726/pattern-ver1-serial/org.osate.alisa.workbench.src-gen.org.osate.alisa.workbench.parser.antlr.internal.InternalAlisaLexer.java-mT__59.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:56:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf('+')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/5726/pattern-ver1-serial/org.osate.alisa.workbench.src-gen.org.osate.alisa.workbench.parser.antlr.internal.InternalAlisaLexer.java-mT__59.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:56:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf('e')+str.indexOf('+')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/5726/pattern-ver1-serial/org.osate.alisa.workbench.src-gen.org.osate.alisa.workbench.parser.antlr.internal.InternalAlisaLexer.java-mT__59.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:56:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
+if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)>'-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:56:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
-dec=str.substring(decPos+1);
+dec=str.substring(decPos,decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/2403/pattern-ver1-serial/app.src.main.java.com.door43.translationstudio.core.Indexer.java-getFrame.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:56:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite(decPos)||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V56/5031/pattern-ver1-serial/demos.src.main.java.com.datatorrent.demos.adsdimension.GenericApplication.java-populateDAG.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:56:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+if(!(d.isInfinite(decPos)||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V56/5031/pattern-ver1-serial/demos.src.main.java.com.datatorrent.demos.adsdimension.GenericApplication.java-populateDAG.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:57:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
-if(str.startsWith("--")){
+if(str.contains("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V12/5321/pattern-ver1-serial/app.src.main.java.edu.gatech.johndoe.carecoordinator.community.UI.CommunityAdapter.java-performFiltering.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:57:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")){
+if(str.contains("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V12/5321/pattern-ver1-serial/app.src.main.java.edu.gatech.johndoe.carecoordinator.community.UI.CommunityAdapter.java-performFiltering.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:57:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")){
+if(str.startsWith("0x")||str.contains("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V12/5321/pattern-ver1-serial/app.src.main.java.edu.gatech.johndoe.carecoordinator.community.UI.CommunityAdapter.java-performFiltering.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:57:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(mant+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/758/pattern-ver1-serial/genomix.genomix-driver.src.main.java.edu.uci.ics.genomix.driver.GenomixDriver.java-addStep.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:57:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(mant+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/758/pattern-ver1-serial/genomix.genomix-driver.src.main.java.edu.uci.ics.genomix.driver.GenomixDriver.java-addStep.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:57:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
-mant=str;
+mant="";
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6756/pattern-ver1-serial/src.main.java.org.silvertunnel_ng.netlib.adapter.url.impl.net.http.MessageHeader.java-mergeHeader.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:57:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
-int decPos=str.indexOf('.');
+int decPos=str.lastIndexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4339/pattern-ver1-serial/app.src.main.java.com.leafpic.app.utils.StringUtils.java-getPhotoNamebyPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:57:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.lastIndexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4339/pattern-ver1-serial/app.src.main.java.com.leafpic.app.utils.StringUtils.java-getPhotoNamebyPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:57:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf('e')+str.lastIndexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4339/pattern-ver1-serial/app.src.main.java.com.leafpic.app.utils.StringUtils.java-getPhotoNamebyPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:57:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
-mant=str;
+mant=null;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:57:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
-if(str.startsWith("--")){
+if(str.startsWith("--",2)){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2170/pattern-ver1-serial/tool.jtag.src.main.java.nl.lxtreme.ols.tool.jtag.JTAGDataSet.java-reportJTAGTdiData.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:57:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")){
+if(str.startsWith("0x",2)||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2170/pattern-ver1-serial/tool.jtag.src.main.java.nl.lxtreme.ols.tool.jtag.JTAGDataSet.java-reportJTAGTdiData.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:57:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")){
+if(str.startsWith("0x")||str.startsWith("-0x",2)){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2170/pattern-ver1-serial/tool.jtag.src.main.java.nl.lxtreme.ols.tool.jtag.JTAGDataSet.java-reportJTAGTdiData.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:57:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
-int decPos=str.indexOf('.');
+int decPos=str.indexOf('.',2);
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2170/pattern-ver1-serial/tool.jtag.src.main.java.nl.lxtreme.ols.tool.jtag.JTAGDataSet.java-reportJTAGTdiData.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:57:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf('e',2)+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2170/pattern-ver1-serial/tool.jtag.src.main.java.nl.lxtreme.ols.tool.jtag.JTAGDataSet.java-reportJTAGTdiData.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:57:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf('e')+str.indexOf('E',2)+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2170/pattern-ver1-serial/tool.jtag.src.main.java.nl.lxtreme.ols.tool.jtag.JTAGDataSet.java-reportJTAGTdiData.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:57:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
-if(decPos>-1){
+if(decPos>-2){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1609/pattern-ver1-serial/jsqlbox.src.main.java.com.github.drinkjava2.jsqlbox.Dao.java-executeQuiet.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:57:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
-if(expPos>-1){
+if(expPos>-2){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1609/pattern-ver1-serial/jsqlbox.src.main.java.com.github.drinkjava2.jsqlbox.Dao.java-executeQuiet.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:57:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-2&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1609/pattern-ver1-serial/jsqlbox.src.main.java.com.github.drinkjava2.jsqlbox.Dao.java-executeQuiet.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:57:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
+case 401 :
+
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/1693/pattern-ver1-serial/src.main.java.uk.ac.ic.wlgitbridge.snapshot.getdoc.GetDocResult.java-fromJSON.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:57:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
-return f;
+return decPos;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/6794/pattern-ver1-serial/java.src.main.java.net.auxesia.Population.java-getPopulation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:57:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
-return d;
+return decPos;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/6794/pattern-ver1-serial/java.src.main.java.net.auxesia.Population.java-getPopulation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:57:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
-return f;
+return decPos;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/6794/pattern-ver1-serial/java.src.main.java.net.auxesia.Population.java-getPopulation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:57:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
-return d;
+return decPos;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/6794/pattern-ver1-serial/java.src.main.java.net.auxesia.Population.java-getPopulation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:57:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+String numeric=mant.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V43/3712/pattern-ver1-serial/src.com.wrathOfLoD.Models.Entity.Character.Character.java-Character.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:58:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
-return f;
+return expPos;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V54/2147/pattern-ver1-serial/qclib.src.qclib.QubitRegister.java-getAmps.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:58:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
-return d;
+return expPos;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V54/2147/pattern-ver1-serial/qclib.src.qclib.QubitRegister.java-getAmps.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:58:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
+case 4 :
+
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/2088/pattern-ver1-serial/core.src.com.finalstand.game.Screens.PlayScreen.java-findCreepStartingPos.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:58:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite(lastChar)||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/6705/pattern-ver1-serial/Shapes.Field.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:58:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+if(!(d.isInfinite(lastChar)||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/6705/pattern-ver1-serial/Shapes.Field.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:58:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf('e')+str.indexOf('E')+3;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V12/4478/pattern-ver1-serial/src.holdem.HoldemGame.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:58:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<mant.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/2288/pattern-ver1-serial/src.view.GamePanel.java-GamePanel.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:58:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
+return decPos;
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/2280/pattern-ver1-serial/Project1.src.searchAlgorithms.BFS.java-search.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:58:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
+return expPos;
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/2280/pattern-ver1-serial/Project1.src.searchAlgorithms.BFS.java-search.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:58:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
+return expPos;
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/2280/pattern-ver1-serial/Project1.src.searchAlgorithms.BFS.java-search.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:58:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
+return expPos;
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/2280/pattern-ver1-serial/Project1.src.searchAlgorithms.BFS.java-search.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:58:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(str+lastChar);
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V20/6925/pattern-ver1-serial/src.MovieList.java-addMovie.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:58:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
-boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+Boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/934/pattern-ver1-serial/mifosng-provider.src.main.java.org.mifosplatform.accounting.journalentry.serialization.JournalEntryCommandFromApiJsonDeserializer.java-commandFromApiJson.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:58:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(str+decPos);
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/4130/pattern-ver1-serial/view.ProgramLoop.java-createNewUser.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:58:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(str+numeric);
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/4130/pattern-ver1-serial/view.ProgramLoop.java-createNewUser.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:58:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(str+mant);
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/4130/pattern-ver1-serial/view.ProgramLoop.java-createNewUser.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:58:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(str+dec);
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/4130/pattern-ver1-serial/view.ProgramLoop.java-createNewUser.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:58:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(str+exp);
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/4130/pattern-ver1-serial/view.ProgramLoop.java-createNewUser.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:58:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
+import java.util.Iterator;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
+
+case 5 :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V13/1378/pattern-ver1-serial/src.haven.OptWnd.java-changed.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:58:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
-if(decPos>-1){
+if(decPos>1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5133/pattern-ver1-serial/app.src.main.java.com.bignerdranch.android.photogallery.PhotoGalleryFragment.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:58:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
-if(expPos>-1){
+if(expPos>1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5133/pattern-ver1-serial/app.src.main.java.com.bignerdranch.android.photogallery.PhotoGalleryFragment.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:58:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5133/pattern-ver1-serial/app.src.main.java.com.bignerdranch.android.photogallery.PhotoGalleryFragment.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:58:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
-char lastChar=str.charAt(str.length()-1);
+ final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+ final String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:58:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
-String mant;
+ final String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+ final String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:58:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
-String dec;
+ final String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+ final String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:58:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
-String exp;
+ final String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+ final String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:58:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
-char lastChar=str.charAt(str.length()-1);
-String mant;
+ final char lastChar=str.charAt(str.length()-1);
+ final String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:59:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
-char lastChar=str.charAt(str.length()-1);
+ final char lastChar=str.charAt(str.length()-1);
 String mant;
-String dec;
+ final String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:59:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
-char lastChar=str.charAt(str.length()-1);
+ final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
-String exp;
+ final String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:59:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
-int decPos=str.indexOf('.');
+ final int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+ final String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:59:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+ final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+ final String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:59:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
-char lastChar=str.charAt(str.length()-1);
+ final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:59:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+ final String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
-Float f=createFloat(str);
+ final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5265/pattern-ver1-serial/src.main.java.org.lemming.modules.StoreLoader.java-addMetadata.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:59:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+ final String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
-Double d=createDouble(str);
+ final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5265/pattern-ver1-serial/src.main.java.org.lemming.modules.StoreLoader.java-addMetadata.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:59:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+ final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
-Float f=createFloat(str);
+ final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5265/pattern-ver1-serial/src.main.java.org.lemming.modules.StoreLoader.java-addMetadata.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:59:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+ final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
-Double d=createDouble(str);
+ final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5265/pattern-ver1-serial/src.main.java.org.lemming.modules.StoreLoader.java-addMetadata.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:59:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
-boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+ final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
-Float f=createFloat(str);
+ final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5265/pattern-ver1-serial/src.main.java.org.lemming.modules.StoreLoader.java-addMetadata.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:59:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
-boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+ final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
-Double d=createDouble(str);
+ final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5265/pattern-ver1-serial/src.main.java.org.lemming.modules.StoreLoader.java-addMetadata.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:59:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
-int decPos=str.indexOf('.');
+ int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
-Float f=createFloat(str);
+ Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:59:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
-char lastChar=str.charAt(str.length()-1);
+ char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
-Float f=createFloat(str);
+ Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:59:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+ String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
-Float f=createFloat(str);
+ Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:59:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+ int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
-Float f=createFloat(str);
+ Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:59:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+ int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
-Double d=createDouble(str);
+ Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:59:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
-int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+ int decPos=str.indexOf('.');
+ int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:59:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
-char lastChar=str.charAt(str.length()-1);
+ char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+ int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:59:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+ int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:59:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+ int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
-Double d=NumberUtils.createDouble(numeric);
+ Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:59:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
-return createLong(numeric);
+return null;
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:59:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
-String exp;
-int decPos=str.indexOf('.');
+ final String exp;
+ final int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/6331/pattern-ver1-serial/src.java.growthcraft.api.fishtrap.FishTrapEntry.java-getFishable.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:59:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
-char lastChar=str.charAt(str.length()-1);
+ final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+ final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/6331/pattern-ver1-serial/src.java.growthcraft.api.fishtrap.FishTrapEntry.java-getFishable.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:59:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
-String mant;
+ final String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+ final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/6331/pattern-ver1-serial/src.java.growthcraft.api.fishtrap.FishTrapEntry.java-getFishable.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 13:59:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
-int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+ final int decPos=str.indexOf('.');
+ final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/6749/pattern-ver1-serial/ml.src.main.java.com.spbsu.ml.data.tools.DynamicBinModelBuilder.java-DynamicBinModelBuilder.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:00:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+ final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/6749/pattern-ver1-serial/ml.src.main.java.com.spbsu.ml.data.tools.DynamicBinModelBuilder.java-DynamicBinModelBuilder.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:00:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+ final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
-Double d=NumberUtils.createDouble(numeric);
+ final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/6749/pattern-ver1-serial/ml.src.main.java.com.spbsu.ml.data.tools.DynamicBinModelBuilder.java-DynamicBinModelBuilder.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:00:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
-if(StringUtils.isBlank(str)){
+if(StringUtils.isBlank(str.trim())){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:00:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
-if(str.startsWith("--")){
+if(str.startsWith("--".trim())){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:00:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")){
+if(str.startsWith("0x".trim())||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:00:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")){
+if(str.startsWith("0x")||str.startsWith("-0x".trim())){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:00:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
-boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+boolean allZeros=isAllZeros(mant.trim())&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:00:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
-boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+boolean allZeros=isAllZeros(mant)&&isAllZeros(exp.trim());
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:00:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
-return createLong(numeric);
+return createLong(numeric.trim());
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:00:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
-mant=str;
+mant=str.trim();
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V12/7448/pattern-ver1-serial/DODO.src.Parser.Parser.java-setAddAttributes.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:00:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
+import java.util.Iterator;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
+if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)==-1||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:00:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
-if(decPos>-1){
+if(decPos>=-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
-if(expPos>-1){
+if(expPos>=-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/3236/pattern-ver1-serial/src.main.java.co.arcs.groove.basking.Cli.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:00:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
-if(decPos>-1){
+if(decPos>=-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>=-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/3236/pattern-ver1-serial/src.main.java.co.arcs.groove.basking.Cli.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:00:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
-if(decPos>-1){
-if(expPos>-1){
+if(decPos>=-1){
+if(expPos>=-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/3236/pattern-ver1-serial/src.main.java.co.arcs.groove.basking.Cli.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:00:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
-if(decPos>-1){
+if(decPos>=-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>=-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/3236/pattern-ver1-serial/src.main.java.co.arcs.groove.basking.Cli.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:00:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
-if(expPos>-1){
+if(expPos>=-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>=-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/3236/pattern-ver1-serial/src.main.java.co.arcs.groove.basking.Cli.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:00:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
-if(expPos>-1){
+if(expPos>=-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
-if(expPos>-1){
+if(expPos>=-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/3236/pattern-ver1-serial/src.main.java.co.arcs.groove.basking.Cli.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:00:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
+decPos++;
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:00:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
+decPos++;
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:00:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
+decPos++;
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:00:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
+expPos++;
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:00:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
+expPos++;
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:00:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
+expPos++;
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:00:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
+expPos++;
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:00:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
+expPos++;
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:01:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
+expPos++;
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:01:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
+decPos++;
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:01:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
+decPos++;
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:01:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
+expPos++;
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:01:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
+expPos++;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:01:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+expPos++;
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:01:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
+decPos++;
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:01:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
+decPos++;
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:01:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
+decPos++;
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:01:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
+expPos--;
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:01:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
+expPos--;
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:01:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
+decPos--;
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:01:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
+expPos--;
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:01:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
+expPos--;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:01:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
+expPos--;
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:01:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
+decPos--;
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:01:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
+expPos--;
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:01:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
+decPos--;
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:01:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
-if(expPos<decPos){
+if(expPos<=decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<=str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4679/pattern-ver1-serial/src.course.Grass.java-render.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:01:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
-if(expPos<decPos){
+if(expPos<=decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<=str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4679/pattern-ver1-serial/src.course.Grass.java-render.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:01:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<=str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<=str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4679/pattern-ver1-serial/src.course.Grass.java-render.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:01:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
+decPos--;
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:01:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
+expPos++;
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V68/5574/pattern-ver1-serial/no.ntnu.item.semesterassignment.src.no.ntnu.item.semesterassignment.taxidispatcher.TaxiDispatcher.java-getRequestQueuePosition.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:01:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
-return createLong(numeric);
+return (Number)createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5127/pattern-ver1-serial/com.buglabs.common.com.buglabs.bug.sysfs.BMIDevice.java-apply.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:01:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
-return createLong(numeric);
+return 0;
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V12/5321/pattern-ver1-serial/app.src.main.java.edu.gatech.johndoe.carecoordinator.community.UI.CommunityAdapter.java-compare.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:02:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(str.toLowerCase()+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/2848/pattern-ver1-serial/src.main.java.fraglab.school.typeahead.TypeAheadDaoImpl.java-findMatchingStreetNames.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:02:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(str.toLowerCase()+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/2848/pattern-ver1-serial/src.main.java.fraglab.school.typeahead.TypeAheadDaoImpl.java-findMatchingStreetNames.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:02:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(str.toLowerCase()+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/2848/pattern-ver1-serial/src.main.java.fraglab.school.typeahead.TypeAheadDaoImpl.java-findMatchingStreetNames.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:02:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
-return createLong(numeric);
+return -createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V39/501/pattern-ver1-serial/src.com.nutrons.recyclerush.OI.java-getOperatorJoystickY.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:02:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
-if(decPos>-1){
+if(decPos>3){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5511/pattern-ver1-serial/core.src.com.trumandeyoung.sprouts.GameRenderer.java-render.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:02:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
-if(expPos>-1){
+if(expPos>3){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5511/pattern-ver1-serial/core.src.com.trumandeyoung.sprouts.GameRenderer.java-render.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:02:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>3&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5511/pattern-ver1-serial/core.src.com.trumandeyoung.sprouts.GameRenderer.java-render.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:02:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")){
+if(str.startsWith("0x")&&str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()&&(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/3665/pattern-ver1-serial/org.bridgedb.uri.ws.server.src.org.bridgedb.ws.uri.WSUriInterfaceService.java-map.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:02:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")){
+if(str.startsWith("0x")&&str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+if(!(d.isInfinite()&&(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/3665/pattern-ver1-serial/org.bridgedb.uri.ws.server.src.org.bridgedb.ws.uri.WSUriInterfaceService.java-map.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:02:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")){
+if(str.startsWith("0x")&&str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()&&(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/3665/pattern-ver1-serial/org.bridgedb.uri.ws.server.src.org.bridgedb.ws.uri.WSUriInterfaceService.java-map.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:02:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")){
+if(str.startsWith("0x")&&str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
-if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+if(!(d.isInfinite()&&(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/3665/pattern-ver1-serial/org.bridgedb.uri.ws.server.src.org.bridgedb.ws.uri.WSUriInterfaceService.java-map.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:02:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")){
+if(str.startsWith("0x")&&str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
+if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'&&Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/3665/pattern-ver1-serial/org.bridgedb.uri.ws.server.src.org.bridgedb.ws.uri.WSUriInterfaceService.java-map.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:02:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
+if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'&&Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()&&(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/3665/pattern-ver1-serial/org.bridgedb.uri.ws.server.src.org.bridgedb.ws.uri.WSUriInterfaceService.java-map.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:02:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
-int decPos=str.indexOf('.');
+int decPos=str.indexOf((int)('.'));
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:02:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf((int)('e'))+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:02:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf('e')+str.indexOf((int)('E'))+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:02:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
-if(!Character.isDigit(lastChar)){
+if(!Character.isDigit((int)(lastChar))){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:02:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
+if(dec==null&&exp==null&&isDigits(numeric.substring((int)(1)))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:02:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
+if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt((int)(0))=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:02:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
+if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt((int)(0))))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:02:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
-mant=str;
+mant=str.toUpperCase();
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V7/4456/pattern-ver1-serial/src.main.java.com.codegen.model.ColumnDefinition.java-setDbColumnIdentifier.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:02:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite(decPos++)||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/2359/pattern-ver1-serial/rocketmq-store.src.main.java.com.alibaba.rocketmq.store.ha.HAService.java-doWaitTransfer.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:02:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+if(!(d.isInfinite(decPos++)||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/2359/pattern-ver1-serial/rocketmq-store.src.main.java.com.alibaba.rocketmq.store.ha.HAService.java-doWaitTransfer.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:02:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
-if(StringUtils.isBlank(str)){
+if(StringUtils.isBlank((str).toLowerCase())){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:02:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
-if(str.startsWith("--")){
+if(str.startsWith(("--").toLowerCase())){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:02:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")){
+if(str.startsWith(("0x").toLowerCase())||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:03:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")){
+if(str.startsWith("0x")||str.startsWith(("-0x").toLowerCase())){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:03:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
-boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+boolean allZeros=isAllZeros((mant).toLowerCase())&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:03:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
-boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+boolean allZeros=isAllZeros(mant)&&isAllZeros((exp).toLowerCase());
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:03:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
-return createLong(numeric);
+return createLong((numeric).toLowerCase());
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:03:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf('e')+str.indexOf('E')+(int)(1);
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/4690/pattern-ver1-serial/33_CDIO3.src.controller.DecisionController.java-askForDecision.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:03:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
-return createLong(numeric);
+return 1;
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V4/7202/pattern-ver1-serial/client.SurvivalGuide.src.ch.ethz.inf.vs.android.g54.a4.ui.TouchImageView.java-getPointerCount.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:03:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
+case 27 :
+
+return 5;
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V13/1889/pattern-ver1-serial/app.src.main.java.johan.laststraw.AiPatterns.java-getAiPatternNr.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:03:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
+expPos++;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2119/pattern-ver1-serial/src.field.initial.FieldConstructor.java-execute.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:03:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
+lastChar++;
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2119/pattern-ver1-serial/src.field.initial.FieldConstructor.java-execute.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:03:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
-if(expPos<decPos){
+if(lastChar<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&lastChar<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V2/4567/pattern-ver1-serial/18-Map.LunchList.src.apt.tutorial.RestaurantHelper.java-onUpgrade.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:03:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf('e')+str.indexOf('E')+-1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V12/4243/pattern-ver1-serial/app.src.main.java.com.ryanwedoff.senor.naoservercontroller.WalkFragment.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:03:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
-return createLong(numeric);
+return (Number)(createLong(numeric));
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:03:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
+while(true){
+
+}
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:03:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
+while(true){
+
+}
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:05:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
+while(true){
+
+}
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:05:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
-boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+boolean allZeros=(isAllZeros(mant))&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/4601/pattern-ver1-serial/core.src.by.matveev.rorty.entities.Robot.java-updateControlState.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:05:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
-char lastChar=str.charAt(str.length()-1);
+char lastChar=str.charAt(str.length()-2);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<str.length()-2){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/5377/pattern-ver1-serial/src.main.Map.java-setTempPos.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:05:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
-char lastChar=str.charAt(str.length()-1);
+char lastChar=str.charAt(str.length()-2);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+String numeric=str.substring(0,str.length()-2);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/5377/pattern-ver1-serial/src.main.Map.java-setTempPos.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:05:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
-char lastChar=str.charAt(str.length()-1);
+char lastChar=str.charAt(str.length()-2);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
-exp=str.substring(expPos+1,str.length()-1);
+exp=str.substring(expPos+1,str.length()-2);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/5377/pattern-ver1-serial/src.main.Map.java-setTempPos.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:05:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
-char lastChar=str.charAt(str.length()-1);
+char lastChar=str.charAt(str.length()-2);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<str.length()-2){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/5377/pattern-ver1-serial/src.main.Map.java-setTempPos.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:05:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<str.length()-2){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+String numeric=str.substring(0,str.length()-2);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/5377/pattern-ver1-serial/src.main.Map.java-setTempPos.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:05:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
-if(expPos>-1&&expPos<str.length()-1){
-exp=str.substring(expPos+1,str.length()-1);
+if(expPos>-1&&expPos<str.length()-2){
+exp=str.substring(expPos+1,str.length()-2);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/5377/pattern-ver1-serial/src.main.Map.java-setTempPos.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:05:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
-if(expPos>-1){
+if(expPos>=-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>=-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/4409/pattern-ver1-serial/client.psr.src.main.java.ru.kolaer.client.psr.mvp.presenter.impl.PMainPaneImpl.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:05:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
-if(expPos>-1){
+if(expPos>=-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>=-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/4409/pattern-ver1-serial/client.psr.src.main.java.ru.kolaer.client.psr.mvp.presenter.impl.PMainPaneImpl.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:05:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>=-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>=-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/4409/pattern-ver1-serial/client.psr.src.main.java.ru.kolaer.client.psr.mvp.presenter.impl.PMainPaneImpl.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:05:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
-if(expPos<decPos){
+if(expPos<=decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
-if(expPos>-1){
+if(expPos>=-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V21/1893/pattern-ver1-serial/com.eclipsesource.tabris.src.com.eclipsesource.tabris.internal.SwipeManager.java-isValidMove.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:05:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
-if(expPos<decPos){
+if(expPos<=decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>=-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V21/1893/pattern-ver1-serial/com.eclipsesource.tabris.src.com.eclipsesource.tabris.internal.SwipeManager.java-isValidMove.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:05:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
-if(expPos>-1){
-if(expPos<decPos){
+if(expPos>=-1){
+if(expPos<=decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V21/1893/pattern-ver1-serial/com.eclipsesource.tabris.src.com.eclipsesource.tabris.internal.SwipeManager.java-isValidMove.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:06:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
-if(expPos<decPos){
+if(expPos<=decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>=-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V21/1893/pattern-ver1-serial/com.eclipsesource.tabris.src.com.eclipsesource.tabris.internal.SwipeManager.java-isValidMove.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:06:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
-if(expPos>-1){
+if(expPos>=-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<=str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V21/1893/pattern-ver1-serial/com.eclipsesource.tabris.src.com.eclipsesource.tabris.internal.SwipeManager.java-isValidMove.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:06:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
-if(expPos>-1){
+if(expPos>=-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<=str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V21/1893/pattern-ver1-serial/com.eclipsesource.tabris.src.com.eclipsesource.tabris.internal.SwipeManager.java-isValidMove.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:06:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>=-1&&expPos<=str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V21/1893/pattern-ver1-serial/com.eclipsesource.tabris.src.com.eclipsesource.tabris.internal.SwipeManager.java-isValidMove.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:06:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>=-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<=str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V21/1893/pattern-ver1-serial/com.eclipsesource.tabris.src.com.eclipsesource.tabris.internal.SwipeManager.java-isValidMove.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:06:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
-if(expPos>-1){
+if(expPos>=-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<=str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V21/1893/pattern-ver1-serial/com.eclipsesource.tabris.src.com.eclipsesource.tabris.internal.SwipeManager.java-isValidMove.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:06:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
-if(expPos>-1){
+if(expPos>=-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<=str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V21/1893/pattern-ver1-serial/com.eclipsesource.tabris.src.com.eclipsesource.tabris.internal.SwipeManager.java-isValidMove.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:06:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
+if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)>0||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/2696/pattern-ver1-serial/src.main.java.br.com.provaServer.infrastructure.deserialization.gson.GsonDeserialization.java-isWithoutRoot.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:06:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
+return null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
+return null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/4615/pattern-ver1-serial/src.at.jku.ssw.cmm.launcher.AddProfileListener.java-mouseClicked.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:06:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
-boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+boolean allZeros=!isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/7575/pattern-ver1-serial/app.src.main.java.de.renekolb.loopinglouieextreme.PlayerProfiles.PlayerStatistics.java-updateTotalGamesPlayed.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:06:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
-if(str==null){
+if(StringUtils.isEmpty(str)){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/130/pattern-ver1-serial/yamj3-core.src.main.java.org.yamj.core.web.HTMLTools.java-replaceHtmlTags.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:06:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
+if(dec==null&&!dec.isEmpty()&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/997/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.computecontroller.impl.ucs.UcsDiscoveryWorker.java-deleteComputeLanBootImagePaths.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:06:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
-if(str==null){
+if(str.equals(null)){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/343/pattern-ver1-serial/src.gui.batches.ItemBatchView.java-selectProduct.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:06:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
-if(StringUtils.isBlank(str)){
+if(!StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/6908/pattern-ver1-serial/mainModule.src.backend.building.ProductionBuilding.java-canBuild.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:06:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
-if(str.startsWith("--")){
+if(!str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/6908/pattern-ver1-serial/mainModule.src.backend.building.ProductionBuilding.java-canBuild.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:07:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException("\n"+str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/7482/pattern-ver1-serial/src.com.perl5.lang.perl.idea.editor.PerlEnterHandlerDelegate.java-preprocessEnter.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:07:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException("\n"+str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/7482/pattern-ver1-serial/src.com.perl5.lang.perl.idea.editor.PerlEnterHandlerDelegate.java-preprocessEnter.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:07:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException("\n"+str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/7482/pattern-ver1-serial/src.com.perl5.lang.perl.idea.editor.PerlEnterHandlerDelegate.java-preprocessEnter.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:07:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
-String mant;
+ final String mant;
 String dec;
 String exp;
-int decPos=str.indexOf('.');
+ final int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
-Float f=createFloat(str);
+ final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:07:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
-String mant;
+ final String mant;
 String dec;
 String exp;
-int decPos=str.indexOf('.');
+ final int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
-Double d=createDouble(str);
+ final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:07:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
-String dec;
+ final String dec;
 String exp;
-int decPos=str.indexOf('.');
+ final int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
-Float f=createFloat(str);
+ final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:07:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
-String dec;
+ final String dec;
 String exp;
-int decPos=str.indexOf('.');
+ final int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
-Double d=createDouble(str);
+ final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:07:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
-char lastChar=str.charAt(str.length()-1);
-String mant;
+ final char lastChar=str.charAt(str.length()-1);
+ final String mant;
 String dec;
 String exp;
-int decPos=str.indexOf('.');
+ final int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:07:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
-char lastChar=str.charAt(str.length()-1);
+ final char lastChar=str.charAt(str.length()-1);
 String mant;
-String dec;
+ final String dec;
 String exp;
-int decPos=str.indexOf('.');
+ final int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:07:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
-String mant;
+ final String mant;
 String dec;
 String exp;
-int decPos=str.indexOf('.');
+ final int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:07:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
-String mant;
+ final String mant;
 String dec;
 String exp;
-int decPos=str.indexOf('.');
+ final int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
-Double d=NumberUtils.createDouble(numeric);
+ final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:07:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
-String dec;
+ final String dec;
 String exp;
-int decPos=str.indexOf('.');
+ final int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:07:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
-String dec;
+ final String dec;
 String exp;
-int decPos=str.indexOf('.');
+ final int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
-Double d=NumberUtils.createDouble(numeric);
+ final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:07:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+String numeric=str.substring(30-(0),str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/1792/pattern-ver1-serial/rangebar.src.com.appyvet.rangebar.RangeBar.java-onAnimationUpdate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:07:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
-char lastChar=str.charAt(str.length()-1);
+ final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
-int decPos=str.indexOf('.');
+ final int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
-Float f=createFloat(str);
+ final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3285/pattern-ver1-serial/project.core.src.se.computerscience.kelde.model.entities.EntityBat.java-getHeading.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:07:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
-char lastChar=str.charAt(str.length()-1);
+ final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
-int decPos=str.indexOf('.');
+ final int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
-Double d=createDouble(str);
+ final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3285/pattern-ver1-serial/project.core.src.se.computerscience.kelde.model.entities.EntityBat.java-getHeading.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:07:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
-char lastChar=str.charAt(str.length()-1);
+ final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
-int decPos=str.indexOf('.');
+ final int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+ final String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3285/pattern-ver1-serial/project.core.src.se.computerscience.kelde.model.entities.EntityBat.java-getHeading.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:07:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
-char lastChar=str.charAt(str.length()-1);
+ final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
-int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+ final int decPos=str.indexOf('.');
+ final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3285/pattern-ver1-serial/project.core.src.se.computerscience.kelde.model.entities.EntityBat.java-getHeading.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:07:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
-int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+ final int decPos=str.indexOf('.');
+ final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
-Float f=createFloat(str);
+ final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3285/pattern-ver1-serial/project.core.src.se.computerscience.kelde.model.entities.EntityBat.java-getHeading.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:07:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
-int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+ final int decPos=str.indexOf('.');
+ final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
-Double d=createDouble(str);
+ final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3285/pattern-ver1-serial/project.core.src.se.computerscience.kelde.model.entities.EntityBat.java-getHeading.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:07:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
-char lastChar=str.charAt(str.length()-1);
+ final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
-String exp;
-int decPos=str.indexOf('.');
+ final String exp;
+ final int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3285/pattern-ver1-serial/project.core.src.se.computerscience.kelde.model.entities.EntityBat.java-getHeading.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:08:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
-if(str==null){
+if(str.isEmpty()){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/7829/pattern-ver1-serial/app.src.main.java.de.tum.in.tumcampusapp.activities.TransportationDetailsActivity.java-onLoadInBackground.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:08:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
-char lastChar=str.charAt(str.length()-1);
-String mant;
+ final char lastChar=str.charAt(str.length()-1);
+ final String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+ final String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6059/pattern-ver1-serial/src.main.java.com.bandwidth.sdk.model.Conference.java-getMembers.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:08:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
-char lastChar=str.charAt(str.length()-1);
+ final char lastChar=str.charAt(str.length()-1);
 String mant;
-String dec;
+ final String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+ final String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6059/pattern-ver1-serial/src.main.java.com.bandwidth.sdk.model.Conference.java-getMembers.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:08:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
-char lastChar=str.charAt(str.length()-1);
+ final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
-String exp;
+ final String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+ final String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6059/pattern-ver1-serial/src.main.java.com.bandwidth.sdk.model.Conference.java-getMembers.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:08:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
-char lastChar=str.charAt(str.length()-1);
+ final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+ final String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6059/pattern-ver1-serial/src.main.java.com.bandwidth.sdk.model.Conference.java-getMembers.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:08:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
-char lastChar=str.charAt(str.length()-1);
+ final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+ final String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
-Double d=NumberUtils.createDouble(numeric);
+ final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6059/pattern-ver1-serial/src.main.java.com.bandwidth.sdk.model.Conference.java-getMembers.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:08:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
-char lastChar=str.charAt(str.length()-1);
+ final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+ final String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
-Float f=createFloat(str);
+ final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6059/pattern-ver1-serial/src.main.java.com.bandwidth.sdk.model.Conference.java-getMembers.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:08:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
+if(dec==null&&exp==null&&isDigits(numeric.substring(1).trim())&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:08:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
-char lastChar=str.charAt(str.length()-1);
+ @SuppressWarnings("UnusedAssignment") char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
-int decPos=str.indexOf('.');
+ @SuppressWarnings("UnusedAssignment") int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
-Float f=createFloat(str);
+ @SuppressWarnings("UnusedAssignment") Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:08:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
-char lastChar=str.charAt(str.length()-1);
+ @SuppressWarnings("UnusedAssignment") char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
-int decPos=str.indexOf('.');
+ @SuppressWarnings("UnusedAssignment") int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
-Double d=createDouble(str);
+ @SuppressWarnings("UnusedAssignment") Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:08:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
-int decPos=str.indexOf('.');
+ @SuppressWarnings("UnusedAssignment") int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+ @SuppressWarnings("UnusedAssignment") String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
-Float f=createFloat(str);
+ @SuppressWarnings("UnusedAssignment") Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:08:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
-int decPos=str.indexOf('.');
+ @SuppressWarnings("UnusedAssignment") int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+ @SuppressWarnings("UnusedAssignment") String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
-Double d=createDouble(str);
+ @SuppressWarnings("UnusedAssignment") Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:08:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
-char lastChar=str.charAt(str.length()-1);
-String mant;
+ @SuppressWarnings("UnusedAssignment") char lastChar=str.charAt(str.length()-1);
+ @SuppressWarnings("UnusedAssignment") String mant;
 String dec;
 String exp;
-int decPos=str.indexOf('.');
+ @SuppressWarnings("UnusedAssignment") int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
-char lastChar=str.charAt(str.length()-1);
+ @SuppressWarnings("UnusedAssignment") char lastChar=str.charAt(str.length()-1);
 String mant;
-String dec;
+ @SuppressWarnings("UnusedAssignment") String dec;
 String exp;
-int decPos=str.indexOf('.');
+ @SuppressWarnings("UnusedAssignment") int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:08:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
-char lastChar=str.charAt(str.length()-1);
+ @SuppressWarnings("UnusedAssignment") char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
-String exp;
-int decPos=str.indexOf('.');
+ @SuppressWarnings("UnusedAssignment") String exp;
+ @SuppressWarnings("UnusedAssignment") int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:08:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
-char lastChar=str.charAt(str.length()-1);
+ @SuppressWarnings("UnusedAssignment") char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
-int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+ @SuppressWarnings("UnusedAssignment") int decPos=str.indexOf('.');
+ @SuppressWarnings("UnusedAssignment") int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:08:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
-char lastChar=str.charAt(str.length()-1);
+ @SuppressWarnings("UnusedAssignment") char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
-int decPos=str.indexOf('.');
+ @SuppressWarnings("UnusedAssignment") int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
-boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+ @SuppressWarnings("UnusedAssignment") boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:08:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
-char lastChar=str.charAt(str.length()-1);
+ @SuppressWarnings("UnusedAssignment") char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
-int decPos=str.indexOf('.');
+ @SuppressWarnings("UnusedAssignment") int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
-boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+ @SuppressWarnings("UnusedAssignment") boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:08:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
+if(str!=null){
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
+}
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4155/pattern-ver1-serial/Calendar.src.edu.wpi.cs.wpisuitetng.modules.calendar.view.AddEventPanel.java-populateEvent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:08:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf('e')+1+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2703/pattern-ver1-serial/src.main.java.net.minecraftforge.common.interpreter.AST.java-apply.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:08:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+str=str;
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:08:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
+if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)+lastChar=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:08:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
+if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(lastChar=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5778/pattern-ver1-serial/src.main.java.cn.momia.mapi.api.AbstractIndexApi.java-getBanners.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:08:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
+if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(decPos=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5778/pattern-ver1-serial/src.main.java.cn.momia.mapi.api.AbstractIndexApi.java-getBanners.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:08:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
-String mant;
+ final String mant;
 String dec;
 String exp;
-int decPos=str.indexOf('.');
+ final int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+ final String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V18/5586/pattern-ver1-serial/querqy-core.src.main.java.querqy.CompoundCharSequence.java-subSequence.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:08:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
-String dec;
+ final String dec;
 String exp;
-int decPos=str.indexOf('.');
+ final int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+ final String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V18/5586/pattern-ver1-serial/querqy-core.src.main.java.querqy.CompoundCharSequence.java-subSequence.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:08:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
-String exp;
-int decPos=str.indexOf('.');
+ final String exp;
+ final int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+ final String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V18/5586/pattern-ver1-serial/querqy-core.src.main.java.querqy.CompoundCharSequence.java-subSequence.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:08:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
+if(numeric.isEmpty()){
+return null;
+}
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V35/2729/pattern-ver1-serial/davinci.src.main.java.cn.hadcn.davinci.image.DiskLruImageCache.java-getBitmap.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:08:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
+if(str!=null){
 if(str.startsWith("--")){
 return null;
+}
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/4672/pattern-ver1-serial/main.src.main.java.com.example.wduello.collectionmanager.ItemListFragment.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:08:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
-return createLong(numeric);
+return createLong(numeric)&0xff;
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/5603/pattern-ver1-serial/uk.ac.herts.SmartLab.XBee.Response.XBeeRx64Response.java-GetReceiveStatus.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:09:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
-mant=str;
+mant=str+": ";
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V59/1370/pattern-ver1-serial/src.main.java.net.jeebiss.spazz.Spazz.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:09:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
-if(str==null){
+if(true){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:09:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
-if(str.startsWith("--")){
+if(true){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:09:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
-if(StringUtils.isBlank(str)){
+if(true){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:09:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
-if(str.startsWith("--")){
+if(str.startsWith("--")==false){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:09:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
-if(StringUtils.isBlank(str)){
+if(StringUtils.isBlank(str)==false){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:09:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")){
+if(str.startsWith("0x")||!str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/6688/pattern-ver1-serial/src.MineralOre.java-update.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:10:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
+if(dec==null&&exp==null&&isDigits("https://myschool.ru.is/myschool/"+numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V56/3824/pattern-ver1-serial/MyRU.src.com.littleindian.myru.AssignmentDetailFragment.java-onCreateView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:10:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
+if(str!=null){
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
+}
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/4078/pattern-ver1-serial/com.profidatagroup.e4.advancedlaunch.src.ch.parisi.e4.advancedlaunch.tabs.LaunchTab.java-editLaunchConfiguration.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:10:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
+if("--"!=null){
 if(str.startsWith("--")){
 return null;
+}
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/4078/pattern-ver1-serial/com.profidatagroup.e4.advancedlaunch.src.ch.parisi.e4.advancedlaunch.tabs.LaunchTab.java-editLaunchConfiguration.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:10:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
-int decPos=str.indexOf('.');
+ final int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+ final String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
-Float f=createFloat(str);
+ final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V37/6206/pattern-ver1-serial/ColFusionServerBLL.src.main.java.edu.pitt.sis.exp.colfusion.bll.BasicTableBL.java-getAttachmentList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:10:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
-int decPos=str.indexOf('.');
+ final int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+ final String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
-Double d=createDouble(str);
+ final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V37/6206/pattern-ver1-serial/ColFusionServerBLL.src.main.java.edu.pitt.sis.exp.colfusion.bll.BasicTableBL.java-getAttachmentList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:10:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
+if(dec==null&&exp==null&&isDigits(numeric.substring(1)+" votes")&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2342/pattern-ver1-serial/app.src.main.java.com.example.abhishek.bookshareapp.ui.adapter.BooksAdapter.java-onBindViewHolder.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:10:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
-if(decPos>-1){
+if(decPos>-1/2){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/7651/pattern-ver1-serial/src.net.vicp.lylab.utils.cache.CacheContainer.java-exec.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:10:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
-if(expPos>-1){
+if(expPos>-1/2){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/7651/pattern-ver1-serial/src.net.vicp.lylab.utils.cache.CacheContainer.java-exec.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:10:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1/2&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/7651/pattern-ver1-serial/src.net.vicp.lylab.utils.cache.CacheContainer.java-exec.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:10:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
+if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)-1))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/4594/pattern-ver1-serial/EzSignin.app.src.main.java.signin.ez.ezsignin.MainActivity.java-populateFieldsWithRecord.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:10:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
+int a=0;
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:10:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
+int a=0;
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:10:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
+int a=0;
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:10:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
+int a=0;
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:10:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
+int a=0;
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:10:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
+int a=0;
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:10:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
+int a=0;
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:10:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
+int a=0;
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:10:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
+int a=0;
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:10:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
+int a=0;
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:10:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
+if(dec==null&&exp==null&&isDigits("There was a problem with the call to ManyWho: "+numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/1227/pattern-ver1-serial/sdk-core.src.main.java.com.manywho.sdk.RunService.java-executePost.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:10:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
-if(StringUtils.isBlank(str)){
+if(str!=null){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/691/pattern-ver1-serial/us.textrade.models.MatchesQueue.java-addTradeToQueue.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:10:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
-if(str.startsWith("--")){
+if("--"!=null){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/691/pattern-ver1-serial/us.textrade.models.MatchesQueue.java-addTradeToQueue.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:11:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
+String OUTSTRING="";
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:11:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
+String OUTSTRING="";
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:11:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
+String OUTSTRING="";
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:11:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
+String OUTSTRING="";
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:11:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
+String OUTSTRING="";
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:11:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
+String OUTSTRING="";
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:11:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
+String OUTSTRING="";
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:11:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
+String OUTSTRING="";
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:11:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
+String OUTSTRING="";
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:11:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
+String OUTSTRING="";
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:11:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
+if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)*1000))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/3175/pattern-ver1-serial/src.de.fuberlin.wiwiss.d2rq.server.D2RServer.java-describe.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:11:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
+if(str.isEmpty()){
+return null;
+}
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5856/pattern-ver1-serial/src.main.java.io.aif.associations.builder.ExperimentsConnectionsGraphReducer.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:11:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
+if(str.isEmpty()){
+return null;
+}
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5856/pattern-ver1-serial/src.main.java.io.aif.associations.builder.ExperimentsConnectionsGraphReducer.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:11:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
+if(str.isEmpty()){
+return null;
+}
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5856/pattern-ver1-serial/src.main.java.io.aif.associations.builder.ExperimentsConnectionsGraphReducer.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:11:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
+if(str.isEmpty()){
+return null;
+}
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5856/pattern-ver1-serial/src.main.java.io.aif.associations.builder.ExperimentsConnectionsGraphReducer.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:11:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
+if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit((int)(numeric.charAt(0))))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:11:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+String numeric=str.substring(Math.round(0),str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V16/7706/pattern-ver1-serial/pixi.src.main.java.org.openpixi.pixi.diagnostics.methods.ProjectedEnergyDensity.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:11:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
+if(dec==null&&exp==null&&isDigits((numeric.substring(1)).toLowerCase())&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:11:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf('e')+(int)(str.indexOf('E'))+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/4690/pattern-ver1-serial/33_CDIO3.src.controller.DecisionController.java-askForDecision.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:12:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf('e')+(str.indexOf('E')+1)+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/2277/pattern-ver1-serial/core.src.com.mygdx.dame.Token.java-jumpOver.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:12:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
-if(StringUtils.isBlank(str)){
+if(StringUtils.isBlank(str)==true){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:12:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
-if(str.startsWith("--")){
+if(str.startsWith("--")==true){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:12:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:12:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:12:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:12:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:12:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf('e')+-1+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V12/4243/pattern-ver1-serial/app.src.main.java.com.ryanwedoff.senor.naoservercontroller.WalkFragment.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:12:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
-if(str==null){
+if(str.equalsIgnoreCase(null)){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/409/pattern-ver1-serial/src.com.wasteofplastic.askyblock.ASkyBlock.java-loadPluginConfig.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:12:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
+if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(Math.abs(numeric.charAt(0))))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:12:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
-int decPos=str.indexOf('.');
+int decPos=str.indexOf(Math.abs('.'));
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:12:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf(Math.abs('e'))+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:12:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf('e')+str.indexOf(Math.abs('E'))+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:12:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
-if(!Character.isDigit(lastChar)){
+if(!Character.isDigit(Math.abs(lastChar))){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:12:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
+if(dec==null&&exp==null&&isDigits(numeric.substring(Math.abs(1)))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:12:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
+if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(Math.abs(0))=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:12:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
+if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(Math.abs(0))))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:12:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
+int indexSelection=0;
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:12:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+int indexSelection=0;
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:12:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
+int indexSelection=0;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:12:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
+int indexSelection=0;
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:12:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
+int indexSelection=0;
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:12:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+String numeric=str.substring(Math.max(0,str.length()-1),str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V11/4531/pattern-ver1-serial/rsen.src.main.java.com.rsen.github.common.L.java-i.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:13:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf('e')+3+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V12/4478/pattern-ver1-serial/src.holdem.HoldemGame.java-run.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:13:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+String numeric=str.substring(0*2,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5419/pattern-ver1-serial/android.src.com.lappard.android.screens.GameScreen.java-show.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:13:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
+str="";
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V39/1830/pattern-ver1-serial/SR03.src.java.controler.ActionQuestion.java-doGet.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:13:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
+if(dec==null&&exp==null&&isDigits("PATH: \n"+numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V43/1966/pattern-ver1-serial/obdEnergy.src.main.java.com.example.obdenergy.obdenergy.MainActivity.java-onStop.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:13:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
+if(dec==null&&exp==null&&isDigits(String.valueOf(numeric.substring(1)))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V37/4379/pattern-ver1-serial/src.main.java.st.alr.mqttitude.preferences.PreferencesBroker.java-onBindDialogView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:13:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
-int decPos=str.indexOf('.');
+int decPos=str.indexOf(str+1,'.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6767/pattern-ver1-serial/src.main.java.org.gedcom4j.writer.GedcomWriter.java-emitRepositoryCitation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:13:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf(str+1,'e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6767/pattern-ver1-serial/src.main.java.org.gedcom4j.writer.GedcomWriter.java-emitRepositoryCitation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:13:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf('e')+str.indexOf(str+1,'E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6767/pattern-ver1-serial/src.main.java.org.gedcom4j.writer.GedcomWriter.java-emitRepositoryCitation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:13:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
+int a=1;
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:13:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
+int a=1;
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:13:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
+int a=1;
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:13:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
+int a=1;
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:13:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
+int a=1;
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:13:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
+int a=1;
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:13:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
+int a=1;
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:13:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
+int a=1;
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:13:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
+int a=1;
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:13:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
+int a=1;
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:13:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
+if(dec==null&&exp==null&&isDigits(numeric.substring(1)+"/logout")&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V43/2012/pattern-ver1-serial/HTTPBank.src.ibm.controller.UserInfoChanger.java-doGet.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:13:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
+if(dec==null&&exp==null&&isDigits("\nDealer has: \n"+numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4064/pattern-ver1-serial/src.run.java-dealerScore.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:13:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
-char lastChar=str.charAt(str.length()-1);
+char lastChar=str.charAt(str.length()/2-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/384/pattern-ver1-serial/src.com.gmail.zhou1992228.building.BuildingEntity.java-getMidPos.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:13:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<str.length()/2-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/384/pattern-ver1-serial/src.com.gmail.zhou1992228.building.BuildingEntity.java-getMidPos.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:13:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+String numeric=str.substring(0,str.length()/2-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/384/pattern-ver1-serial/src.com.gmail.zhou1992228.building.BuildingEntity.java-getMidPos.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:13:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
+boolean b=true;
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:14:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
+boolean b=true;
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:14:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
+boolean b=true;
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:14:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
+boolean b=true;
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:14:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
+boolean b=true;
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:14:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
+boolean b=true;
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:14:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
+boolean b=true;
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:14:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
+boolean b=true;
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:14:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
+boolean b=true;
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:14:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
+boolean b=true;
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:14:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
+if(numeric.startsWith("ldaps")){
+}
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/7118/pattern-ver1-serial/gateway.engine.policies.src.main.java.io.apiman.gateway.engine.policies.auth.LDAPIdentityValidator.java-validate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:14:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
+if(str==null){
+return null;
+}
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:14:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
+if(str==null){
+return null;
+}
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:14:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
+if(str==null){
+return null;
+}
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:14:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
+if(str==null){
+return null;
+}
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:14:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
+if(str==null){
+return null;
+}
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:14:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
+if(str==null){
+return null;
+}
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:14:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
+if(str==null){
+return null;
+}
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:14:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
+if(str==null){
+return null;
+}
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:14:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
+if(str==null){
+return null;
+}
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:14:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
+if(str==null){
+return null;
+}
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:14:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
+if(numeric==null){
+return null;
+}
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/grib.src.main.java.ucar.nc2.grib.grib1.tables.NcepHtmlScraper.java-parseTable2.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:14:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+if(!allZeros){
+throw new NumberFormatException("マージ対象のファイルが一つも見つかりませんでした。");
+}
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/4688/pattern-ver1-serial/src.org.teachothers.fishwatchr.CommentList.java-merge.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:14:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
-if(str==null){
+if(str==null||str.isEmpty()){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/354/pattern-ver1-serial/hapi-fhir-base.src.main.java.ca.uhn.fhir.parser.XmlParser.java-encodeCompositeElementChildrenToStreamWriter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:14:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
+}
+if(str==null){
+return null;
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:15:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
+return null;
+}
+if(str==null){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:15:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
+}
+if(str==null){
+return null;
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:15:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
+if(str==null){
+return null;
+}
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:15:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
+if(str==null){
+return null;
+}
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:15:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
+if(lastChar==str.charAt(str.length()-1)){
+return decPos;
+}
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:15:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
+}
+if(str==null){
+return null;
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V45/2972/pattern-ver1-serial/app.src.main.java.com.nealyi.app.activity.UserProfileActivity.java-onActivityResult.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:15:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
-if(!Character.isDigit(lastChar)){
+if(!!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V53/1790/pattern-ver1-serial/src.main.java.syam.Honeychest.config.ConfigurationManager.java-checkver.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:15:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+if(numeric==null){
+return null;
+}
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/4291/pattern-ver1-serial/src.ar.edu.it.itba.pdc.Implementations.proxy.client.ProxyClientSelectorProtocol.java-handleWrite.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:15:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
+if("index".equals(str)){
+return 0;
+}
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:15:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
+if("index".equals(str)){
+return 0;
+}
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:15:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
+if("index".equals(str)){
+return 0;
+}
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:15:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
+if("index".equals(str)){
+return 0;
+}
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:15:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
+if("index".equals(str)){
+return 0;
+}
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:15:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
+if("index".equals(str)){
+return 0;
+}
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:15:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
+if("index".equals(str)){
+return 0;
+}
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:15:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
+if("index".equals(decPos)){
+return 0;
+}
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:15:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
+if("index".equals(expPos)){
+return 0;
+}
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:15:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
+if("index".equals(expPos)){
+return 0;
+}
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:15:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
+}
+if("&null".equals(str)){
+return null;
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:15:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
+}
+if("&null".equals(str)){
+return null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:15:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
+}
+if("&null".equals(str)){
+return null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:15:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
+}
+if("&null".equals(lastChar)){
+return null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:15:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
+}
+if("&null".equals(expPos)){
+return null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:15:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
+}
+if("&null".equals(expPos)){
+return null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:15:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
+}
+if("&null".equals(decPos)){
+return null;
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:15:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
+}
+if("&null".equals(mant)){
+return null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:15:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+String numeric=str.substring(0,30-(str.length()-1));
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/1792/pattern-ver1-serial/rangebar.src.com.appyvet.rangebar.RangeBar.java-onAnimationUpdate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:15:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
+mant=str;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1794/pattern-ver1-serial/src.com.olympicat.scheduleupdates.DataFactory.java-loadData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:15:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
+dec=null;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
-dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1794/pattern-ver1-serial/src.com.olympicat.scheduleupdates.DataFactory.java-loadData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:15:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
-char lastChar=str.charAt(str.length()-1);
+char lastChar=str.charAt(str.length()-1-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/250/pattern-ver1-serial/src.main.java.com.scienjus.client.PixivParserClient.java-buildGetUrl.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:15:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
+if(!(str==null)){
 if(str.startsWith("--")){
 return null;
+}
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/5193/pattern-ver1-serial/IJC_UI.src.nl.detoren.ijc.ui.view.Hoofdscherm.java-updateUpdateStandButton.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:16:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
+mant=str;
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
-mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/5647/pattern-ver1-serial/src.worms.model.statements.Print.java-executeStatement.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:16:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
+exp=null;
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
-exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/5647/pattern-ver1-serial/src.worms.model.statements.Print.java-executeStatement.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:16:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
-if(!Character.isDigit(lastChar)){
+if(true){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:16:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
-if(decPos>-1){
+if(true){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:16:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
-if(expPos>-1){
+if(true){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:16:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
-if(!Character.isDigit(lastChar)){
+if(!Character.isDigit(lastChar)==false){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:16:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
-mant=str;
 }
 dec=null;
+mant=str;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/2094/pattern-ver1-serial/src.main.java.com.dagobert_engine.core.service.UpdateService.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:16:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
-exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
+exp=null;
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/2094/pattern-ver1-serial/src.main.java.com.dagobert_engine.core.service.UpdateService.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:16:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
+if(numeric.equals("-1")){
+return null;
+}
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:16:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<str.length()){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V4/6999/pattern-ver1-serial/src.mop.MopData.java-str2Mop.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:16:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
-if(expPos>-1){
+if(expPos>-1||expPos==Long.MIN_VALUE){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:16:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
-if(decPos>-1){
+if(decPos>-1||decPos==Long.MIN_VALUE){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:16:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
-mant=str;
 }
+mant=str;
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:16:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
-mant=str;
+mant=str.replaceAll("\n","");
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/6059/pattern-ver1-serial/src.main.java.com.sequenceiq.cloudbreak.shell.commands.TemplateCommands.java-createAzureTemplate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:16:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
-mant=str;
+mant=(str).replace("\\","\\\\");
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1801/pattern-ver1-serial/Alfresco.Alfresco-EE-v5.0.AAAR-Alfresco-EE-v5.0-Repository.src.main.java.com.fcorti.aaar.GetNodesModifiedAfterWebScript.java-getCustomProperties.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:16:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
+if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)*-1))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1084/pattern-ver1-serial/Bank.src.entities.Account.java-returnLoan.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:16:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
-char lastChar=str.charAt(str.length()-1);
+char lastChar=str.charAt(str.length()-1*-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1084/pattern-ver1-serial/Bank.src.entities.Account.java-returnLoan.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:16:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+String numeric=str.substring(0,str.length()-1-22);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/2147/pattern-ver1-serial/src.main.java.ch.bfh.ti.projekt1.sokoban.view.GameWindowView.java-loadSolutionFile.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:16:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
-if(StringUtils.isBlank(str)){
+StringUtils vis=new StringUtils();
+if(vis.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V5/6385/pattern-ver1-serial/app.src.main.java.commdgriest.httpsgithub.wimk.Inventory.java-searchByName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:16:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
+System.out.println("Aucun siège disponible dans les conditions établies.");
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/3088/pattern-ver1-serial/src.model.DataAccess.java-book.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:16:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
+System.out.println("Aucun siège disponible dans les conditions établies.");
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/3088/pattern-ver1-serial/src.model.DataAccess.java-book.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:16:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
-char lastChar=str.charAt(str.length()-1);
+char lastChar=str.charAt(str.length()-1*1000);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/3175/pattern-ver1-serial/src.de.fuberlin.wiwiss.d2rq.server.D2RServer.java-describe.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:16:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
-exp=null;
 }
+exp=null;
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/2335/pattern-ver1-serial/app.src.main.java.swampthings.dems.LoginActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:16:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
-exp=null;
 }
+exp=null;
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/2335/pattern-ver1-serial/app.src.main.java.swampthings.dems.LoginActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:16:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
+if(str==null){
+return Double.NaN;
+}else {
 if(str.startsWith("--")){
 return null;
+}
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3795/pattern-ver1-serial/opentripplanner-routing.src.main.java.org.opentripplanner.routing.edgetype.PlainStreetEdge.java-calculateSpeed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:16:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
-char lastChar=str.charAt(str.length()-1);
+char lastChar=str.charAt((int)(str.length()-1));
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:17:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
-if(str.startsWith("--")){
+if(str.trim().startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")){
+if(str.trim().startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/5228/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.util.VPlexUtil.java-isDeviceStructureValid.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:17:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
-if(str.startsWith("--")){
+if(str.trim().startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")){
+if(str.startsWith("0x")||str.trim().startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/5228/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.util.VPlexUtil.java-isDeviceStructureValid.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:17:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")){
+if(str.trim().startsWith("0x")||str.trim().startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/5228/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.util.VPlexUtil.java-isDeviceStructureValid.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:17:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
+if(str==null){
+return null;
+}
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4925/pattern-ver1-serial/statemachine-persistence.src.main.java.de.teck.statemachine.persistence.model.TransitionGraph.java-addTransition.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:17:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
+if(str==null){
+return null;
+}
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4925/pattern-ver1-serial/statemachine-persistence.src.main.java.de.teck.statemachine.persistence.model.TransitionGraph.java-addTransition.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:17:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
+}
+if(str==null){
+return null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4925/pattern-ver1-serial/statemachine-persistence.src.main.java.de.teck.statemachine.persistence.model.TransitionGraph.java-addTransition.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:17:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
+}
+if(str==null){
+return null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4925/pattern-ver1-serial/statemachine-persistence.src.main.java.de.teck.statemachine.persistence.model.TransitionGraph.java-addTransition.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:17:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
+assert (str!=null);
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:17:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
+assert (str!=null);
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:17:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
+assert (str!=null);
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:17:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
+assert (str!=null);
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:17:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
+assert (str!=null);
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:17:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
+assert (str!=null);
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:17:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
+assert (str!=null);
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:17:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
+assert (str!=null);
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:17:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
+assert (str!=null);
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:17:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
+assert (str!=null);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:17:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
-throw new NumberFormatException(str+" is not a valid number.");
+throw new UnsupportedOperationException();
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/56/pattern-ver1-serial/core.src.main.java.lupos.datastructures.paged_dbbptree.DBBPTree.java-lastKey.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:17:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
+assert (!str.isEmpty());
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:17:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
+assert (!str.isEmpty());
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:17:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
+assert (!str.isEmpty());
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:17:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
+if(str.contains(str)){
+return null;
+}
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V43/6402/pattern-ver1-serial/src.edu.calpoly.android.imfree.DataStore.java-trueAddParseFriend.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:17:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
+if(str.contains(str)){
+return null;
+}
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V43/6402/pattern-ver1-serial/src.edu.calpoly.android.imfree.DataStore.java-trueAddParseFriend.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:17:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
+if(str.contains(str)){
+return null;
+}
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V43/6402/pattern-ver1-serial/src.edu.calpoly.android.imfree.DataStore.java-trueAddParseFriend.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:17:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+String numeric=str.substring(0,Math.round(str.length()-1));
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V16/7706/pattern-ver1-serial/pixi.src.main.java.org.openpixi.pixi.diagnostics.methods.ProjectedEnergyDensity.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:18:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
+if(str.equals(InputStream.class)){
+return decPos;
+}
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:18:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
+if(str.equals(InputStream.class)){
+return decPos;
+}
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:18:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
+if(str.equals(InputStream.class)){
+return decPos;
+}
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:18:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
+if(str.equals(InputStream.class)){
+return expPos;
+}
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:18:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
+if(str.equals(InputStream.class)){
+return expPos;
+}
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:18:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
+if(str.equals(InputStream.class)){
+return expPos;
+}
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:18:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
+if(str.equals(InputStream.class)){
+return expPos;
+}
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:18:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
+if(str.equals(InputStream.class)){
+return expPos;
+}
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:18:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
-if(expPos>-1){
+if(Double.isNaN(expPos)){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:18:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
-if(decPos>-1){
+if(Double.isNaN(decPos)){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:18:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
-if(!Character.isDigit(lastChar)){
+if(!Character.isDigit(lastChar)==true){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:18:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
+if(str!=null){
+if(str==null){
+return null;
+}
+if(StringUtils.isBlank(str)){
+throw new NumberFormatException("A blank string is not a valid number");
+}
+if(str.startsWith("--")){
+return null;
+}
+if(str.startsWith("0x")||str.startsWith("-0x")){
+return createInteger(str);
+}
+char lastChar=str.charAt(str.length()-1);
+String mant;
+String dec;
+String exp;
+int decPos=str.indexOf('.');
+int expPos=str.indexOf('e')+str.indexOf('E')+1;
+if(decPos>-1){
+if(expPos>-1){
+if(expPos<decPos){
+throw new NumberFormatException(str+" is not a valid number.");
+}
+dec=str.substring(decPos+1,expPos);
+}else {
+dec=str.substring(decPos+1);
+}
+mant=str.substring(0,decPos);
+}else {
+if(expPos>-1){
+mant=str.substring(0,expPos);
+}else {
+mant=str;
+}
+dec=null;
+}
+if(!Character.isDigit(lastChar)){
+if(expPos>-1&&expPos<str.length()-1){
+exp=str.substring(expPos+1,str.length()-1);
+}else {
+exp=null;
+}
+String numeric=str.substring(0,str.length()-1);
+boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+switch (lastChar){
+case 'l' :
+
+case 'L' :
+
+if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
+try{
+return createLong(numeric);
+}catch(NumberFormatException nfe){
+}
+return createBigInteger(numeric);
+}
+throw new NumberFormatException(str+" is not a valid number.");
+case 'f' :
+
+case 'F' :
+
+try{
+Float f=NumberUtils.createFloat(numeric);
+if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+return f;
+}
+}catch(NumberFormatException nfe){
+}
+case 'd' :
+
+case 'D' :
+
+try{
+Double d=NumberUtils.createDouble(numeric);
+if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+return d;
+}
+}catch(NumberFormatException nfe){
+}
+try{
+return createBigDecimal(numeric);
+}catch(NumberFormatException e){
+}
+default :
+
+throw new NumberFormatException(str+" is not a valid number.");
+}
+}else {
+if(expPos>-1&&expPos<str.length()-1){
+exp=str.substring(expPos+1,str.length());
+}else {
+exp=null;
+}
+if(dec==null&&exp==null){
+try{
+return createInteger(str);
+}catch(NumberFormatException nfe){
+}
+try{
+return createLong(str);
+}catch(NumberFormatException nfe){
+}
+return createBigInteger(str);
+}else {
+boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+try{
+Float f=createFloat(str);
+if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+return f;
+}
+}catch(NumberFormatException nfe){
+}
+try{
+Double d=createDouble(str);
+if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+return d;
+}
+}catch(NumberFormatException nfe){
+}
+return createBigDecimal(str);
+}
+}
+}
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:18:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
+if(dec==null&&dec.length()>0&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/2471/pattern-ver1-serial/plugins.org.obeonetwork.dsl.uml2.properties.src.org.obeonetwork.dsl.uml2.properties.service.TableLabelService.java-caseName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:18:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
-char lastChar=str.charAt(str.length()-1);
+char lastChar=str.charAt(Math.abs(str.length()-1));
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:18:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
+}
+if(str.contains(str)){
+return null;
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/6336/pattern-ver1-serial/app.src.main.java.com.example.martin.nextflight.managers.FileManager.java-addFlight.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:18:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
+if(str.contains(str)){
+return null;
+}
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/6336/pattern-ver1-serial/app.src.main.java.com.example.martin.nextflight.managers.FileManager.java-addFlight.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:18:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
+}
+if(str.contains(str)){
+return null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/6336/pattern-ver1-serial/app.src.main.java.com.example.martin.nextflight.managers.FileManager.java-addFlight.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:19:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
+}
+if(str.contains(str)){
+return null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/6336/pattern-ver1-serial/app.src.main.java.com.example.martin.nextflight.managers.FileManager.java-addFlight.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:19:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
+assert (!str.isEmpty());
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getOptionalStringArrayParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:19:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
+assert (!str.isEmpty());
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getOptionalStringArrayParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:19:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
+assert (!str.isEmpty());
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getOptionalStringArrayParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:19:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
+assert (!str.isEmpty());
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getOptionalStringArrayParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:19:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
+throw new NumberFormatException("duplicate local variable "+str);
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/583/pattern-ver1-serial/src.net.fudev.laye.codegen.FunctionPrototypeBuilder.java-addLocal.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:19:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
+throw new NumberFormatException("duplicate local variable "+str);
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/583/pattern-ver1-serial/src.net.fudev.laye.codegen.FunctionPrototypeBuilder.java-addLocal.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:19:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
+throw new NumberFormatException("duplicate local variable "+str);
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/583/pattern-ver1-serial/src.net.fudev.laye.codegen.FunctionPrototypeBuilder.java-addLocal.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:19:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
-if(StringUtils.isBlank(str)){
+StringUtils utils=new StringUtils();
+if(utils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V26/5772/pattern-ver1-serial/RunQuery.src.retrieWin.PatternBuilder.Aju.java-runBootStrapforEntityAndNER.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:19:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+String numeric=str.substring(0,Math.max(0,str.length()-1));
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V11/4531/pattern-ver1-serial/rsen.src.main.java.com.rsen.github.common.L.java-i.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:19:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
-if(StringUtils.isBlank(str)){
+if(StringUtils.isBlank(str.trim())){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
-return createInteger(str);
+return createInteger(str.trim());
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/7016/pattern-ver1-serial/ClassApplication.src.main.java.com.exam.ViewExamAnsAction.java-performBaseAction.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:19:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
-if(StringUtils.isBlank(str)){
+if(StringUtils.isBlank(str.trim())){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
-return createInteger(str);
+return createInteger(str.trim());
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/7016/pattern-ver1-serial/ClassApplication.src.main.java.com.exam.ViewExamAnsAction.java-performBaseAction.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:19:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
-if(StringUtils.isBlank(str)){
+if(StringUtils.isBlank(str.trim())){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
-return createLong(str);
+return createLong(str.trim());
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/7016/pattern-ver1-serial/ClassApplication.src.main.java.com.exam.ViewExamAnsAction.java-performBaseAction.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:20:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
-if(StringUtils.isBlank(str)){
+if(StringUtils.isBlank(str.trim())){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
-return createBigInteger(str);
+return createBigInteger(str.trim());
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/7016/pattern-ver1-serial/ClassApplication.src.main.java.com.exam.ViewExamAnsAction.java-performBaseAction.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:20:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
-if(StringUtils.isBlank(str)){
+if(StringUtils.isBlank(str.trim())){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
-Float f=createFloat(str);
+Float f=createFloat(str.trim());
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/7016/pattern-ver1-serial/ClassApplication.src.main.java.com.exam.ViewExamAnsAction.java-performBaseAction.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:20:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
-if(StringUtils.isBlank(str)){
+if(StringUtils.isBlank(str.trim())){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
-Double d=createDouble(str);
+Double d=createDouble(str.trim());
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/7016/pattern-ver1-serial/ClassApplication.src.main.java.com.exam.ViewExamAnsAction.java-performBaseAction.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:20:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
-if(StringUtils.isBlank(str)){
+if(StringUtils.isBlank(str.trim())){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
-return createBigDecimal(str);
+return createBigDecimal(str.trim());
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/7016/pattern-ver1-serial/ClassApplication.src.main.java.com.exam.ViewExamAnsAction.java-performBaseAction.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:20:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
-boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+boolean allZeros=isAllZeros(mant.trim())&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
-boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+boolean allZeros=isAllZeros(mant.trim())&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/7016/pattern-ver1-serial/ClassApplication.src.main.java.com.exam.ViewExamAnsAction.java-performBaseAction.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:20:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
-boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+boolean allZeros=isAllZeros(mant)&&isAllZeros(exp.trim());
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
-boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+boolean allZeros=isAllZeros(mant)&&isAllZeros(exp.trim());
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/7016/pattern-ver1-serial/ClassApplication.src.main.java.com.exam.ViewExamAnsAction.java-performBaseAction.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:20:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+String numeric=str.substring(0,str.length()-1*2);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5419/pattern-ver1-serial/android.src.com.lappard.android.screens.GameScreen.java-show.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:20:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
+assert (numeric!=str.substring(0,str.length()-1));
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:20:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+assert (allZeros!=isAllZeros(mant)&&isAllZeros(exp));
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:20:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
+}
+if(numeric==null){
+return null;
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/5092/pattern-ver1-serial/app.src.main.java.neeedo.imimaprx.htw.de.neeedo.fragments.SingleDemandFragmentSwiper.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:20:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
+}
+if(numeric==null){
+return null;
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/5092/pattern-ver1-serial/app.src.main.java.neeedo.imimaprx.htw.de.neeedo.fragments.SingleDemandFragmentSwiper.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:20:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+String numeric=str.substring(0,str.length()-1+1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/7285/pattern-ver1-serial/jm-prta-parser.src.main.java.org.meyerlab.nopence.jm_prta_parser.attributes.NumericAttribute.java-getBinByValue.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:20:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
+assert (str!=null);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:20:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
+assert (str!=null);
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:20:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
+assert (str!=null);
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:20:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
+assert (str!=null);
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:20:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
+assert (str!=null);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:20:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
+assert (str!=null);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:20:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
+assert (str!=null);
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:20:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
+if(str.isEmpty()){
+throw new NumberFormatException("Title must not be empty!");
+}
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:20:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
+}
+if(str.isEmpty()){
+throw new NumberFormatException("Title must not be empty!");
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:20:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
+if(str.isEmpty()){
+throw new NumberFormatException("Title must not be empty!");
+}
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:20:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
-if(str==null){
+if(str==null||"查看红包".equals(str)){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:20:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
-if(expPos>-1){
+if(expPos>-1||"查看红包".equals(expPos)){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:20:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
-if(decPos>-1){
+if(decPos>-1||"查看红包".equals(decPos)){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:20:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
-if(decPos>-1){
+if(decPos>-1||decPos==3){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:20:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
-if(expPos>-1){
+if(expPos>-1||expPos==3){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:20:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
+if(str==null){
+throw new NumberFormatException("player is not initialised, game might not be started");
+}
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:21:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
+}
+if(str==null){
+throw new NumberFormatException("player is not initialised, game might not be started");
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:21:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
-if(str.startsWith("--")){
+if(str!=null&&str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5865/pattern-ver1-serial/gde-webapp.src.main.java.com.nagarro.gde.validator.UserInternaturValidator.java-validateRequiredData.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:21:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
+if(expPos>7){
+throw new NumberFormatException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:21:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
+if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.isEmpty()||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/2616/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.mapper.functions.MapNetwork.java-toNetworkRestRep.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:21:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
+}
+if(str.isEmpty()){
+str=null;
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:21:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
+}
+if(str.isEmpty()){
+str=null;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:21:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
+}
+if(str.isEmpty()){
+str=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:21:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
+if(str.isEmpty()){
+str=null;
+}
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:21:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
+}
+if(str.isEmpty()){
+str=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:21:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
+if(str.isEmpty()){
+str=null;
+}
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:21:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
+if(str.isEmpty()){
+str=null;
+}
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:21:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+if(str.isEmpty()){
+str=null;
+}
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:21:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
+}
+if(str.isEmpty()){
+str=null;
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:21:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
-if(str==null){
+if(str==null||str==""){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V38/7341/pattern-ver1-serial/log210_webproject_BDD.src.RechercheLivre.java-RechercheLivre.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:21:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
-if(expPos>-1){
+if(expPos<0||expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:21:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
-if(decPos>-1){
+if(decPos<0||decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:21:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
-dec=str.substring(decPos+1);
+dec=str;
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/1236/pattern-ver1-serial/providers.dynect.src.main.java.org.jclouds.dynect.v3.domain.Zone.java-Zone.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:21:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
-if(str.startsWith("--")){
+if(str.startsWith("--")||str.startsWith("https://")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V29/5632/pattern-ver1-serial/components.formats-common.src.loci.common.Location.java-getHandle.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:21:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")){
+if(str.startsWith("0x")||str.equals("manufacturedOn")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V37/509/pattern-ver1-serial/product-validation-system-war.src.main.java.com.pvs.web.freemarker.processors.ProductTemplateRegistrationProcessor.java-postHTML.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:21:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
+if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||numeric.equals("manufacturedOn")||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V37/509/pattern-ver1-serial/product-validation-system-war.src.main.java.com.pvs.web.freemarker.processors.ProductTemplateRegistrationProcessor.java-postHTML.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:21:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
+if(str.trim().isEmpty()){
+throw new NumberFormatException("API username cannot be empty");
+}
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/216/pattern-ver1-serial/src.main.java.me.legrange.mikrotik.impl.ApiConnectionImpl.java-login.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:21:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
+if(str.trim().isEmpty()){
+throw new NumberFormatException("API username cannot be empty");
+}
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/216/pattern-ver1-serial/src.main.java.me.legrange.mikrotik.impl.ApiConnectionImpl.java-login.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:21:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
+if(str.trim().isEmpty()){
+throw new NumberFormatException("API username cannot be empty");
+}
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/216/pattern-ver1-serial/src.main.java.me.legrange.mikrotik.impl.ApiConnectionImpl.java-login.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:22:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
+if(str.trim().isEmpty()){
+throw new NumberFormatException("API username cannot be empty");
+}
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/216/pattern-ver1-serial/src.main.java.me.legrange.mikrotik.impl.ApiConnectionImpl.java-login.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:22:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
+if(str.trim().isEmpty()){
+throw new NumberFormatException("API username cannot be empty");
+}
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/216/pattern-ver1-serial/src.main.java.me.legrange.mikrotik.impl.ApiConnectionImpl.java-login.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:22:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
+if(str.trim().isEmpty()){
+throw new NumberFormatException("API username cannot be empty");
+}
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/216/pattern-ver1-serial/src.main.java.me.legrange.mikrotik.impl.ApiConnectionImpl.java-login.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:22:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
-if(str.startsWith("--")){
+if(str.startsWith("--")||str.startsWith("$Proxy")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V12/6211/pattern-ver1-serial/agent-parent.agent.src.main.java.org.glowroot.agent.weaving.WeavingClassFileTransformer.java-ignoreClass.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:22:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
+if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||!Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/6688/pattern-ver1-serial/src.MineralOre.java-update.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:22:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos>=0&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1272/pattern-ver1-serial/rest-provider.src.main.java.org.jboss.pressgang.ccms.proxy.RESTCSRelatedNodeV1ProxyHandler.java-internalInvoke.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:22:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
-if(str.startsWith("--")){
+if((str!=null)&&(str.startsWith("--"))){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/4845/pattern-ver1-serial/app.src.main.java.hu.bme.aut.szabolcs.szokol.countryinfo.ui.main.MainActivity.java-onBackPressed.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:22:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
+}
+if(str==null){
+throw new NumberFormatException("connection offline");
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/7367/pattern-ver1-serial/mhu-lib-jms.src.main.java.de.mhus.lib.jms.ServerJms.java-open.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:22:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
+if(str==null){
+throw new NumberFormatException("connection offline");
+}
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/7367/pattern-ver1-serial/mhu-lib-jms.src.main.java.de.mhus.lib.jms.ServerJms.java-open.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:22:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
+Float f=createFloat(str);
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
-Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2803/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.index.hashindex.local.OHashTableDirectory.java-deleteWithoutOpen.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:22:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
+Double d=createDouble(str);
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
-Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2803/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.index.hashindex.local.OHashTableDirectory.java-deleteWithoutOpen.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:22:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
-if(expPos>-1&&expPos<str.length()-1){
+if((expPos>-1||expPos=='\'')&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/6625/pattern-ver1-serial/src.com.google.javascript.jscomp.CodeConsumer.java-add.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:22:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
-return createLong(numeric);
+return createLong(numeric)==null?0:createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/2889/pattern-ver1-serial/dbclient.src.main.java.com.emc.storageos.db.client.model.VirtualPool.java-getRpRpoValue.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:22:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
-if(expPos>-1){
+if(expPos>-1||expPos==0){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:22:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
-if(decPos>-1){
+if(decPos>-1||decPos==0){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:22:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
-if(expPos>-1){
+if(expPos>-1||expPos>9){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:22:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
-if(decPos>-1){
+if(decPos>-1||decPos>9){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:22:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(str+" is not a valid number."+" -u "+str);
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:22:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:22:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:22:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:22:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:22:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:22:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
-if(decPos>-1){
+if(decPos>-1&&decPos<4000000){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:23:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
-if(expPos>-1){
+if(expPos>-1&&expPos<4000000){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:23:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
-if(str==null){
+if(str==null||str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4704/pattern-ver1-serial/src.main.java.com.alibaba.fastjson.parser.ParserConfig.java-createJavaBeanDeserializer.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:23:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
-if(str==null){
+if(str==null||str.trim().isEmpty()){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1097/pattern-ver1-serial/src.bakatxt.core.BakaProcessor.java-editEndTime.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:23:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
+import java.util.LinkedList;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
+Character pcb=new Character(lastChar);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
-if(!Character.isDigit(lastChar)){
+if(!pcb.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7301/pattern-ver1-serial/src.simulator.FCFSKernel.java-loadProgram.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 1, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:23:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
+if(dec==null&&exp==null&&isDigits(numeric==null?null:numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V31/4299/pattern-ver1-serial/client.synapseJavaClient.src.main.java.org.sagebionetworks.client.SynapseClientImpl.java-uploadToS3FileHandle.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:23:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
+if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric==null?null:numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V31/4299/pattern-ver1-serial/client.synapseJavaClient.src.main.java.org.sagebionetworks.client.SynapseClientImpl.java-uploadToS3FileHandle.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:23:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
-if(expPos>-1){
+if(expPos>-1&&expPos!=9999){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:23:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
-if(decPos>-1){
+if(decPos>-1&&decPos!=9999){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:23:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
-if(expPos>-1){
+if(-1>0&&expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:23:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
-if(decPos>-1){
+if(-1>0&&decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:23:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
-if(str.startsWith("--")){
+if(str==null||str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/443/pattern-ver1-serial/bundles.opaeum-compilation.org.opaeum.compilation.java.src.org.opaeum.javageneration.bpm.actions.AbstractProtectedNodeBuilder.java-implementCallbackOnComplete.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:23:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
+if(dec==null&&exp==null&&isDigits(numeric!=null?numeric.substring(1):null)&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/4302/pattern-ver1-serial/src.com.floreantpos.model.KitchenTicket.java-fromTicket.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:23:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
+if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric!=null?numeric.charAt(0):null))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/4302/pattern-ver1-serial/src.com.floreantpos.model.KitchenTicket.java-fromTicket.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:23:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")){
+if(str.startsWith("0x")||(str!=null&&str.startsWith("-0x"))){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/2463/pattern-ver1-serial/src.Level.java-collides.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:23:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:23:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:23:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:23:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:23:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
+if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&("Chrome".equals(numeric.charAt(0))||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/4219/pattern-ver1-serial/src.browsermator.com.STAppController.java-itemStateChanged.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:23:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
+return null;
+}
+if(str.isEmpty()){
+System.out.println("Team has to have a name");
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:23:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
+}
+if(str.isEmpty()){
+System.out.println("Team has to have a name");
+return null;
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:23:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
+if(str.isEmpty()){
+System.out.println("Team has to have a name");
+return null;
+}
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:23:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
+}
+if(str.isEmpty()){
+System.out.println("Team has to have a name");
+return null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:23:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
+}
+if(str.isEmpty()){
+System.out.println("Team has to have a name");
+return null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:24:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
+if(numeric.isEmpty()){
+System.out.println("Team has to have a name");
+return null;
+}
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:24:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
+assert (str!=null):"Appointments day is not allowed to be null!";
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:24:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
+assert (str!=null):"Appointments day is not allowed to be null!";
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:24:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
+assert (str!=null):"Appointments day is not allowed to be null!";
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:24:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
+assert (str!=null):"Appointments day is not allowed to be null!";
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:24:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
+assert (str!=null):"Appointments day is not allowed to be null!";
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:24:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
+assert (str!=null):"Appointments day is not allowed to be null!";
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:24:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
+assert (str!=null):"Appointments day is not allowed to be null!";
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:24:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
+assert (str!=null):"Appointments day is not allowed to be null!";
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:24:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
+assert (str!=null):"Appointments day is not allowed to be null!";
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:24:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
+assert (str!=null):"Appointments day is not allowed to be null!";
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:24:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
+import java.util.HashSet;
+
+import java.util.Collections;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
+}
+if(str.isEmpty()){
+str=null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/6949/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.db_models.DBUserProfile.java-removeConversationId.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:24:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
+import java.util.HashSet;
+
+import java.util.Collections;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
+if(str.isEmpty()){
+str=null;
+}
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/6949/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.db_models.DBUserProfile.java-removeConversationId.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:24:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
+import java.util.HashSet;
+
+import java.util.Collections;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
+}
+if(str.isEmpty()){
+str=null;
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/6949/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.db_models.DBUserProfile.java-removeConversationId.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:24:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
+if(numeric.equals("")){
+numeric="Manchester United FC";
+}
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V11/4958/pattern-ver1-serial/FootballScores.app.src.main.java.barqsoft.footballscores.widget.ScoresWidgetIntentService.java-onHandleIntent.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:24:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
+if(dec==null&&dec.length()>0&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/774/pattern-ver1-serial/android_studio_proj.MyWeatherApp.app.src.main.java.jmtechsvcs.myweatherapp.utilspkg.WeatherAppUtils.java-getDefaultStringDisplayString.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:24:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(str+" is not a valid number."+",");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(str+" is not a valid number."+",");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/3838/pattern-ver1-serial/Chess.src.CSE712.java-WriteFENToFile.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:24:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(str+" is not a valid number."+",");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(str+" is not a valid number."+",");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/3838/pattern-ver1-serial/Chess.src.CSE712.java-WriteFENToFile.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:24:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
+if(dec.equals(null)&&exp.equals(null)&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/4279/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.plugins.discovery.smis.processor.LunMaskingProcessor.java-addIoLimitsOnVolume.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:24:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
+ final String dropStatement=str+" is not a valid number.";
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(dropStatement);
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6019/pattern-ver1-serial/src.main.java.nz.co.gregs.dbvolution.internal.h2.MultiPoint2DFunctions.java-add.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:24:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
+ final String dropStatement=str+" is not a valid number.";
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(dropStatement);
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6019/pattern-ver1-serial/src.main.java.nz.co.gregs.dbvolution.internal.h2.MultiPoint2DFunctions.java-add.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:24:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
+ final String dropStatement=str+" is not a valid number.";
 if(expPos>-1){
 if(expPos<decPos){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(dropStatement);
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6019/pattern-ver1-serial/src.main.java.nz.co.gregs.dbvolution.internal.h2.MultiPoint2DFunctions.java-add.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:24:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
+ final String dropStatement=str+" is not a valid number.";
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(dropStatement);
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6019/pattern-ver1-serial/src.main.java.nz.co.gregs.dbvolution.internal.h2.MultiPoint2DFunctions.java-add.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:24:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
+ final String dropStatement=str+" is not a valid number.";
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(dropStatement);
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6019/pattern-ver1-serial/src.main.java.nz.co.gregs.dbvolution.internal.h2.MultiPoint2DFunctions.java-add.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:24:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
+ final String dropStatement=str+" is not a valid number.";
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(dropStatement);
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6019/pattern-ver1-serial/src.main.java.nz.co.gregs.dbvolution.internal.h2.MultiPoint2DFunctions.java-add.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:24:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
+String loc=str+" is not a valid number.";
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(loc);
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/5610/pattern-ver1-serial/app.src.main.java.com.toddburgessmedia.stackoverflowretrofit.MeetupActivity.java-onNext.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:24:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
+String loc=str+" is not a valid number.";
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(loc);
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/5610/pattern-ver1-serial/app.src.main.java.com.toddburgessmedia.stackoverflowretrofit.MeetupActivity.java-onNext.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:24:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
+String loc=str+" is not a valid number.";
 if(expPos>-1){
 if(expPos<decPos){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(loc);
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/5610/pattern-ver1-serial/app.src.main.java.com.toddburgessmedia.stackoverflowretrofit.MeetupActivity.java-onNext.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:24:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
+String loc=str+" is not a valid number.";
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(loc);
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/5610/pattern-ver1-serial/app.src.main.java.com.toddburgessmedia.stackoverflowretrofit.MeetupActivity.java-onNext.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:25:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
-throw new NumberFormatException(str+" is not a valid number.");
+String loc=str+" is not a valid number.";
+throw new NumberFormatException(loc);
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/5610/pattern-ver1-serial/app.src.main.java.com.toddburgessmedia.stackoverflowretrofit.MeetupActivity.java-onNext.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:25:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
+String loc=str+" is not a valid number.";
 if(expPos<decPos){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(loc);
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/5610/pattern-ver1-serial/app.src.main.java.com.toddburgessmedia.stackoverflowretrofit.MeetupActivity.java-onNext.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:25:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
+String loc=str+" is not a valid number.";
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(loc);
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/5610/pattern-ver1-serial/app.src.main.java.com.toddburgessmedia.stackoverflowretrofit.MeetupActivity.java-onNext.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:25:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
-if(decPos>-1){
+if(decPos>-1-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
-if(expPos>-1){
+if(expPos>-1-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5164/pattern-ver1-serial/roguelikeengine-libgdx.src.com.game.libgdx.roguelikeengine.Bullet.java-update.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:25:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
-if(decPos>-1){
+if(decPos>-1-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5164/pattern-ver1-serial/roguelikeengine-libgdx.src.com.game.libgdx.roguelikeengine.Bullet.java-update.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:25:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
-if(decPos>-1){
-if(expPos>-1){
+if(decPos>-1-1){
+if(expPos>-1-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5164/pattern-ver1-serial/roguelikeengine-libgdx.src.com.game.libgdx.roguelikeengine.Bullet.java-update.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:25:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
-if(decPos>-1){
+if(decPos>-1-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5164/pattern-ver1-serial/roguelikeengine-libgdx.src.com.game.libgdx.roguelikeengine.Bullet.java-update.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:25:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
-if(expPos>-1){
+if(expPos>-1-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5164/pattern-ver1-serial/roguelikeengine-libgdx.src.com.game.libgdx.roguelikeengine.Bullet.java-update.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:25:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
-if(expPos>-1){
+if(expPos>-1-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
-if(expPos>-1){
+if(expPos>-1-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5164/pattern-ver1-serial/roguelikeengine-libgdx.src.com.game.libgdx.roguelikeengine.Bullet.java-update.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:25:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+if(numeric.equals("127.0.0.1")){
+numeric="114.113.202.141";
+}
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/5284/pattern-ver1-serial/src.netease.pomelo.chat.MainActivity.java-responseData.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:25:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
-if(StringUtils.isBlank(str)){
+if(StringUtils.isBlank(str)&&!str.equals("全部")){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V29/6475/pattern-ver1-serial/src.main.java.com.morningsidevc.service.impl.FeedInfoServiceImpl.java-findFeeds.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:25:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
-if(str.startsWith("--")){
+if(str.startsWith("--")&&!"--".equals("全部")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V29/6475/pattern-ver1-serial/src.main.java.com.morningsidevc.service.impl.FeedInfoServiceImpl.java-findFeeds.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:25:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException("source/"+str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException("source/"+str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/6618/pattern-ver1-serial/template.source.Template.java-Template.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:25:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException("source/"+str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException("source/"+str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/6618/pattern-ver1-serial/template.source.Template.java-Template.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:25:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException("source/"+str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException("source/"+str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/6618/pattern-ver1-serial/template.source.Template.java-Template.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:25:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
-if(str==null){
+if(str==null&&!str.equals("")){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/6260/pattern-ver1-serial/Client.src.com.way.chat.activity.ChatActivity.java-onItemClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:25:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
+ final String currency=numeric.substring(1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
+if(dec==null&&exp==null&&isDigits(currency)&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/3650/pattern-ver1-serial/projects.OG-Financial.src.com.opengamma.financial.analytics.model.future.InterestRateFutureDefaultValuesFunction.java-canApplyTo.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:25:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
+if(numeric==null){
+throw new NumberFormatException("User isn't registered! "+str);
+}
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 7, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:25:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
+if(exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/6358/pattern-ver1-serial/src.main.java.com.builtbroken.icbm.content.ams.TileAMSClient.java-onPlayerRightClick.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:25:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")){
+if(str.startsWith("0x")||str.startsWith("-0x")||"查看红包".equals(str.startsWith("0x"))){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:25:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")){
+if(str.isEmpty()){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7675/pattern-ver1-serial/libsrc.ffdec_lib.src.com.jpexs.decompiler.flash.action.swf4.ActionGotoFrame2.java-execute.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:25:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")){
+if(!str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/6908/pattern-ver1-serial/mainModule.src.backend.building.ProductionBuilding.java-canBuild.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:25:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
+mant=str.substring(0,expPos);
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:25:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
+mant=str.substring(0,expPos);
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:25:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")){
+if(str!=null&&str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V15/6389/pattern-ver1-serial/src.org.ohmage.conditionevaluator.comparator.SingleChoiceDataPointComparator.java-lessThan.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:26:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V65/5693/pattern-ver1-serial/src.org.community.intellij.plugins.communitycase.history.LogParser.java-getFormatOption.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:26:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf('e')+str.indexOf('E')+1+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2703/pattern-ver1-serial/src.main.java.net.minecraftforge.common.interpreter.AST.java-apply.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:26:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
-mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
+mant=str.substring(0,expPos);
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:26:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
-if(expPos>-1){
 mant=str.substring(0,expPos);
+if(expPos>-1){
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:26:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
+mant=str.substring(0,decPos);
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
-mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/1884/pattern-ver1-serial/src.java.is.idega.idegaweb.pheidippides.presentation.ParticipantsReport.java-initializeComponent.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:26:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")){
+if(true){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:26:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")){
+if(str.startsWith("0x")||str.startsWith("-0x")==false){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:26:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
+mant=str.substring(0,decPos);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:26:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
+mant=str.substring(0,decPos);
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:26:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
+mant=str.substring(0,expPos);
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:26:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
+if(str!=null&&str!=null){
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
+}
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/1305/pattern-ver1-serial/portlets.proposals-portlet.src.main.java.org.xcolab.jsp.tags.discussion.GetRoleNameTag.java-doStartTag.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:26:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
+mant=str.substring(0,expPos);
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
-mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/4610/pattern-ver1-serial/StashCache.app.src.main.java.com.geekeclectic.android.stashcache.StashOverviewActivity.java-onActivityResult.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:26:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
+mant=str.substring(0,expPos);
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/4610/pattern-ver1-serial/StashCache.app.src.main.java.com.geekeclectic.android.stashcache.StashOverviewActivity.java-onActivityResult.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:26:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")){
+if(str.matches("/+[\\w\\.\\d/]+.*")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/5089/pattern-ver1-serial/exportLibraries.cimadapter.src.main.java.com.emc.storageos.cimadapter.processors.CimIndicationSet.java-processProperty.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:26:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf('e')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/2316/pattern-ver1-serial/src.main.java.net.cubespace.CloudChat.Module.IRC.Bot.Bot.java-relayMessage.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:26:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")){
+if(str.startsWith("0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/947/pattern-ver1-serial/advinst-server.src.main.java.jetbrains.buildServer.advinst.server.AdvinstRunTypePropertiesProcessor.java-process.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:26:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
+mant=str.substring(0,expPos);
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/5159/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ecms.ContextMenu.java-lockNode.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:26:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
+try{
 dec=null;
+}finally{
+mant=str.substring(0,expPos);
+}
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 1, INS : 0, DEL : 6
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:26:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")){
+if(str.contains(".")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V9/2868/pattern-ver1-serial/src.main.java.play.templates.GroovyTemplate.java-invokeTag.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:26:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")){
+if(str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/6852/pattern-ver1-serial/vipr-portal.portal.app.controllers.tenant.TenantSelector.java-renderTenantOptionsForVcenters.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:26:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")){
+if(str.startsWith("0x")||str.startsWith("-0x")==true){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:26:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
+}
+if(mant==null){
+mant=dec.toString();
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/70/pattern-ver1-serial/app.src.main.java.kr.ac.snu.imlab.scdc.service.core.SCDCService.java-changeConfig.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 7, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:26:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
+}
+if(mant==null){
+mant=exp.toString();
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/70/pattern-ver1-serial/app.src.main.java.kr.ac.snu.imlab.scdc.service.core.SCDCService.java-changeConfig.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 7, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:27:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
+}
+if(exp==null){
+exp=mant.toString();
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/70/pattern-ver1-serial/app.src.main.java.kr.ac.snu.imlab.scdc.service.core.SCDCService.java-changeConfig.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 7, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:27:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
+}
+if(exp==null){
+exp=dec.toString();
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/70/pattern-ver1-serial/app.src.main.java.kr.ac.snu.imlab.scdc.service.core.SCDCService.java-changeConfig.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 7, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:27:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
-mant=str.substring(0,decPos);
+mant=str.substring(0-1,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+String numeric=str.substring(0,str.length()-1-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/7554/pattern-ver1-serial/src.rush.hour.Board.java-getGoalTiles.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:27:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
-mant=str.substring(0,decPos);
+mant=str.substring(0,decPos-1);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+String numeric=str.substring(0,str.length()-1-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/7554/pattern-ver1-serial/src.rush.hour.Board.java-getGoalTiles.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:27:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
-mant=str.substring(0,expPos);
+mant=str.substring(0-1,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+String numeric=str.substring(0,str.length()-1-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/7554/pattern-ver1-serial/src.rush.hour.Board.java-getGoalTiles.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:27:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
-mant=str.substring(0,expPos);
+mant=str.substring(0,expPos-1);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+String numeric=str.substring(0,str.length()-1-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/7554/pattern-ver1-serial/src.rush.hour.Board.java-getGoalTiles.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:27:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+String numeric=str.substring(0,str.length()-1-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/7554/pattern-ver1-serial/src.rush.hour.Board.java-getGoalTiles.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:27:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
-dec=str.substring(decPos+1,expPos);
+dec=str.substring(decPos+1,expPos-1);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+String numeric=str.substring(0,str.length()-1-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/7554/pattern-ver1-serial/src.rush.hour.Board.java-getGoalTiles.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:27:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+String numeric=str.substring(0,str.length()-1-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
-exp=str.substring(expPos+1,str.length());
+exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/7554/pattern-ver1-serial/src.rush.hour.Board.java-getGoalTiles.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:27:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
-if(str.startsWith("--")){
+if(str.startsWith("--")&&!StringUtils.equalsIgnoreCase(str,"vpool.rpCopiesJson")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/29/pattern-ver1-serial/vipr-portal.portal.app.controllers.arrays.BlockVirtualPools.java-error.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:27:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")){
+if(str==null||str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V31/1012/pattern-ver1-serial/common.buildcraft.robotics.StationIndex.java-equals.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:27:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
+dec=str.substring(decPos+1);
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:27:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
+dec=str.substring(decPos+1);
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:27:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
+dec=str.substring(decPos+1);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:27:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
+if(expPos<decPos){
+throw new NumberFormatException(str+" is not a valid number.");
+}
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/3655/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.placement.RecoverPointScheduler.java-scheduleStorageSourcePoolConstraint.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:27:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
+dec=str.substring(decPos+1);
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5726/pattern-ver1-serial/library.src.main.java.com.cocosw.bottomsheet.ClosableSlidingLayout.java-onViewReleased.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:27:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
+dec=str.substring(decPos+1);
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5726/pattern-ver1-serial/library.src.main.java.com.cocosw.bottomsheet.ClosableSlidingLayout.java-onViewReleased.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:27:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
-dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
+dec=str.substring(decPos+1);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2665/pattern-ver1-serial/channel.src.main.java.com.github.dm.jrt.channel.ReplayChannel.java-onError.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:27:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
-dec=str.substring(decPos+1);
 }
+dec=str.substring(decPos+1);
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:27:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
+dec=str.substring(decPos+1);
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
-dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:27:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
+dec=str.substring(decPos+1);
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/1884/pattern-ver1-serial/src.java.is.idega.idegaweb.pheidippides.presentation.ParticipantsReport.java-initializeComponent.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:27:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
+dec=str.substring(decPos+1);
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
-dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/1884/pattern-ver1-serial/src.java.is.idega.idegaweb.pheidippides.presentation.ParticipantsReport.java-initializeComponent.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:27:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
+dec=str.substring(decPos+1);
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:27:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
+dec=str.substring(decPos+1);
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:28:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
+dec=str.substring(decPos+1);
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:28:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
+if(expPos<decPos){
+throw new NumberFormatException(str+" is not a valid number.");
+}
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:28:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
+if(expPos<decPos){
+throw new NumberFormatException(str+" is not a valid number.");
+}
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:28:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
-boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+boolean allZeros=(isAllZeros(mant))&&(isAllZeros(exp));
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
-boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+boolean allZeros=(isAllZeros(mant))&&(isAllZeros(exp));
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V2/1860/pattern-ver1-serial/structr.structr-core.src.main.java.org.structr.core.entity.AbstractNode.java-collectRelatedNodes.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:28:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
+dec=str.substring(decPos+1);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/1924/pattern-ver1-serial/src.gui.map.MapDrawerPanel.java-restoreSession.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:28:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
+if(str.startsWith("\r\n")){
+str=str.substring(2);
+}
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:28:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
+if(str.startsWith("\r\n")){
+str=str.substring(2);
+}
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:28:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
+if(str.startsWith("\r\n")){
+str=str.substring(2);
+}
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:28:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
+if(str.startsWith("\r\n")){
+str=str.substring(2);
+}
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:28:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
+if(str.startsWith("\r\n")){
+str=str.substring(2);
+}
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:28:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
+if(str.startsWith("\r\n")){
+str=str.substring(2);
+}
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:28:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
+if(str.startsWith("\r\n")){
+str=str.substring(2);
+}
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:28:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
+if(str.startsWith("\r\n")){
+str=str.substring(2);
+}
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:28:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
+if(str.startsWith("\r\n")){
+str=str.substring(2);
+}
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:28:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
+if(str.startsWith("\r\n")){
+str=str.substring(2);
+}
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:28:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
+}
+if(expPos<decPos){
+throw new NumberFormatException(str+" is not a valid number.");
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1562/pattern-ver1-serial/assignment6.src.assignment6.TicketClient.java-run.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:28:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
+try{
 mant=str.substring(0,decPos);
+}finally{
+dec=str.substring(decPos+1);
+}
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 1, INS : 0, DEL : 7
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:28:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
+dec=str.substring(decPos+1);
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V39/1103/pattern-ver1-serial/Graphs.src.com.jmga.graphs.classes.GView.java-update.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:28:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
+dec=str.substring(decPos+1);
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V39/1103/pattern-ver1-serial/Graphs.src.com.jmga.graphs.classes.GView.java-update.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:28:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
+if(str.startsWith("/")){
+str=str.substring(1);
+}
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V47/2604/pattern-ver1-serial/components.data-services.org.wso2.carbon.dataservices.core.src.main.java.org.wso2.carbon.dataservices.core.DBDeployer.java-createAxisOperation.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:28:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
+if(numeric.startsWith("/")){
+numeric=numeric.substring(1);
+}
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V47/2604/pattern-ver1-serial/components.data-services.org.wso2.carbon.dataservices.core.src.main.java.org.wso2.carbon.dataservices.core.DBDeployer.java-createAxisOperation.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:28:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6177/pattern-ver1-serial/src.Hapi.SQLMethods.Methods.java-setCustomerDiscount.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:28:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/2863/pattern-ver1-serial/app.src.main.java.alex.com.box2ddemo.gift2dview.Box2dSenserLogic.java-onSensorChanged.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:28:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<str.length()){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<str.length()){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/753/pattern-ver1-serial/src.main.java.cubicchunks.lighting.FirstLightProcessor.java-initializeSkylight.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:28:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
+mant=str.substring(0,decPos);
 }else {
 dec=str.substring(decPos+1);
-}
 mant=str.substring(0,decPos);
+}
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 2, DEL : 6
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:28:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
+mant=str.substring(0,decPos);
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
-}
 mant=str.substring(0,decPos);
+}
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 2, DEL : 6
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:29:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
+dec=str.substring(decPos+1);
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/3316/pattern-ver1-serial/core.src.main.java.org.ehcache.spi.ServiceLocator.java-startAllServices.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:29:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
+dec=str.substring(decPos+1,expPos);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:29:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
-dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
+dec=str.substring(decPos+1,expPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2665/pattern-ver1-serial/channel.src.main.java.com.github.dm.jrt.channel.ReplayChannel.java-onError.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:29:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
-dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
+dec=str.substring(decPos+1,expPos);
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:29:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
+dec=str.substring(decPos+1,expPos);
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
-dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:29:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
+dec=str.substring(decPos+1,expPos);
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/2664/pattern-ver1-serial/src.main.java.micdoodle8.mods.galacticraft.planets.asteroids.entities.EntityGrapple.java-EntityGrapple.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:29:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
+dec=str.substring(decPos+1,expPos);
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:29:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
+dec=str.substring(decPos+1,expPos);
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:29:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
+dec=str.substring(decPos+1,expPos);
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:29:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
+dec=str.substring(decPos+1,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:29:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
+dec=str.substring(decPos+1,expPos);
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
-dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/4610/pattern-ver1-serial/StashCache.app.src.main.java.com.geekeclectic.android.stashcache.StashOverviewActivity.java-onActivityResult.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:29:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
+dec=str.substring(decPos+1,expPos);
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/4610/pattern-ver1-serial/StashCache.app.src.main.java.com.geekeclectic.android.stashcache.StashOverviewActivity.java-onActivityResult.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:29:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
+try{
 mant=str.substring(0,decPos);
+}finally{
+dec=str.substring(decPos+1,expPos);
+}
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 1, INS : 0, DEL : 8
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:29:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
+dec=str.substring(decPos+1,expPos);
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3545/pattern-ver1-serial/components.device-mgt.org.wso2.carbon.device.mgt.core.src.main.java.org.wso2.carbon.device.mgt.core.operation.mgt.dao.impl.CommandOperationDAOImpl.java-deleteOperation.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:29:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
-mant=str.substring(0,expPos);
-}else {
 mant=str;
+}else {
+mant=str.substring(0,expPos);
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3134/pattern-ver1-serial/app.src.main.java.ru.vif2ne.ui.MainActivity.java-refreshBottomMenu.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:29:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
+if(numeric.contains("phpreturn")){
+numeric=numeric.replace("php","php\n");
+}
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V39/2350/pattern-ver1-serial/src.main.java.ru.andyskvo.main.Main.java-main.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:29:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
+if(numeric.contains("#")){
+numeric=numeric.split("#")[0];
+}
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V29/3981/pattern-ver1-serial/hdiv-core.src.main.java.org.hdiv.filter.ValidatorHelperRequest.java-restoreState.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:29:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
+dec=str.substring(decPos+1);
 }else {
+dec=str.substring(decPos+1);
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 2, DEL : 7
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:29:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
+dec=str.substring(decPos+1);
 dec=str.substring(decPos+1,expPos);
 }else {
+dec=str.substring(decPos+1);
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 2, DEL : 7
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:29:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
-if(decPos>-1){
+if(decPos==-2){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V32/4193/pattern-ver1-serial/simple-comsumer.src.main.java.com.wxmimperio.simple.consumer.clients.SimpleConsumerAPI.java-init.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:29:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
+dec=str.substring(decPos+1,expPos);
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3760/pattern-ver1-serial/src.AlienEntryApplication.java-main.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:29:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
+exp=str.substring(expPos+1,str.length());
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:29:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
+exp=str.substring(expPos+1,str.length());
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:29:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
+exp=str.substring(expPos+1,str.length());
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:30:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
+exp=str.substring(expPos+1,str.length());
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:30:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
+exp=str.substring(expPos+1,str.length());
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:30:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+exp=str.substring(expPos+1,str.length());
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:30:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
+exp=str.substring(expPos+1,str.length());
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:30:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
+exp=str.substring(expPos+1,str.length());
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:30:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
+exp=str.substring(expPos+1,str.length());
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:30:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
-exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
+exp=str.substring(expPos+1,str.length());
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:30:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
+if(expPos>-1&&expPos<str.length()-1){
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:30:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
+exp=str.substring(expPos+1,str.length());
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
-exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/1884/pattern-ver1-serial/src.java.is.idega.idegaweb.pheidippides.presentation.ParticipantsReport.java-initializeComponent.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:30:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
+exp=str.substring(expPos+1,str.length());
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/1884/pattern-ver1-serial/src.java.is.idega.idegaweb.pheidippides.presentation.ParticipantsReport.java-initializeComponent.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:30:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
+exp=str.substring(expPos+1,str.length());
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:30:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
+exp=str.substring(expPos+1,str.length());
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/6439/pattern-ver1-serial/core.src.game.screen.battle.Battle.java-render.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:30:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
+exp=str.substring(expPos+1,str.length());
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/4215/pattern-ver1-serial/Mage.Server.src.main.java.mage.server.TableController.java-joinTournament.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:30:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")){
+if((str.startsWith("0x"))||(str.startsWith("-0x"))){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
-boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+boolean allZeros=(isAllZeros(mant))&&(isAllZeros(exp));
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/5331/pattern-ver1-serial/src.main.java.groupProject.twentyFortyEight.GameLogic.java-gameOver.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:30:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")){
+if((str.startsWith("0x"))||(str.startsWith("-0x"))){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
-boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+boolean allZeros=(isAllZeros(mant))&&(isAllZeros(exp));
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/5331/pattern-ver1-serial/src.main.java.groupProject.twentyFortyEight.GameLogic.java-gameOver.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:30:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos!=0&&expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
-boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+boolean allZeros=-1!=0&&isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V18/5825/pattern-ver1-serial/app.src.main.java.com.companyname.hearts.ai.HAL9000.java-computer1MakesMove.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:30:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos!=0&&expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
-boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+boolean allZeros=-1!=0&&isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V18/5825/pattern-ver1-serial/app.src.main.java.com.companyname.hearts.ai.HAL9000.java-computer1MakesMove.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:30:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos!=0&&expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(-1!=0&&f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V18/5825/pattern-ver1-serial/app.src.main.java.com.companyname.hearts.ai.HAL9000.java-computer1MakesMove.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:30:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos!=0&&expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+if(!(-1!=0&&d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V18/5825/pattern-ver1-serial/app.src.main.java.com.companyname.hearts.ai.HAL9000.java-computer1MakesMove.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:30:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
+exp=str.substring(expPos+1,str.length());
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/7577/pattern-ver1-serial/networkmonitor.src.main.java.ca.rmen.android.networkmonitor.app.prefs.PreferencesCompat.java-setupActionBar.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:30:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
+exp=str.substring(expPos+1,str.length());
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/5159/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ecms.ContextMenu.java-lockNode.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:30:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
+exp=str.substring(expPos+1,str.length());
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/5159/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ecms.ContextMenu.java-lockNode.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:30:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
+exp=str.substring(expPos+1,str.length());
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/5159/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ecms.ContextMenu.java-lockNode.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:31:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
+exp=str.substring(expPos+1,str.length());
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/5159/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ecms.ContextMenu.java-lockNode.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:31:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+exp=str.substring(expPos+1,str.length());
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/5159/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ecms.ContextMenu.java-lockNode.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:31:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
+exp=str.substring(expPos+1,str.length());
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/3854/pattern-ver1-serial/NewIntro4.java-act.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:31:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
+exp=str.substring(expPos+1,str.length());
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/3854/pattern-ver1-serial/NewIntro4.java-act.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:31:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
+exp=str.substring(expPos+1,str.length());
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/1831/pattern-ver1-serial/bitrepository-audit-trail-service.src.main.java.org.bitrepository.audittrails.collector.IncrementalCollector.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:31:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
+exp=str.substring(expPos+1,str.length());
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/1831/pattern-ver1-serial/bitrepository-audit-trail-service.src.main.java.org.bitrepository.audittrails.collector.IncrementalCollector.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:31:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
+exp=str.substring(expPos+1,str.length());
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/1831/pattern-ver1-serial/bitrepository-audit-trail-service.src.main.java.org.bitrepository.audittrails.collector.IncrementalCollector.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:31:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
+exp=str.substring(expPos+1,str.length());
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/1831/pattern-ver1-serial/bitrepository-audit-trail-service.src.main.java.org.bitrepository.audittrails.collector.IncrementalCollector.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:31:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
+if(lastChar<0){
+lastChar--;
+}
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
+if(decPos<0){
+decPos--;
+}
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2288/pattern-ver1-serial/src.fr.jules_cesar.Loto.main.java-onEnable.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:31:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
+if(lastChar<0){
+lastChar--;
+}
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
+if(expPos<0){
+expPos--;
+}
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2288/pattern-ver1-serial/src.fr.jules_cesar.Loto.main.java-onEnable.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:31:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
+if(str.endsWith("/")==false){
+str=str+"/";
+}
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/627/pattern-ver1-serial/src.main.java.com.thunder.util.Util.java-restMap.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:31:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
+if(numeric.endsWith("/")==false){
+numeric=numeric+"/";
+}
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/627/pattern-ver1-serial/src.main.java.com.thunder.util.Util.java-restMap.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:31:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
+String numeric=str.substring(0,str.length()-1);
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V5/1113/pattern-ver1-serial/src.main.java.org.encog.neural.neat.training.NEATTraining.java-crossover.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:31:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
+dec=str.substring(decPos+1,expPos);
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
+dec=str.substring(decPos+1,expPos);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 2, DEL : 8
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:31:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
-}
-if(str.startsWith("0x")||str.startsWith("-0x")){
-return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
+if(str.startsWith("0x")||str.startsWith("-0x")){
+return createInteger(str);
+}
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/2878/pattern-ver1-serial/src.main.java.de.webfilesys.FileLinkSelector.java-selectFiles.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:31:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
-}
-if(str.startsWith("0x")||str.startsWith("-0x")){
-return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
+if(str.startsWith("0x")||str.startsWith("-0x")){
+return createInteger(str);
+}
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/2878/pattern-ver1-serial/src.main.java.de.webfilesys.FileLinkSelector.java-selectFiles.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:31:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
-}
-if(str.startsWith("0x")||str.startsWith("-0x")){
-return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
+if(str.startsWith("0x")||str.startsWith("-0x")){
+return createInteger(str);
+}
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/2878/pattern-ver1-serial/src.main.java.de.webfilesys.FileLinkSelector.java-selectFiles.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:31:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
-}
-if(str.startsWith("0x")||str.startsWith("-0x")){
-return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
+if(str.startsWith("0x")||str.startsWith("-0x")){
+return createInteger(str);
+}
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/2878/pattern-ver1-serial/src.main.java.de.webfilesys.FileLinkSelector.java-selectFiles.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:31:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
+exp=str.substring(expPos+1,str.length());
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/4888/pattern-ver1-serial/core.src.main.java.com.digitalpebble.storm.crawler.bolt.JSoupParserBolt.java-toOutlinks.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:31:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
+exp=str.substring(expPos+1,str.length());
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V32/2211/pattern-ver1-serial/src.Model.PlayerModel.java-isAttacking.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:31:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
+exp=str.substring(expPos+1,str.length());
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3760/pattern-ver1-serial/src.AlienEntryApplication.java-main.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:31:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
+exp=str.substring(expPos+1,str.length());
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3760/pattern-ver1-serial/src.AlienEntryApplication.java-main.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:31:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<str.length()-1||"查看红包".equals(expPos>-1)){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:31:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<str.length()-1||expPos=='%'){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/6049/pattern-ver1-serial/src.main.java.org.wltea.analyzer.core.LaTeXSegmenter.java-addOperatorFormula.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:31:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos<0L||(expPos>-1&&expPos<str.length()-1)){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/110/pattern-ver1-serial/src.com.firebirdberlin.nightdream.ui.NightDreamUI.java-updateWeatherData.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:32:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
-if(expPos>-1&&expPos<str.length()-1){
+if(true){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:32:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<str.length()-1==false){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:32:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
+if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&!(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/6688/pattern-ver1-serial/src.MineralOre.java-update.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:32:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(allZeros){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/750/pattern-ver1-serial/src.pic.simulator.pins.Rb7_4.java-clearExternally.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:32:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+if(allZeros){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/750/pattern-ver1-serial/src.pic.simulator.pins.Rb7_4.java-clearExternally.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:32:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!allZeros){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/2329/pattern-ver1-serial/src.main.java.com.shootoff.gui.controller.ShootOFFController.java-setFullScreenStatus.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:32:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(f.floatValue()==0.0&&!allZeros){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/2329/pattern-ver1-serial/src.main.java.com.shootoff.gui.controller.ShootOFFController.java-setFullScreenStatus.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:32:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
+}else {
+if(null==str||str.equals("")){
+mant="null";
 }else {
 mant=str;
+}
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V29/3929/pattern-ver1-serial/modules.andes-core.broker.src.main.java.org.wso2.andes.kernel.disruptor.inbound.QueueInfo.java-QueueInfo.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:32:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/1971/pattern-ver1-serial/src.main.java.gregtech.api.gui.GT_GUIContainerMetaTile_Machine.java-drawGuiContainerBackgroundLayer.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:32:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/1971/pattern-ver1-serial/src.main.java.gregtech.api.gui.GT_GUIContainerMetaTile_Machine.java-drawGuiContainerBackgroundLayer.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:32:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/1184/pattern-ver1-serial/swagplash.src.main.java.com.github.albertosh.swagplash.actions.ApiBodyParamAction.java-call.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:32:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<str.length()-1==true){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:32:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if((f.floatValue()==0.0&&!allZeros)){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V2/1420/pattern-ver1-serial/JREngage.src.com.janrain.android.engage.ui.JRProvidersActivity.java-onListItemClick.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:32:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(f.isInfinite()||(f.floatValue()==0.0&&!allZeros)){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V2/1420/pattern-ver1-serial/JREngage.src.com.janrain.android.engage.ui.JRProvidersActivity.java-onListItemClick.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:32:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if((f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V2/1420/pattern-ver1-serial/JREngage.src.com.janrain.android.engage.ui.JRProvidersActivity.java-onListItemClick.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:32:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
+}else {
+if(str.contains("Selected")||str.contains("Deselected")){
+mant="";
 }else {
 mant=str;
+}
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/6027/pattern-ver1-serial/votebox.middle.view.widget.FocusableLabel.java-soundPath.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:32:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
+if(isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/6358/pattern-ver1-serial/src.main.java.com.builtbroken.icbm.content.ams.TileAMSClient.java-onPlayerRightClick.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:32:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
+exp=str.substring(expPos+1,str.length()-1);
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/293/pattern-ver1-serial/common.ganymedes01.aobd.recipes.RecipesHandler.java-craftingRecipes.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:32:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
-exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
+exp=str.substring(expPos+1,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2665/pattern-ver1-serial/channel.src.main.java.com.github.dm.jrt.channel.ReplayChannel.java-onError.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:32:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
+exp=str.substring(expPos+1,str.length()-1);
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
-exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/1884/pattern-ver1-serial/src.java.is.idega.idegaweb.pheidippides.presentation.ParticipantsReport.java-initializeComponent.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:32:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
+if(str==null){
+str="20160101";
+}
+if(mant==null){
+mant="20200101";
+}
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V11/5352/pattern-ver1-serial/GitlabMonitor.src.main.java.org.gitmining.monitor.service.StudentService.java-getStudentEventItem.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:32:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
+if(str==null){
+str="20160101";
+}
+if(dec==null){
+dec="20200101";
+}
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V11/5352/pattern-ver1-serial/GitlabMonitor.src.main.java.org.gitmining.monitor.service.StudentService.java-getStudentEventItem.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:32:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
-if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
+if(expPos>-1&&expPos<str.length()-1){
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V11/5250/pattern-ver1-serial/exportLibraries.vplex.src.main.java.com.emc.storageos.vplex.api.VPlexApiVirtualVolumeManager.java-updateVirtualVolumeInfoAfterExpansion.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:32:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
-exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
+exp=str.substring(expPos+1,str.length()-1);
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:33:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
+import java.io.File;
+
+import java.util.HashSet;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
+exp=str.substring(expPos+1,str.length()-1);
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/3878/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.jobs.backupscheduler.UploadExecutor.java-doUpload.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:33:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
+import java.io.File;
+
+import java.util.HashSet;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
+exp=str.substring(expPos+1,str.length()-1);
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/3878/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.jobs.backupscheduler.UploadExecutor.java-doUpload.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:33:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
+import java.io.File;
+
+import java.util.HashSet;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
+exp=str.substring(expPos+1,str.length()-1);
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/3878/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.jobs.backupscheduler.UploadExecutor.java-doUpload.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:33:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
+if((dec==null)&&(exp==null)&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
-if(dec==null&&exp==null){
+if((dec==null)&&(exp==null)){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V2/1860/pattern-ver1-serial/structr.structr-core.src.main.java.org.structr.core.entity.AbstractNode.java-collectRelatedNodes.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:33:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
+if(decPos<3){
+decPos=3;
+}
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
+if(expPos<3){
+expPos=3;
+}
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/5504/pattern-ver1-serial/components.insight.SRC.org.openmicroscopy.shoola.util.image.geom.Factory.java-magnifyImage.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:33:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
+if(lastChar<3){
+lastChar=3;
+}
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
+if(expPos<3){
+expPos=3;
+}
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/5504/pattern-ver1-serial/components.insight.SRC.org.openmicroscopy.shoola.util.image.geom.Factory.java-magnifyImage.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:33:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
+exp=str.substring(expPos+1,str.length()-1);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/7577/pattern-ver1-serial/networkmonitor.src.main.java.ca.rmen.android.networkmonitor.app.prefs.PreferencesCompat.java-setupActionBar.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:33:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
+exp=str.substring(expPos+1,str.length()-1);
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/4301/pattern-ver1-serial/api.src.main.java.com.abiquo.api.services.cloud.VirtualMachineService.java-changeVirtualMachineState.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:33:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
+exp=str.substring(expPos+1,str.length()-1);
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/1831/pattern-ver1-serial/bitrepository-audit-trail-service.src.main.java.org.bitrepository.audittrails.collector.IncrementalCollector.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:33:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
+exp=str.substring(expPos+1,str.length()-1);
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/1831/pattern-ver1-serial/bitrepository-audit-trail-service.src.main.java.org.bitrepository.audittrails.collector.IncrementalCollector.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:33:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
+exp=str.substring(expPos+1,str.length()-1);
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/1831/pattern-ver1-serial/bitrepository-audit-trail-service.src.main.java.org.bitrepository.audittrails.collector.IncrementalCollector.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:33:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
+try{
 return createInteger(str);
+}catch(NumberFormatException nfe){
+}
+try{
+return createLong(str);
+}catch(NumberFormatException nfe){
+}
+return createBigInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
-try{
 return createInteger(str);
-}catch(NumberFormatException nfe){
-}
-try{
-return createLong(str);
-}catch(NumberFormatException nfe){
-}
-return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/606/pattern-ver1-serial/aws-java-sdk-s3.src.main.java.com.amazonaws.services.s3.internal.BucketNameUtils.java-isValidV2BucketName.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:33:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
+if(lastChar<0){
+lastChar=0;
+}
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
+if(decPos<0){
+decPos=0;
+}
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/399/pattern-ver1-serial/src.client.panel.FormEntryPanel.java-keyPressed.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:33:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
+if(decPos<0){
+decPos=0;
+}
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
+if(expPos<0){
+expPos=0;
+}
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/399/pattern-ver1-serial/src.client.panel.FormEntryPanel.java-keyPressed.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:33:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
+if((dec==null&&exp==null&&isDigits(numeric.substring(1)))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/4601/pattern-ver1-serial/core.src.by.matveev.rorty.entities.Robot.java-updateControlState.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:33:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
+if("Chrome".equals(dec==null&&exp==null)&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/4219/pattern-ver1-serial/src.browsermator.com.STAppController.java-itemStateChanged.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:33:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
+exp=str.substring(expPos+1,str.length()-1);
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V32/2211/pattern-ver1-serial/src.Model.PlayerModel.java-isAttacking.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:33:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
+exp=str.substring(expPos+1,str.length()-1);
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3760/pattern-ver1-serial/src.AlienEntryApplication.java-main.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:33:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
+exp=str.substring(expPos+1,str.length()-1);
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3760/pattern-ver1-serial/src.AlienEntryApplication.java-main.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:33:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
+if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+return d;
+}
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 1, DEL : 12
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:33:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
+if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+return f;
+}
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 1, DEL : 12
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:33:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
+if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+return d;
+}
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 1, DEL : 12
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:33:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
+if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+return f;
+}
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 1, DEL : 12
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:33:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
-boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+boolean allZeros=(isAllZeros(mant))&&(isAllZeros(exp));
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!((f.isInfinite())||((f.floatValue()==0.0&&!allZeros)))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/5331/pattern-ver1-serial/src.main.java.groupProject.twentyFortyEight.GameLogic.java-gameOver.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 13, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:33:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
-boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+boolean allZeros=(isAllZeros(mant))&&(isAllZeros(exp));
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+if(!((d.isInfinite())||((d.floatValue()==0.0&&!allZeros)))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/5331/pattern-ver1-serial/src.main.java.groupProject.twentyFortyEight.GameLogic.java-gameOver.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 13, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:34:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
+long startTime=System.currentTimeMillis();
 mant=str.substring(0,expPos);
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:34:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
+long startTime=System.currentTimeMillis();
 exp=str.substring(expPos+1,str.length()-1);
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:34:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
+long startTime=System.currentTimeMillis();
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:34:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
+long startTime=System.currentTimeMillis();
 mant=str;
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:34:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
+long startTime=System.currentTimeMillis();
 exp=null;
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:34:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
+if(expPos>-1){
+mant=str.substring(0,expPos);
+}else {
+mant=str;
+}
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
-}else {
-if(expPos>-1){
-mant=str.substring(0,expPos);
 }else {
-mant=str;
-}
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V38/926/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.FileVirtualPoolService.java-prepareVirtualPool.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 0, INS : 1, DEL : 13
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:34:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
-exp=str.substring(expPos+1,str.length()-1);
-}else {
 exp=null;
+}else {
+exp=str.substring(expPos+1,str.length()-1);
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V4/6693/pattern-ver1-serial/app.src.main.java.mindpop.learnpop.WebItem.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 14, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:34:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")){
+if((str.startsWith("0x"))||(str.startsWith("-0x"))){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!((f.isInfinite())||((f.floatValue()==0.0&&!allZeros)))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/5331/pattern-ver1-serial/src.main.java.groupProject.twentyFortyEight.GameLogic.java-gameOver.pattern
MATCHLEVEL : ALL
ALL : 15, UPD : 15, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:34:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")){
+if((str.startsWith("0x"))||(str.startsWith("-0x"))){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+if(!((d.isInfinite())||((d.floatValue()==0.0&&!allZeros)))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/5331/pattern-ver1-serial/src.main.java.groupProject.twentyFortyEight.GameLogic.java-gameOver.pattern
MATCHLEVEL : ALL
ALL : 15, UPD : 15, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:34:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")){
+if((str.startsWith("0x"))||(str.startsWith("-0x"))){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!((f.isInfinite())||((f.floatValue()==0.0&&!allZeros)))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/5331/pattern-ver1-serial/src.main.java.groupProject.twentyFortyEight.GameLogic.java-gameOver.pattern
MATCHLEVEL : ALL
ALL : 15, UPD : 15, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:34:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")){
+if((str.startsWith("0x"))||(str.startsWith("-0x"))){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
-if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+if(!((d.isInfinite())||((d.doubleValue()==0.0&&!allZeros)))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/5331/pattern-ver1-serial/src.main.java.groupProject.twentyFortyEight.GameLogic.java-gameOver.pattern
MATCHLEVEL : ALL
ALL : 15, UPD : 15, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:34:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
-dec=str.substring(decPos+1);
+dec=str.substring(decPos+1,expPos);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/4615/pattern-ver1-serial/org.smartsnip.src.org.smartsnip.client.TagArea.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 15, UPD : 15, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:34:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
-dec=str.substring(decPos+1,expPos);
+dec=str.substring(decPos+1);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/4615/pattern-ver1-serial/org.smartsnip.src.org.smartsnip.client.TagArea.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 15, UPD : 15, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:34:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")){
+if((str.startsWith("0x"))||(str.startsWith("-0x"))){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
-if(expPos>-1&&expPos<str.length()-1){
+if((expPos>-1)&&(expPos<str.length()-1)){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/5331/pattern-ver1-serial/src.main.java.groupProject.twentyFortyEight.GameLogic.java-gameOver.pattern
MATCHLEVEL : ALL
ALL : 16, UPD : 16, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:34:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
-if(expPos>-1&&expPos<str.length()-1){
+if((expPos>-1)&&(expPos<str.length()-1)){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if((expPos>-1)&&(expPos<str.length()-1)){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V2/1860/pattern-ver1-serial/structr.structr-core.src.main.java.org.structr.core.entity.AbstractNode.java-collectRelatedNodes.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 20, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:34:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
+if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))||"查看红包".equals(dec==null&&exp==null&&isDigits(numeric.substring(1)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 24, UPD : 24, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:34:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
+if(expPos>-1&&expPos<str.length()-1){
+exp=str.substring(expPos+1,str.length());
+}else {
+exp=null;
+}
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/3655/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.placement.RecoverPointScheduler.java-scheduleStorageSourcePoolConstraint.pattern
MATCHLEVEL : ALL
ALL : 24, UPD : 0, INS : 1, DEL : 23
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:34:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
+if(expPos>-1&&expPos<str.length()-1){
+exp=str.substring(expPos+1,str.length());
+}else {
+exp=null;
+}
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/3655/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.placement.RecoverPointScheduler.java-scheduleStorageSourcePoolConstraint.pattern
MATCHLEVEL : ALL
ALL : 24, UPD : 0, INS : 1, DEL : 23
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:34:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
+if(expPos>-1&&expPos<str.length()-1){
+exp=str.substring(expPos+1,str.length());
+}else {
+exp=null;
+}
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/3655/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.placement.RecoverPointScheduler.java-scheduleStorageSourcePoolConstraint.pattern
MATCHLEVEL : ALL
ALL : 24, UPD : 0, INS : 1, DEL : 23
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:34:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
+if(expPos>-1&&expPos<str.length()-1){
+exp=str.substring(expPos+1,str.length());
+}else {
+exp=null;
+}
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/3655/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.placement.RecoverPointScheduler.java-scheduleStorageSourcePoolConstraint.pattern
MATCHLEVEL : ALL
ALL : 24, UPD : 0, INS : 1, DEL : 23
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:34:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
+if(dec==null&&exp==null&&isDigits(numeric.substring(1))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/1014/pattern-ver1-serial/src.main.java.HxCKDMS.HxCEnchants.Handlers.EnchantHandlers.java-handleBootEnchant.pattern
MATCHLEVEL : ALL
ALL : 24, UPD : 24, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:34:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Solution---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
+if(true){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 24, UPD : 24, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:35:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
+if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))==false){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 24, UPD : 24, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:35:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
+if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))==true){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 24, UPD : 24, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:35:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Solution---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
+if(dec==null&&exp==null){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/69/pattern-ver1-serial/src.org.exoplatform.shareextension.AccountsFragment.java-onListItemClick.pattern
MATCHLEVEL : ALL
ALL : 24, UPD : 24, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:35:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
+if(expPos>-1&&expPos<str.length()-1){
+exp=str.substring(expPos+1,str.length()-1);
+}else {
+exp=null;
+}
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/3655/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.placement.RecoverPointScheduler.java-scheduleStorageSourcePoolConstraint.pattern
MATCHLEVEL : ALL
ALL : 26, UPD : 0, INS : 1, DEL : 25
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:35:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
+if(expPos>-1&&expPos<str.length()-1){
+exp=str.substring(expPos+1,str.length()-1);
+}else {
+exp=null;
+}
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/3655/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.placement.RecoverPointScheduler.java-scheduleStorageSourcePoolConstraint.pattern
MATCHLEVEL : ALL
ALL : 26, UPD : 0, INS : 1, DEL : 25
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:35:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
+if(expPos>-1&&expPos<str.length()-1){
+exp=str.substring(expPos+1,str.length()-1);
+}else {
+exp=null;
+}
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/3655/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.placement.RecoverPointScheduler.java-scheduleStorageSourcePoolConstraint.pattern
MATCHLEVEL : ALL
ALL : 26, UPD : 0, INS : 1, DEL : 25
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:35:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
-if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
+if(decPos>-1){
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V38/926/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.FileVirtualPoolService.java-prepareVirtualPool.pattern
MATCHLEVEL : ALL
ALL : 27, UPD : 0, INS : 1, DEL : 26
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:35:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
+try{
+if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
+return createLong(numeric);
+}catch(NumberFormatException nfe){
+}
+return createBigInteger(numeric);
+}
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 31, UPD : 0, INS : 1, DEL : 30
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:35:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
+try{
+if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
+return createLong(numeric);
+}catch(NumberFormatException nfe){
+}
+return createBigInteger(numeric);
+}
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 31, UPD : 0, INS : 1, DEL : 30
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:35:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
-if(expPos<decPos){
-throw new NumberFormatException(str+" is not a valid number.");
-}
-dec=str.substring(decPos+1,expPos);
+mant=str.substring(0,expPos);
 }else {
-dec=str.substring(decPos+1);
+mant=str;
 }
-mant=str.substring(0,decPos);
+dec=null;
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
-dec=null;
+dec=str.substring(decPos+1);
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3134/pattern-ver1-serial/app.src.main.java.ru.vif2ne.ui.MainActivity.java-refreshBottomMenu.pattern
MATCHLEVEL : ALL
ALL : 35, UPD : 35, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:35:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
-if(expPos<decPos){
-throw new NumberFormatException(str+" is not a valid number.");
-}
-dec=str.substring(decPos+1,expPos);
+mant=str.substring(0,expPos);
 }else {
-dec=str.substring(decPos+1);
+mant=str;
 }
-mant=str.substring(0,decPos);
+dec=null;
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
-dec=null;
+dec=str.substring(decPos+1,expPos);
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5622/pattern-ver1-serial/src.main.java.com.github.randoapp.adapter.RandoPairsAdapter.java-initData.pattern
MATCHLEVEL : ALL
ALL : 35, UPD : 35, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:35:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
-if(expPos<decPos){
-throw new NumberFormatException(str+" is not a valid number.");
-}
-dec=str.substring(decPos+1,expPos);
+mant=str.substring(0,expPos);
 }else {
-dec=str.substring(decPos+1);
+mant=str;
 }
-mant=str.substring(0,decPos);
+dec=null;
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3134/pattern-ver1-serial/app.src.main.java.ru.vif2ne.ui.MainActivity.java-refreshBottomMenu.pattern
MATCHLEVEL : ALL
ALL : 38, UPD : 38, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:35:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
-exp=str.substring(expPos+1,str.length()-1);
+exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
-boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
-switch (lastChar){
-case 'l' :
-
-case 'L' :
-
-if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
+if(dec==null&&exp==null){
 try{
-return createLong(numeric);
+return createInteger(str);
 }catch(NumberFormatException nfe){
 }
-return createBigInteger(numeric);
+try{
+return createLong(str);
+}catch(NumberFormatException nfe){
 }
-throw new NumberFormatException(str+" is not a valid number.");
-case 'f' :
-
-case 'F' :
-
+return createBigInteger(str);
+}else {
+boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
-Float f=NumberUtils.createFloat(numeric);
+Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
-case 'd' :
-
-case 'D' :
-
 try{
-Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+Double d=createDouble(str);
+if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
-}
-try{
-return createBigDecimal(numeric);
-}catch(NumberFormatException e){
 }
-default :
-
-throw new NumberFormatException(str+" is not a valid number.");
+return createBigDecimal(str);
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3134/pattern-ver1-serial/app.src.main.java.ru.vif2ne.ui.MainActivity.java-refreshBottomMenu.pattern
MATCHLEVEL : ALL
ALL : 137, UPD : 137, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:35:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[371,545]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)){
-if(expPos>-1&&expPos<str.length()-1){
-exp=str.substring(expPos+1,str.length()-1);
-}else {
-exp=null;
-}
-String numeric=str.substring(0,str.length()-1);
-boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
-switch (lastChar){
-case 'l' :
-
-case 'L' :
-
-if(dec==null&&exp==null&&isDigits(numeric.substring(1))&&(numeric.charAt(0)=='-'||Character.isDigit(numeric.charAt(0)))){
-try{
-return createLong(numeric);
-}catch(NumberFormatException nfe){
-}
-return createBigInteger(numeric);
-}
-throw new NumberFormatException(str+" is not a valid number.");
-case 'f' :
-
-case 'F' :
-
 try{
-Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
-return f;
-}
+return createInteger(str);
 }catch(NumberFormatException nfe){
 }
-case 'd' :
-
-case 'D' :
-
 try{
-Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
-return d;
-}
+return createLong(str);
 }catch(NumberFormatException nfe){
-}
-try{
-return createBigDecimal(numeric);
-}catch(NumberFormatException e){
-}
-default :
-
-throw new NumberFormatException(str+" is not a valid number.");
 }
+return createBigInteger(str);
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
-try{
-return createInteger(str);
-}catch(NumberFormatException nfe){
-}
-try{
-return createLong(str);
-}catch(NumberFormatException nfe){
-}
-return createBigInteger(str);
+return +1;
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/7529/pattern-ver1-serial/BigNumber.src.BigNumber.java-compare.pattern
MATCHLEVEL : ALL
ALL : 138, UPD : 138, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:36:00 CDT
--------------- END -----------------
Location : org.apache.commons.lang.math.NumberUtils.isDigits:[1508, 1507, 1510, 1511, 1515]#0.7071067811865475
Compute Candidate : 2019.09.07 AD at 14:36:17 CDT - 2019.09.07 AD at 14:45:04 CDT , PNumber : 11294, CandNumber : 123 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
+continue;
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:45:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
-return true;
+return false;
 }

PATTERN : /home/jiajun/GithubData/2011/V2/2886/pattern-ver1-serial/src.freenet.node.CHKInsertSender.java-shouldTimeout.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:45:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
+import java.util.Collections;
+
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
-return false;
+return true;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4457/pattern-ver1-serial/library.src.main.java.com.gh.bmd.jrt.core.DefaultResultChannel.java-isOutputChannelOpen.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:45:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
+return false;
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:45:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
-for(int i=0;i<str.length();i++){
+for(int i=0;i<=str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:45:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
+import java.util.Collection;
+
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
-for(int i=0;i<str.length();i++){
+for(int i=0,myUid;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V12/276/pattern-ver1-serial/actor-sdk.sdk-core.core.core-shared.src.main.java.im.actor.core.viewmodel.GroupVM.java-create.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:45:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
-for(int i=0;i<str.length();i++){
+for(int i=0,DEFAULT_TIMEOUT2;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/3872/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ManageAccount.java-addNewUserAccount.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:45:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
-for(int i=0;i<str.length();i++){
+for(int i=0;i>str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:45:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
-for(int i=0;i<str.length();i++){
+for(int i=0,MAX_SERVICE_NODES;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/4395/pattern-ver1-serial/vipr-portal.com.emc.sa.common.src.java.com.emc.sa.zookeeper.ZkServiceDescriptors.java-start.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:45:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
-for(int i=0;i<str.length();i++){
+for(int i=0,MAX_ZK_WAIT_RETRY_TIMES;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7180/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.vdc.VdcOpHandler.java-waitForAllNodesAndReboot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:45:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
+break;
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:45:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
+return true;
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V45/3473/pattern-ver1-serial/src.main.java.com.fabegabe.cmd.CCCommand.java-onCommand.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:45:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
-for(int i=0;i<str.length();i++){
+for(int i=0;i<str.length();i--){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/4666/pattern-ver1-serial/src.main.java.com.deanveloper.playtimeplus.commands.playtime.subcommand.TopSubCmd.java-execute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:45:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
-for(int i=0;i<str.length();i++){
+for(int i=0,localLevel;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/1178/pattern-ver1-serial/wrapper.src.main.java.com.ankit.wrapper.Logger.java-w.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:45:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
+import java.util.ArrayList;
+
+import com.sun.javafx.scene.control.behavior.KeyBinding;
+
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
-for(int i=0;i<str.length();i++){
+for(int i=0;i<str.length();i++,new ArrayList<KeyBinding>()){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/314/pattern-ver1-serial/src.main.java.jfxtras.labs.internal.scene.control.behavior.SixteenSegmentBehavior.java-SixteenSegmentBehavior.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:45:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
-if(StringUtils.isEmpty(str)){
+if(StringUtils.isNotEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V22/4562/pattern-ver1-serial/yamj3-core.src.main.java.org.yamj.core.database.dao.MetadataDao.java-storeMovieCredit.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:45:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
-for(int i=0;i<str.length();i++){
+for(int i=0,_afterComposeMethodCache;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/5922/pattern-ver1-serial/zkbind.src.org.zkoss.bind.BindComposer.java-doAfterCompose.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:45:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
+import java.util.List;
+
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
-for(int i=0;i<str.length();i++){
+for(int i=0,mActions;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/428/pattern-ver1-serial/quickaction.src.main.java.com.imallan.quickaction.QuickActionOnTouchListener.java-onDown.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:46:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
-for(int i=0;i<str.length();i++){
+for(int i=0,mRelationId;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V16/910/pattern-ver1-serial/app.src.main.java.fr.sims.coachingproject.ui.fragment.RelationChatFragment.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:46:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 public static boolean isDigits(String str){
-if(StringUtils.isEmpty(str)){
+if(StringUtils.isEmpty(str.trim())){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:46:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
-return false;
+return true;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
-return true;
+return false;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/469/pattern-ver1-serial/src.ac.uk.susx.tag.filter.RegexFilter.java-matchAnnotation.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:46:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
-return false;
+return true;
 }
 }
-return true;
+return false;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/469/pattern-ver1-serial/src.ac.uk.susx.tag.filter.RegexFilter.java-matchAnnotation.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:46:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
+i++;
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:46:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
+i--;
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:48:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
+isDigits(str);
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/3252/pattern-ver1-serial/care-reporting.commcare-migration.src.main.java.org.motechproject.care.reporting.migration.task.MigrationTask.java-postToMotech.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:48:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
+isDigits(str);
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/3252/pattern-ver1-serial/care-reporting.commcare-migration.src.main.java.org.motechproject.care.reporting.migration.task.MigrationTask.java-postToMotech.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:48:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
-if(StringUtils.isEmpty(str)){
+if(StringUtils.isEmpty((str).toLowerCase())){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:48:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
-for(int i=0;i<str.length();i++){
+for(int i=0,continentName,countryCode;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/6266/pattern-ver1-serial/app.src.main.java.com.hyperion.dashdroid.radio.RadioListFragment.java-refresh.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:48:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
-return false;
+return (boolean)(false);
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:48:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
-return true;
+return (boolean)(true);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:48:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
+}
+while(true){
+
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:50:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
+i++;
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2011/V2/6609/pattern-ver1-serial/src.anonscanlations.downloader.chapter.NicoNicoChapter.java-download.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 1, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:50:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
+i++;
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2011/V2/6609/pattern-ver1-serial/src.anonscanlations.downloader.chapter.NicoNicoChapter.java-download.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 1, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:50:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
-if(StringUtils.isEmpty(str)){
+if(StringUtils.isEmpty((str).toUpperCase())){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7401/pattern-ver1-serial/Model.src.main.java.config.SensorParams.java-SensorParams.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:50:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
+import java.nio.charset.Charset;
+
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
-for(int i=0;i<str.length();i++){
+for(int i=0;i<str.length();i++,Charset.forName("UTF-8")){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3733/pattern-ver1-serial/Code.Part1.src.core.Intraprocedural.java-callgraph.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:50:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
-if(StringUtils.isEmpty(str)){
+if(!StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V12/6908/pattern-ver1-serial/mainModule.src.backend.building.ProductionBuilding.java-canBuild.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:50:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
+if(str.isEmpty()){
+return true;
+}
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/3286/pattern-ver1-serial/DatabaseMSCore.src.DatabaseMSCore.dbTypeInteger.java-canBeInitializedWith.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:50:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
+if(str.isEmpty()){
+return true;
+}
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/3286/pattern-ver1-serial/DatabaseMSCore.src.DatabaseMSCore.dbTypeInteger.java-canBeInitializedWith.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:51:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
+str=str;
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:51:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
+if(str.isEmpty()){
+return false;
+}
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4707/pattern-ver1-serial/src.main.java.org.jboss.pressgang.ccms.contentspec.processor.ContentSpecProcessor.java-processExistingTopicTags.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:51:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
+if(str.isEmpty()){
+return false;
+}
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4707/pattern-ver1-serial/src.main.java.org.jboss.pressgang.ccms.contentspec.processor.ContentSpecProcessor.java-processExistingTopicTags.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:51:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
+if(i==4){
+continue;
+}
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5508/pattern-ver1-serial/common.enhancedportals.item.ItemPortalModifierUpgrade.java-getSubItems.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:51:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
-if(StringUtils.isEmpty(str)){
+if(true){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:51:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
-if(StringUtils.isEmpty(str)){
+if(StringUtils.isEmpty(str)==false){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:51:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
+if(str!=null){
 if(StringUtils.isEmpty(str)){
 return false;
+}
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/4078/pattern-ver1-serial/com.profidatagroup.e4.advancedlaunch.src.ch.parisi.e4.advancedlaunch.tabs.LaunchTab.java-editLaunchConfiguration.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:51:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
-if(!Character.isDigit(str.charAt(i))){
+if(!Character.isDigit(str.charAt(i)-1)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V16/4594/pattern-ver1-serial/EzSignin.app.src.main.java.signin.ez.ezsignin.MainActivity.java-populateFieldsWithRecord.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:51:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
+int a=0;
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:51:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
+int a=0;
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:51:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
+int a=0;
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:51:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
+int a=0;
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:51:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
-if(StringUtils.isEmpty(str)){
+if(str!=null){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/691/pattern-ver1-serial/us.textrade.models.MatchesQueue.java-addTradeToQueue.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:51:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
+String OUTSTRING="";
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:51:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
+String OUTSTRING="";
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:51:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
+String OUTSTRING="";
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:51:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
+String OUTSTRING="";
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:51:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
-if(!Character.isDigit(str.charAt(i))){
+if(!Character.isDigit(str.charAt(i)*1000)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/3175/pattern-ver1-serial/src.de.fuberlin.wiwiss.d2rq.server.D2RServer.java-describe.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:51:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
-for(int i=0;i<str.length();i++){
+for(int i=0;i<str.length();){
+i++;
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V22/7304/pattern-ver1-serial/vipr-portal.com.iwave.isa.content.src.java.com.emc.sa.service.vipr.file.tasks.IngestUnmanagedFilesystems.java-ingestInChunks.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:51:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
+int Character=5;
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:51:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
-if(StringUtils.isEmpty(str)){
+if(StringUtils.isEmpty(str)==true){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:51:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:51:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
+int indexSelection=0;
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:51:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
+if(str.equals("sounds")){
+continue;
+}
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/2569/pattern-ver1-serial/src.main.java.net.dirtydeeds.discordsoundboard.chat.ListCategoriesProcessor.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:52:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
+int a=1;
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:52:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
+int a=1;
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:52:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
+int a=1;
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:52:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
+int a=1;
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:52:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
+if(str!=null){
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
+}
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V17/7646/pattern-ver1-serial/src.java.com.smi.travel.datalayer.dao.impl.TourOperationImpl.java-updateTourOperation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:52:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
+boolean Character=true;
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:52:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
+boolean b=true;
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:52:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
+boolean b=true;
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:52:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
+boolean b=true;
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:52:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
+boolean b=true;
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:52:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
+if(str==null){
+continue;
+}
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:52:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
-for(int i=0;i<str.length();i++){
+for(int i=0;i<str.length();Math.abs(i++)){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/6264/pattern-ver1-serial/src.main.java.com.metal.fetcher.fetcher.impl.WeiboFetcher.java-getRandomAccount.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:52:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
-if(!Character.isDigit(str.charAt(i))){
+if(!Character.isDigit(str.charAt(Math.abs(i)))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/6264/pattern-ver1-serial/src.main.java.com.metal.fetcher.fetcher.impl.WeiboFetcher.java-getRandomAccount.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:52:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
-if(!Character.isDigit(str.charAt(i))){
+if(!Character.isDigit(Math.abs(str.charAt(i)))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/6264/pattern-ver1-serial/src.main.java.com.metal.fetcher.fetcher.impl.WeiboFetcher.java-getRandomAccount.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:52:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
+return false;
+}
+if(str==null){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:52:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
+return false;
+}
+if(str==null){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:52:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
-if(!Character.isDigit(str.charAt(i))){
+if(!Character.isDigit(str.charAt(i)*-1)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1084/pattern-ver1-serial/Bank.src.entities.Account.java-returnLoan.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:52:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
+assert (str!=null);
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:52:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
+assert (str!=null);
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:52:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
+assert (!str.isEmpty());
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:52:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
+assert (!str.isEmpty());
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:52:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
+return false;
+}
+if(str.contains(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V43/6402/pattern-ver1-serial/src.edu.calpoly.android.imfree.DataStore.java-trueAddParseFriend.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:52:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
+if(str.startsWith("-")){
+return false;
+}
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/3084/pattern-ver1-serial/src.cdio.shared.FieldVerifier.java-isValidRbId.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:52:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
+if(str.startsWith("-")){
+return false;
+}
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/3084/pattern-ver1-serial/src.cdio.shared.FieldVerifier.java-isValidRbId.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:52:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
+if(str!=null){
+if(StringUtils.isEmpty(str)){
+return false;
+}
+for(int i=0;i<str.length();i++){
+if(!Character.isDigit(str.charAt(i))){
+return false;
+}
+}
+return true;
+}
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:52:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
+if(str!=null){
+if(!Character.isDigit(str.charAt(i))){
+return false;
+}
+}
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:53:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
+assert (str!=null);
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:53:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
+assert (str!=null);
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:53:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
+if(str.matches("[0-9]*")){
+return false;
+}
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/5036/pattern-ver1-serial/src.engine.PrinterServerTask1After.java-checkIfInputMatchStored.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:53:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
+if(str.matches("[0-9]*")){
+return false;
+}
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/5036/pattern-ver1-serial/src.engine.PrinterServerTask1After.java-checkIfInputMatchStored.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:53:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
+}
+if(str.isEmpty()){
+str=null;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:53:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
+}
+if(str.isEmpty()){
+str=null;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:53:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:53:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:53:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
-if(!Character.isDigit(str.charAt(i))){
+if(!Character.isDigit(str==null?null:str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V31/4299/pattern-ver1-serial/client.synapseJavaClient.src.main.java.org.sagebionetworks.client.SynapseClientImpl.java-uploadToS3FileHandle.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:53:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
-if(!Character.isDigit(str.charAt(i))){
+if(!Character.isDigit(str!=null?str.charAt(i):null)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/4302/pattern-ver1-serial/src.com.floreantpos.model.KitchenTicket.java-fromTicket.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:53:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:53:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
+assert (str!=null):"Appointments day is not allowed to be null!";
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:53:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
+assert (str!=null):"Appointments day is not allowed to be null!";
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:53:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
+import java.util.HashSet;
+
+import java.util.Collections;
+
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
+}
 }
+if(str.isEmpty()){
+str=null;
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/6949/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.db_models.DBUserProfile.java-removeConversationId.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:53:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
+if(str.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
+}
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:53:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
+if(str.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
+}
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:53:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
+}
+if(str.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:53:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
-if(!Character.isDigit(str.charAt(i))){
+if(!!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V12/6908/pattern-ver1-serial/mainModule.src.backend.building.ProductionBuilding.java-canBuild.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:53:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
+}
+if(str==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:53:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
+if(str==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:53:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
+if(str==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
+}
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:53:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
-if(!Character.isDigit(str.charAt(i))){
+if(true){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:53:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
-if(!Character.isDigit(str.charAt(i))){
+if(!Character.isDigit(str.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:53:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
-if(!Character.isDigit(str.charAt(i))){
+if(!Character.isDigit(str.charAt(i))&&false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/5079/pattern-ver1-serial/Server.src.server.model.players.packets.ClickNPC.java-processPacket.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:53:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
+}
+if(str.getClass().getSimpleName().startsWith("SystemException")){
+return true;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:53:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
+}
 }
+if(str.getClass().getSimpleName().startsWith("SystemException")){
+return true;
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:53:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
-if(!Character.isDigit(str.charAt(i))){
+if(!Character.isDigit(str.charAt(i))==true){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:54:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
-if(StringUtils.isEmpty(str)){
+if(StringUtils.isEmpty(str)&&!str.equals("全部")){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/6475/pattern-ver1-serial/src.main.java.com.morningsidevc.service.impl.FeedInfoServiceImpl.java-findFeeds.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:54:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
+if(str.startsWith("\r\n")){
+str=str.substring(2);
+}
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:54:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
+if(str.startsWith("\r\n")){
+str=str.substring(2);
+}
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:54:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
+}
+if(str.startsWith("/")){
+str=str.substring(1);
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V47/2604/pattern-ver1-serial/components.data-services.org.wso2.carbon.dataservices.core.src.main.java.org.wso2.carbon.dataservices.core.DBDeployer.java-createAxisOperation.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:54:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
+if(i==3){
+System.out.println("debug");
+}
 if(!Character.isDigit(str.charAt(i))){
 return false;
+}
+if(i==3){
+System.out.println("debug");
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:54:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
+}
 }
+if(str.endsWith("/")==false){
+str=str+"/";
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/627/pattern-ver1-serial/src.main.java.com.thunder.util.Util.java-restMap.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:54:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
+}
+if(str.endsWith("/")==false){
+str=str+"/";
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/627/pattern-ver1-serial/src.main.java.com.thunder.util.Util.java-restMap.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:54:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[1496,1516]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
+long startTime=System.currentTimeMillis();
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 14:54:22 CDT
--------------- END -----------------
Location : org.apache.commons.lang.math.NumberUtils.isAllZeros:[556, 559, 560, 561]#0.5773502691896258
Compute Candidate : 2019.09.07 AD at 14:54:38 CDT - 2019.09.07 AD at 15:02:38 CDT , PNumber : 11325, CandNumber : 139 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
+continue;
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:02:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
+import java.util.Collections;
+
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
-return false;
+return true;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4457/pattern-ver1-serial/library.src.main.java.com.gh.bmd.jrt.core.DefaultResultChannel.java-isOutputChannelOpen.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:02:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
+return false;
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:02:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
-if(str==null){
+if(str!=null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4111/pattern-ver1-serial/tephra-core.src.main.java.co.cask.tephra.snapshot.SnapshotCodecV4.java-encodeInProgress.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:02:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
+import java.util.Collection;
+
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
-for(int i=str.length()-1;i>=0;i--){
+for(int i=str.length()-1,myUid;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V12/276/pattern-ver1-serial/actor-sdk.sdk-core.core.core-shared.src.main.java.im.actor.core.viewmodel.GroupVM.java-create.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:02:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
-for(int i=str.length()-1;i>=0;i--){
+for(int i=str.length()-1,DEFAULT_TIMEOUT2;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/3872/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ManageAccount.java-addNewUserAccount.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:02:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
-for(int i=str.length()-1;i>=0;i--){
+for(int i=str.length()-1;i>0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/4108/pattern-ver1-serial/src.main.java.org.roaringbitmap.buffer.MappeableArrayContainer.java-inot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:02:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
-for(int i=str.length()-1;i>=0;i--){
+for(int i=str.length()-1,MAX_SERVICE_NODES;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/4395/pattern-ver1-serial/vipr-portal.com.emc.sa.common.src.java.com.emc.sa.zookeeper.ZkServiceDescriptors.java-start.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:02:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
-for(int i=str.length()-1;i>=0;i--){
+for(int i=str.length()-1,MAX_ZK_WAIT_RETRY_TIMES;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7180/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.vdc.VdcOpHandler.java-waitForAllNodesAndReboot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:03:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
+break;
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:03:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
-if(str.charAt(i)!='0'){
+if(str.charAt(i)=='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/6722/pattern-ver1-serial/collections.queue.IntArrayQueue.java-peek.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:03:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
-for(int i=str.length()-1;i>=0;i--){
+for(int i=str.length()-2;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/1120/pattern-ver1-serial/src.main.java.com.pratilipi.data.util.PratilipiDataUtil.java-updatePratilipiStats.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:03:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
-for(int i=str.length()-1;i>=0;i--){
+for(int i=str.length()-1,localLevel;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/1178/pattern-ver1-serial/wrapper.src.main.java.com.ankit.wrapper.Logger.java-w.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:03:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
-if(str.charAt(i)!='0'){
+if(str.charAt(i)<'0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/1616/pattern-ver1-serial/src.PileRPL.java-sub.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:03:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
-if(str.charAt(i)!='0'){
+if(str.charAt(i)>'0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/3765/pattern-ver1-serial/app.src.main.java.com.xlythe.sms.MessageActivity.java-onGlobalLayout.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:03:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
+import java.util.ArrayList;
+
+import com.sun.javafx.scene.control.behavior.KeyBinding;
+
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
-for(int i=str.length()-1;i>=0;i--){
+for(int i=str.length()-1;i>=0;i--,new ArrayList<KeyBinding>()){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/314/pattern-ver1-serial/src.main.java.jfxtras.labs.internal.scene.control.behavior.SixteenSegmentBehavior.java-SixteenSegmentBehavior.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:03:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
-for(int i=str.length()-1;i>=0;i--){
+for(int i=str.length()-1;i>=0.0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/3703/pattern-ver1-serial/Muehle_Master.src.de.dhbw.muehle.model.theme.Sound.java-fade.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:03:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
-for(int i=str.length()-1;i>=0;i--){
+for(int i=str.length()-1;i<=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V59/4156/pattern-ver1-serial/src.eduapp.level.quest.GroupingQuest.java-setResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:03:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
-for(int i=str.length()-1;i>=0;i--){
+for(int i=str.length()-1;i>=0;i++){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/12/pattern-ver1-serial/src.main.java.com.quadcoder.coinpet.page.signup.SignupFormFragment.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:03:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
-for(int i=str.length()-1;i>=0;i--){
+for(int i=str.length()-1,_afterComposeMethodCache;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/5922/pattern-ver1-serial/zkbind.src.org.zkoss.bind.BindComposer.java-doAfterCompose.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:03:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
+import java.util.List;
+
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
-for(int i=str.length()-1;i>=0;i--){
+for(int i=str.length()-1,mActions;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/428/pattern-ver1-serial/quickaction.src.main.java.com.imallan.quickaction.QuickActionOnTouchListener.java-onDown.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:03:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
-for(int i=str.length()-1;i>=0;i--){
+for(int i=str.length()-1,mRelationId;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V16/910/pattern-ver1-serial/app.src.main.java.fr.sims.coachingproject.ui.fragment.RelationChatFragment.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:03:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
-return true;
+return false;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/469/pattern-ver1-serial/src.ac.uk.susx.tag.filter.RegexFilter.java-matchAnnotation.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:03:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
+i++;
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:03:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
+i--;
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:03:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
+isAllZeros(str);
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/3252/pattern-ver1-serial/care-reporting.commcare-migration.src.main.java.org.motechproject.care.reporting.migration.task.MigrationTask.java-postToMotech.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:03:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
+isAllZeros(str);
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/3252/pattern-ver1-serial/care-reporting.commcare-migration.src.main.java.org.motechproject.care.reporting.migration.task.MigrationTask.java-postToMotech.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:03:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
-return true;
+return false;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
-return false;
+return true;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/606/pattern-ver1-serial/aws-java-sdk-s3.src.main.java.com.amazonaws.services.s3.internal.BucketNameUtils.java-isValidV2BucketName.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:03:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
-for(int i=str.length()-1;i>=0;i--){
+for(int i=str.length()-1,continentName,countryCode;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/6266/pattern-ver1-serial/app.src.main.java.com.hyperion.dashdroid.radio.RadioListFragment.java-refresh.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:03:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
-return false;
+return (boolean)(false);
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:03:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
+}
+while(true){
+
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:03:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
-for(int i=str.length()-1;i>=0;i--){
+for(int i=str.length()-1,userEmail;i>=0;i--,i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V15/3912/pattern-ver1-serial/app.src.main.java.finalproject.ee461l.journey.JoinTrip.java-searchForUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:03:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
+import java.nio.charset.Charset;
+
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
-for(int i=str.length()-1;i>=0;i--){
+for(int i=str.length()-1;i>=0;i--,Charset.forName("UTF-8")){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3733/pattern-ver1-serial/Code.Part1.src.core.Intraprocedural.java-callgraph.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:03:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
-if(str==null){
+if(StringUtils.isEmpty(str)){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/130/pattern-ver1-serial/yamj3-core.src.main.java.org.yamj.core.web.HTMLTools.java-replaceHtmlTags.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:04:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
-if(str==null){
+if(str.equals(null)){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/343/pattern-ver1-serial/src.gui.batches.ItemBatchView.java-selectProduct.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:04:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
-if(str==null){
+if(str.isEmpty()){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/7829/pattern-ver1-serial/app.src.main.java.de.tum.in.tumcampusapp.activities.TransportationDetailsActivity.java-onLoadInBackground.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:04:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
+if(str.isEmpty()){
+return true;
+}
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/3286/pattern-ver1-serial/DatabaseMSCore.src.DatabaseMSCore.dbTypeInteger.java-canBeInitializedWith.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:04:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
+if(str.isEmpty()){
+return true;
+}
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/3286/pattern-ver1-serial/DatabaseMSCore.src.DatabaseMSCore.dbTypeInteger.java-canBeInitializedWith.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:04:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
+str=str;
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:04:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
+if(str!=null){
 if(str.charAt(i)!='0'){
 return false;
+}
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4155/pattern-ver1-serial/Calendar.src.edu.wpi.cs.wpisuitetng.modules.calendar.view.AddEventPanel.java-populateEvent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:04:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
+if(str.isEmpty()){
+return false;
+}
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4707/pattern-ver1-serial/src.main.java.org.jboss.pressgang.ccms.contentspec.processor.ContentSpecProcessor.java-processExistingTopicTags.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:04:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
+if(str.isEmpty()){
+return false;
+}
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4707/pattern-ver1-serial/src.main.java.org.jboss.pressgang.ccms.contentspec.processor.ContentSpecProcessor.java-processExistingTopicTags.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:04:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
+if(i==4){
+continue;
+}
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5508/pattern-ver1-serial/common.enhancedportals.item.ItemPortalModifierUpgrade.java-getSubItems.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:04:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
-if(str==null){
+if(true){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:04:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
+int a=0;
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:04:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
+int a=0;
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:04:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
+int a=0;
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:04:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
+int a=0;
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:04:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
+String OUTSTRING="";
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:04:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
+String OUTSTRING="";
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:04:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
+String OUTSTRING="";
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:04:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
+String OUTSTRING="";
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:04:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:04:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
-if(str==null){
+if(str.equalsIgnoreCase(null)){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/409/pattern-ver1-serial/src.com.wasteofplastic.askyblock.ASkyBlock.java-loadPluginConfig.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:04:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
+int indexSelection=0;
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:04:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
-if(str.charAt(i)!='0'){
+if(i!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/5499/pattern-ver1-serial/src.dao.PublicationDAO.java-listComents.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:04:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
+if(str.equals("sounds")){
+continue;
+}
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/2569/pattern-ver1-serial/src.main.java.net.dirtydeeds.discordsoundboard.chat.ListCategoriesProcessor.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:04:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
+int a=1;
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:04:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
+int a=1;
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:05:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
+int a=1;
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:05:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
+int a=1;
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:05:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
-for(int i=str.length()-1;i>=0;i--){
+for(int i=str.length()/2-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V10/384/pattern-ver1-serial/src.com.gmail.zhou1992228.building.BuildingEntity.java-getMidPos.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:05:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
+boolean b=true;
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:05:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
+boolean b=true;
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:05:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
+boolean b=true;
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:05:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
+boolean b=true;
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:05:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
+if(str==null){
+continue;
+}
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:05:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
-for(int i=str.length()-1;i>=0;i--){
+for(int i=str.length()-1;i>=0;Math.abs(i--)){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/6264/pattern-ver1-serial/src.main.java.com.metal.fetcher.fetcher.impl.WeiboFetcher.java-getRandomAccount.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:05:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
-if(str.charAt(i)!='0'){
+if(str.charAt(Math.abs(i))!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/6264/pattern-ver1-serial/src.main.java.com.metal.fetcher.fetcher.impl.WeiboFetcher.java-getRandomAccount.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:05:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
+return false;
+}
+if(str==null){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:05:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
+}
+if(str==null){
+return false;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:05:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
-if(str==null){
+if(str==null||str.isEmpty()){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/354/pattern-ver1-serial/hapi-fhir-base.src.main.java.ca.uhn.fhir.parser.XmlParser.java-encodeCompositeElementChildrenToStreamWriter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:05:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
+}
 }
+if(str==null){
+return false;
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:05:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
+assert (str!=null);
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:05:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
+assert (str!=null);
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:05:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
+assert (!str.isEmpty());
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
+assert (!str.isEmpty());
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:05:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
+}
+if(str.contains(str)){
+return false;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V43/6402/pattern-ver1-serial/src.edu.calpoly.android.imfree.DataStore.java-trueAddParseFriend.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:05:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
+}
 }
+if(str.contains(str)){
+return false;
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V43/6402/pattern-ver1-serial/src.edu.calpoly.android.imfree.DataStore.java-trueAddParseFriend.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:05:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
+if(str.startsWith("-")){
+return false;
+}
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/3084/pattern-ver1-serial/src.cdio.shared.FieldVerifier.java-isValidRbId.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:05:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
+if(str.startsWith("-")){
+return false;
+}
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/3084/pattern-ver1-serial/src.cdio.shared.FieldVerifier.java-isValidRbId.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
+if(str!=null){
+if(str.charAt(i)!='0'){
+return false;
+}
+}
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:05:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
+if(str!=null){
+if(str==null){
+return true;
+}
+for(int i=str.length()-1;i>=0;i--){
+if(str.charAt(i)!='0'){
+return false;
+}
+}
+return str.length()>0;
+}
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:05:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
+assert (str!=null);
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:05:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
+assert (str!=null);
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:05:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
+if(str.matches("[0-9]*")){
+return false;
+}
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/5036/pattern-ver1-serial/src.engine.PrinterServerTask1After.java-checkIfInputMatchStored.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:06:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
+if(str.matches("[0-9]*")){
+return false;
+}
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/5036/pattern-ver1-serial/src.engine.PrinterServerTask1After.java-checkIfInputMatchStored.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:06:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
-if(str.charAt(i)!='0'){
+if(str!=null){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1221/pattern-ver1-serial/CransJavaAI.trunk.src.com.springrts.ai.crans.DGunControllerHandler.java-update.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:06:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
-if(str==null){
+if(str==null||"查看红包".equals(str)){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
-if(str.charAt(i)!='0'){
+if(str.charAt(i)!='0'||"查看红包".equals(str.charAt(i))){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:06:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
-if(str.charAt(i)!='0'){
+if(str.charAt(i)!='0'||str.charAt(i)==3){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:06:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
-if(str.charAt(i)!='0'){
+if(str.isEmpty()){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7675/pattern-ver1-serial/libsrc.ffdec_lib.src.com.jpexs.decompiler.flash.action.swf4.ActionGotoFrame2.java-execute.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:06:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
-if(str.charAt(i)!='0'){
+if(str!=null&&str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V15/6389/pattern-ver1-serial/src.org.ohmage.conditionevaluator.comparator.SingleChoiceDataPointComparator.java-lessThan.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:06:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
-return true;
+return str.length()>0;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
-return str.length()>0;
+return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/469/pattern-ver1-serial/src.ac.uk.susx.tag.filter.RegexFilter.java-matchAnnotation.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:06:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
-return str.length()>0;
+return false;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/469/pattern-ver1-serial/src.ac.uk.susx.tag.filter.RegexFilter.java-matchAnnotation.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:06:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
-return false;
+return str.length()>0;
 }
 }
-return str.length()>0;
+return false;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/469/pattern-ver1-serial/src.ac.uk.susx.tag.filter.RegexFilter.java-matchAnnotation.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:06:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
+}
+if(str.isEmpty()){
+str=null;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:06:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
+}
+if(str.isEmpty()){
+str=null;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:06:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
-if(str==null){
+if(str==null||str==""){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V38/7341/pattern-ver1-serial/log210_webproject_BDD.src.RechercheLivre.java-RechercheLivre.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:06:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
-if(str.charAt(i)!='0'){
+if(str.charAt(i)<0||str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:06:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
-if(str.charAt(i)!='0'){
+if(true){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:06:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
-if(str.charAt(i)!='0'){
+if(str.charAt(i)!='0'==false){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:06:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
-if(str.charAt(i)!='0'){
+if(str.charAt(i)!='0'||str.charAt(i)==Long.MIN_VALUE){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:06:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
-if(str.charAt(i)!='0'){
+if(str.matches("/+[\\w\\.\\d/]+.*")){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V20/5089/pattern-ver1-serial/exportLibraries.cimadapter.src.main.java.com.emc.storageos.cimadapter.processors.CimIndicationSet.java-processProperty.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:06:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
-if(str.charAt(i)!='0'){
+if(str.charAt(i)!='0'&&false){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/5079/pattern-ver1-serial/Server.src.server.model.players.packets.ClickNPC.java-processPacket.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:06:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
-if(str.charAt(i)!='0'){
+if(str.charAt(i)!='0'||str.charAt(i)==0){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:06:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
-if(str.charAt(i)!='0'){
+if(str.charAt(i)!='0'||str.charAt(i)>9){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:06:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:06:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:06:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
-if(str.charAt(i)!='0'){
+if(str.charAt(i)!='0'&&str.charAt(i)<4000000){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:06:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
-if(str==null){
+if(str==null||str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4704/pattern-ver1-serial/src.main.java.com.alibaba.fastjson.parser.ParserConfig.java-createJavaBeanDeserializer.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:07:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
-if(str==null){
+if(str==null||str.trim().isEmpty()){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1097/pattern-ver1-serial/src.bakatxt.core.BakaProcessor.java-editEndTime.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:07:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
-if(str.charAt(i)!='0'){
+if(Double.isNaN(str.charAt(i))){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:07:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
-if(str.charAt(i)!='0'){
+if(str.contains(".")){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V9/2868/pattern-ver1-serial/src.main.java.play.templates.GroovyTemplate.java-invokeTag.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:07:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
-if(str.charAt(i)!='0'){
+if(str.charAt(i)!='0'==true){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:07:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
-if(str.charAt(i)!='0'){
+if(str.charAt(i)!='0'&&str.charAt(i)!=9999){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:07:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
-if(str.charAt(i)!='0'){
+if('0'>0&&str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:07:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:07:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
-if(str.charAt(i)!='0'){
+if(str==null||str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V31/1012/pattern-ver1-serial/common.buildcraft.robotics.StationIndex.java-equals.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:07:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
+assert (str!=null):"Appointments day is not allowed to be null!";
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:07:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
+assert (str!=null):"Appointments day is not allowed to be null!";
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:07:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
+import java.util.HashSet;
+
+import java.util.Collections;
+
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
+}
 }
+if(str.isEmpty()){
+str=null;
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/6949/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.db_models.DBUserProfile.java-removeConversationId.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:07:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
+if(str.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
+}
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:07:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
+}
+if(str.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:07:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
+if(str.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
+}
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:07:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
+}
 }
+if(str.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:07:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
+}
+if(str==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:07:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
+if(str==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:07:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
+}
 }
+if(str==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:07:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
+}
+if(str.getClass().getSimpleName().startsWith("SystemException")){
+return true;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:07:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
+}
 }
+if(str.getClass().getSimpleName().startsWith("SystemException")){
+return true;
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:07:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
-if(str==null){
+if(str==null&&!str.equals("")){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/6260/pattern-ver1-serial/Client.src.com.way.chat.activity.ChatActivity.java-onItemClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:07:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
+if(str.startsWith("\r\n")){
+str=str.substring(2);
+}
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:07:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
+if(str.startsWith("\r\n")){
+str=str.substring(2);
+}
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:07:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
+}
+if(str.startsWith("/")){
+str=str.substring(1);
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V47/2604/pattern-ver1-serial/components.data-services.org.wso2.carbon.dataservices.core.src.main.java.org.wso2.carbon.dataservices.core.DBDeployer.java-createAxisOperation.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:07:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
+if(i==3){
+System.out.println("debug");
+}
 if(str.charAt(i)!='0'){
 return false;
+}
+if(i==3){
+System.out.println("debug");
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:07:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
+}
 }
+if(str.endsWith("/")==false){
+str=str+"/";
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/627/pattern-ver1-serial/src.main.java.com.thunder.util.Util.java-restMap.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:07:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
+}
+if(str.endsWith("/")==false){
+str=str+"/";
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/627/pattern-ver1-serial/src.main.java.com.thunder.util.Util.java-restMap.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:08:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[547,565]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
+long startTime=System.currentTimeMillis();
 if(str.charAt(i)!='0'){
 return false;
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:08:03 CDT
--------------- END -----------------
Location : org.apache.commons.lang.StringUtils.isEmpty:[185]#0.5
Compute Candidate : 2019.09.07 AD at 15:08:19 CDT - 2019.09.07 AD at 15:12:23 CDT , PNumber : 11307, CandNumber : 31 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[166,186]
------------Candidate---------------
 public static boolean isEmpty(String str){
-return str==null||str.length()==0;
+return str!=null||str.length()==0;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4111/pattern-ver1-serial/tephra-core.src.main.java.co.cask.tephra.snapshot.SnapshotCodecV4.java-encodeInProgress.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:12:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[166,186]
------------Candidate---------------
 public static boolean isEmpty(String str){
-return str==null||str.length()==0;
+return str==null&&str.length()==0;
 }

PATTERN : /home/jiajun/GithubData/2015/V7/7763/pattern-ver1-serial/app.src.main.java.cheaphone.gui.Offerta.java-setOffert.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:12:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[166,186]
------------Candidate---------------
 public static boolean isEmpty(String str){
-return str==null||str.length()==0;
+return str==null||str.length()<=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:12:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[166,186]
------------Candidate---------------
 public static boolean isEmpty(String str){
-return str==null||str.length()==0;
+return str==null||str.length()>=0;
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:12:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[166,186]
------------Candidate---------------
 public static boolean isEmpty(String str){
-return str==null||str.length()==0;
+return str==null||str.length()!=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:12:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[166,186]
------------Candidate---------------
 public static boolean isEmpty(String str){
-return str==null||str.length()==0;
+return str==null||str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:12:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[166,186]
------------Candidate---------------
 public static boolean isEmpty(String str){
-return str==null||str.length()==0;
+return str!=null&&str.length()==0;
 }

PATTERN : /home/jiajun/GithubData/2016/V10/7445/pattern-ver1-serial/bungeecord.src.main.java.com.vexsoftware.votifier.bungee.forwarding.OnlineForwardPluginMessagingForwardingSource.java-forward.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:12:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[166,186]
------------Candidate---------------
 public static boolean isEmpty(String str){
+if(str.isEmpty()){
+return true;
+}
 return str==null||str.length()==0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/3286/pattern-ver1-serial/DatabaseMSCore.src.DatabaseMSCore.dbTypeInteger.java-canBeInitializedWith.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:12:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[166,186]
------------Candidate---------------
 public static boolean isEmpty(String str){
+if(str.isEmpty()){
+return false;
+}
 return str==null||str.length()==0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4707/pattern-ver1-serial/src.main.java.org.jboss.pressgang.ccms.contentspec.processor.ContentSpecProcessor.java-processExistingTopicTags.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:13:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[166,186]
------------Candidate---------------
 public static boolean isEmpty(String str){
+int a=0;
 return str==null||str.length()==0;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:13:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[166,186]
------------Candidate---------------
 public static boolean isEmpty(String str){
+String OUTSTRING="";
 return str==null||str.length()==0;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:13:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[166,186]
------------Candidate---------------
 public static boolean isEmpty(String str){
-return str==null||str.length()==0;
+return "Chrome".equals(str)||str.length()==0;
 }

PATTERN : /home/jiajun/GithubData/2016/V17/4219/pattern-ver1-serial/src.browsermator.com.STAppController.java-itemStateChanged.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:13:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[166,186]
------------Candidate---------------
 public static boolean isEmpty(String str){
+int a=1;
 return str==null||str.length()==0;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:13:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[166,186]
------------Candidate---------------
 public static boolean isEmpty(String str){
+boolean b=true;
 return str==null||str.length()==0;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:13:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[166,186]
------------Candidate---------------
 public static boolean isEmpty(String str){
-return str==null||str.length()==0;
+return str==null||str==null;
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1221/pattern-ver1-serial/CransJavaAI.trunk.src.com.springrts.ai.crans.DGunControllerHandler.java-update.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:23:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[166,186]
------------Candidate---------------
 public static boolean isEmpty(String str){
-return str==null||str.length()==0;
+return str==null||str.isEmpty();
 }

PATTERN : /home/jiajun/GithubData/2015/V13/2794/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.plugins.VNXeCommunicationInterface.java-discoverIscsiPorts.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:23:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[166,186]
------------Candidate---------------
 public static boolean isEmpty(String str){
+assert (str!=null);
 return str==null||str.length()==0;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:23:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[166,186]
------------Candidate---------------
 public static boolean isEmpty(String str){
+if(str.contains(str)){
+return false;
+}
 return str==null||str.length()==0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V43/6402/pattern-ver1-serial/src.edu.calpoly.android.imfree.DataStore.java-trueAddParseFriend.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:23:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[166,186]
------------Candidate---------------
 public static boolean isEmpty(String str){
+if(str.startsWith("-")){
+return false;
+}
 return str==null||str.length()==0;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/3084/pattern-ver1-serial/src.cdio.shared.FieldVerifier.java-isValidRbId.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:24:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[166,186]
------------Candidate---------------
 public static boolean isEmpty(String str){
+if(str!=null){
+return str==null||str.length()==0;
+}
 return str==null||str.length()==0;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:24:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[166,186]
------------Candidate---------------
 public static boolean isEmpty(String str){
+if(str.matches("[0-9]*")){
+return false;
+}
 return str==null||str.length()==0;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/5036/pattern-ver1-serial/src.engine.PrinterServerTask1After.java-checkIfInputMatchStored.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:24:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[166,186]
------------Candidate---------------
 public static boolean isEmpty(String str){
+assert (str!=null):"Appointments day is not allowed to be null!";
 return str==null||str.length()==0;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:24:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[166,186]
------------Candidate---------------
 public static boolean isEmpty(String str){
+if(str.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
+}
 return str==null||str.length()==0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:24:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[166,186]
------------Candidate---------------
 public static boolean isEmpty(String str){
+if(str==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 return str==null||str.length()==0;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[166,186]
------------Candidate---------------
 public static boolean isEmpty(String str){
-return str==null||str.length()==0;
+return str==null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/4706/pattern-ver1-serial/titan-core.src.main.java.com.thinkaurelius.titan.graphdb.query.vertex.AbstractVertexCentricQueryBuilder.java-isPartitionedVertex.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:34:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[166,186]
------------Candidate---------------
 public static boolean isEmpty(String str){
-return str==null||str.length()==0;
+return false;
 }

PATTERN : /home/jiajun/GithubData/2011/V2/2886/pattern-ver1-serial/src.freenet.node.CHKInsertSender.java-shouldTimeout.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:34:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[166,186]
------------Candidate---------------
+import java.util.Collections;
+
 public static boolean isEmpty(String str){
-return str==null||str.length()==0;
+return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4457/pattern-ver1-serial/library.src.main.java.com.gh.bmd.jrt.core.DefaultResultChannel.java-isOutputChannelOpen.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:34:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[166,186]
------------Candidate---------------
 public static boolean isEmpty(String str){
-return str==null||str.length()==0;
+return str.length()==0;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/6229/pattern-ver1-serial/Mage.Sets.src.mage.sets.betrayersofkamigawa.TomorrowAzamisFamiliar.java-applies.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:34:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[166,186]
------------Candidate---------------
 public static boolean isEmpty(String str){
-return str==null||str.length()==0;
+return str==null||str.length()==0||str.length()==';';
 }

PATTERN : /home/jiajun/GithubData/2015/V9/2929/pattern-ver1-serial/src.main.java.com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck.java-isCharacterValidAfterGenericEnd.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:34:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[166,186]
------------Candidate---------------
 public static boolean isEmpty(String str){
+if(str.startsWith("\r\n")){
+str=str.substring(2);
+}
 return str==null||str.length()==0;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:34:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[166,186]
------------Candidate---------------
 public static boolean isEmpty(String str){
-return str==null||str.length()==0;
+return (boolean)(str==null||str.length()==0);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:35:02 CDT
--------------- END -----------------
Location : org.apache.commons.lang.StringUtils.isBlank:[223, 226, 227, 228]#0.5
Compute Candidate : 2019.09.07 AD at 15:35:19 CDT - 2019.09.07 AD at 15:48:42 CDT , PNumber : 11299, CandNumber : 160 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
+continue;
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:48:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
+import java.util.Collections;
+
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
-return false;
+return true;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4457/pattern-ver1-serial/library.src.main.java.com.gh.bmd.jrt.core.DefaultResultChannel.java-isOutputChannelOpen.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:48:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
+return false;
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:48:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
-if(str==null||(strLen=str.length())==0){
+if(str!=null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4111/pattern-ver1-serial/tephra-core.src.main.java.co.cask.tephra.snapshot.SnapshotCodecV4.java-encodeInProgress.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:48:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
-for(int i=0;i<strLen;i++){
+for(int i=0;strLen<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7268/pattern-ver1-serial/src.org.easypr.core.CharsSegment.java-SortRect.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:48:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
-for(int i=0;i<strLen;i++){
+for(int i=0;i<=strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:48:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
+import java.util.Collection;
+
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
-for(int i=0;i<strLen;i++){
+for(int i=0,myUid;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V12/276/pattern-ver1-serial/actor-sdk.sdk-core.core.core-shared.src.main.java.im.actor.core.viewmodel.GroupVM.java-create.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:49:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
-for(int i=0;i<strLen;i++){
+for(int i=0,DEFAULT_TIMEOUT2;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/3872/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ManageAccount.java-addNewUserAccount.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:49:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
-for(int i=0;i<strLen;i++){
+for(int i=0;i>strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:49:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
-for(int i=0;i<strLen;i++){
+for(int i=0,MAX_SERVICE_NODES;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/4395/pattern-ver1-serial/vipr-portal.com.emc.sa.common.src.java.com.emc.sa.zookeeper.ZkServiceDescriptors.java-start.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:49:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
-for(int i=0;i<strLen;i++){
+for(int i=0,MAX_ZK_WAIT_RETRY_TIMES;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7180/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.vdc.VdcOpHandler.java-waitForAllNodesAndReboot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:49:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
+break;
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:49:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
-if(str==null||(strLen=str.length())==0){
+if(str==null||(strLen=str.length())<=0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:49:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
-for(int i=0;i<strLen;i++){
+for(int i=0;i<strLen;i--){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/4666/pattern-ver1-serial/src.main.java.com.deanveloper.playtimeplus.commands.playtime.subcommand.TopSubCmd.java-execute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:49:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
-if(str==null||(strLen=str.length())==0){
+if(str==null||(strLen=str.length())>=0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:49:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
-if(str==null||(strLen=str.length())==0){
+if(str==null||(strLen=str.length())!=0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:49:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
-for(int i=0;i<strLen;i++){
+for(int i=0,localLevel;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/1178/pattern-ver1-serial/wrapper.src.main.java.com.ankit.wrapper.Logger.java-w.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:49:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
-if(str==null||(strLen=str.length())==0){
+if(str==null||(strLen=str.length())>0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:49:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
+import java.util.ArrayList;
+
+import com.sun.javafx.scene.control.behavior.KeyBinding;
+
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
-for(int i=0;i<strLen;i++){
+for(int i=0;i<strLen;i++,new ArrayList<KeyBinding>()){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/314/pattern-ver1-serial/src.main.java.jfxtras.labs.internal.scene.control.behavior.SixteenSegmentBehavior.java-SixteenSegmentBehavior.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:49:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
-for(int i=0;i<strLen;i++){
+for(int i=0;i<strLen;strLen++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4470/pattern-ver1-serial/core.src.com.esbjon.inventories.Inventory.java-commandTransferTo.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:49:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
-if((Character.isWhitespace(str.charAt(i))==false)){
+if((Character.isWhitespace(str.charAt(i))!=false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V26/4543/pattern-ver1-serial/launcher.src.main.java.com.benny.openlauncher.widget.GridAppDrawer.java-readyForDrag.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:49:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
-for(int i=0;i<strLen;i++){
+for(int i=0,_afterComposeMethodCache;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/5922/pattern-ver1-serial/zkbind.src.org.zkoss.bind.BindComposer.java-doAfterCompose.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:49:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
+import java.util.List;
+
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
-for(int i=0;i<strLen;i++){
+for(int i=0,mActions;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/428/pattern-ver1-serial/quickaction.src.main.java.com.imallan.quickaction.QuickActionOnTouchListener.java-onDown.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:49:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
-for(int i=0;i<strLen;i++){
+for(int i=0;i<strLen;i++,new ArrayList<>()){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V43/1043/pattern-ver1-serial/src.main.java.application.controllers.MainController.java-switchScene.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:49:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
-for(int i=0;i<strLen;i++){
+for(int i=0,mRelationId;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V16/910/pattern-ver1-serial/app.src.main.java.fr.sims.coachingproject.ui.fragment.RelationChatFragment.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:49:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
-if(str==null||(strLen=str.length())==0){
+if(str==null||(strLen=1)==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:49:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
-if(str==null||(strLen=str.length())==0){
+if(str==null||(strLen=-1)==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:49:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
-if(str==null||(strLen=str.length())==0){
+if(str==null||(strLen=0)==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V32/6155/pattern-ver1-serial/SideScroller.src.net.masterzach32.sidescroller.entity.enemy.Boss.java-Boss.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:50:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
-return true;
+return false;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/469/pattern-ver1-serial/src.ac.uk.susx.tag.filter.RegexFilter.java-matchAnnotation.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:50:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
-return true;
+return false;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/469/pattern-ver1-serial/src.ac.uk.susx.tag.filter.RegexFilter.java-matchAnnotation.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:50:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
-return false;
+return true;
 }
 }
-return true;
+return false;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/469/pattern-ver1-serial/src.ac.uk.susx.tag.filter.RegexFilter.java-matchAnnotation.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:50:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
+i++;
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:50:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
+strLen++;
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:50:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
+strLen++;
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:50:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
+i--;
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:50:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
+strLen--;
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:50:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
+strLen--;
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:50:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
-if(str==null||(strLen=str.length())==0){
+if(str==null||(strLen=2)==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/2316/pattern-ver1-serial/TaskScheduler.src.ApplicationWindow.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:50:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
+isBlank(str);
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/3252/pattern-ver1-serial/care-reporting.commcare-migration.src.main.java.org.motechproject.care.reporting.migration.task.MigrationTask.java-postToMotech.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:50:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
+isBlank(str);
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/3252/pattern-ver1-serial/care-reporting.commcare-migration.src.main.java.org.motechproject.care.reporting.migration.task.MigrationTask.java-postToMotech.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:50:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
-return true;
+return false;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
-return false;
+return true;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/606/pattern-ver1-serial/aws-java-sdk-s3.src.main.java.com.amazonaws.services.s3.internal.BucketNameUtils.java-isValidV2BucketName.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:50:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
-for(int i=0;i<strLen;i++){
+for(int i=0,continentName,countryCode;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/6266/pattern-ver1-serial/app.src.main.java.com.hyperion.dashdroid.radio.RadioListFragment.java-refresh.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:50:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
-return false;
+return (boolean)(false);
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:50:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
-for(int i=0;i<strLen;i++){
+for(int i=0;strLen<i;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V32/3724/pattern-ver1-serial/Fanorona.java-isPossibleCapturingMove.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:50:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
+}
+while(true){
+
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:50:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
-for(int i=0;i<strLen;i++){
+for(int i=0,userEmail;i<strLen;i++,i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V15/3912/pattern-ver1-serial/app.src.main.java.finalproject.ee461l.journey.JoinTrip.java-searchForUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:50:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
+i++;
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2011/V2/6609/pattern-ver1-serial/src.anonscanlations.downloader.chapter.NicoNicoChapter.java-download.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 1, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:50:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
+i++;
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2011/V2/6609/pattern-ver1-serial/src.anonscanlations.downloader.chapter.NicoNicoChapter.java-download.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 1, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:50:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
-if(str==null||(strLen=str.length())==0){
+if(str==null||(strLen=10)==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/386/pattern-ver1-serial/GlassApp.HackathonPerseusGlass.src.com.github.barcodeeye.scan.ResultsActivity.java-onDetected.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:51:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
+import java.nio.charset.Charset;
+
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
-for(int i=0;i<strLen;i++){
+for(int i=0;i<strLen;i++,Charset.forName("UTF-8")){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3733/pattern-ver1-serial/Code.Part1.src.core.Intraprocedural.java-callgraph.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:51:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
+if(str.isEmpty()){
+return true;
+}
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/3286/pattern-ver1-serial/DatabaseMSCore.src.DatabaseMSCore.dbTypeInteger.java-canBeInitializedWith.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:51:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
+if(str.isEmpty()){
+return true;
+}
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/3286/pattern-ver1-serial/DatabaseMSCore.src.DatabaseMSCore.dbTypeInteger.java-canBeInitializedWith.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:51:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
+str=str;
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:51:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
+str=str;
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:51:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
+if(str.isEmpty()){
+return false;
+}
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4707/pattern-ver1-serial/src.main.java.org.jboss.pressgang.ccms.contentspec.processor.ContentSpecProcessor.java-processExistingTopicTags.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:51:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
+if(str.isEmpty()){
+return false;
+}
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4707/pattern-ver1-serial/src.main.java.org.jboss.pressgang.ccms.contentspec.processor.ContentSpecProcessor.java-processExistingTopicTags.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:51:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
+if(i==4){
+continue;
+}
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5508/pattern-ver1-serial/common.enhancedportals.item.ItemPortalModifierUpgrade.java-getSubItems.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:51:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
+strLen=1000;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V4/3726/pattern-ver1-serial/WeatherService.src.weatherservice.StatisticsCalculator.java-MinWindSpeed.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:51:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
-if((Character.isWhitespace(str.charAt(i))==false)){
+if((Character.isWhitespace(str.charAt(i)-1)==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V16/4594/pattern-ver1-serial/EzSignin.app.src.main.java.signin.ez.ezsignin.MainActivity.java-populateFieldsWithRecord.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:51:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
+int a=0;
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:51:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
+int a=0;
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:51:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
+int a=0;
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:51:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
+int a=0;
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:51:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
+String OUTSTRING="";
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:51:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
+String OUTSTRING="";
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:51:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
+String OUTSTRING="";
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:51:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
+String OUTSTRING="";
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:51:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
-if((Character.isWhitespace(str.charAt(i))==false)){
+if((Character.isWhitespace(str.charAt(i)*1000)==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/3175/pattern-ver1-serial/src.de.fuberlin.wiwiss.d2rq.server.D2RServer.java-describe.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:51:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
-for(int i=0;i<strLen;i++){
+for(int i=0;i<strLen;){
+i++;
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V22/7304/pattern-ver1-serial/vipr-portal.com.iwave.isa.content.src.java.com.emc.sa.service.vipr.file.tasks.IngestUnmanagedFilesystems.java-ingestInChunks.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:51:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:51:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
+int indexSelection=0;
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:52:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
+int indexSelection=0;
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:52:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
+if(str.equals("sounds")){
+continue;
+}
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/2569/pattern-ver1-serial/src.main.java.net.dirtydeeds.discordsoundboard.chat.ListCategoriesProcessor.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:52:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
-if(str==null||(strLen=str.length())==0){
+if("Chrome".equals(str)||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V17/4219/pattern-ver1-serial/src.browsermator.com.STAppController.java-itemStateChanged.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:52:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
+int a=1;
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:52:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
+int a=1;
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:52:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
+int a=1;
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:52:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
+int a=1;
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:52:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
+boolean Character=true;
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:52:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
+boolean b=true;
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:52:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
+boolean b=true;
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:52:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
+boolean b=true;
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:52:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
+boolean b=true;
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:52:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
-if(str==null||(strLen=str.length())==0){
+if(str==null||(strLen=str.length()+1)==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5032/pattern-ver1-serial/mapreduce.src.contrib.streaming.src.java.org.wikimedia.wikihadoop.StreamWikiDumpInputFormat.java-MyRecordReader.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:52:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
+if(str==null){
+continue;
+}
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:52:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
-for(int i=0;i<strLen;i++){
+for(int i=0;i<strLen;Math.abs(i++)){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/6264/pattern-ver1-serial/src.main.java.com.metal.fetcher.fetcher.impl.WeiboFetcher.java-getRandomAccount.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:52:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
-if((Character.isWhitespace(str.charAt(i))==false)){
+if((Character.isWhitespace(str.charAt(Math.abs(i)))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/6264/pattern-ver1-serial/src.main.java.com.metal.fetcher.fetcher.impl.WeiboFetcher.java-getRandomAccount.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:52:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
-if((Character.isWhitespace(str.charAt(i))==false)){
+if((Character.isWhitespace(Math.abs(str.charAt(i)))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/6264/pattern-ver1-serial/src.main.java.com.metal.fetcher.fetcher.impl.WeiboFetcher.java-getRandomAccount.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:52:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
+return false;
+}
+if(str==null){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:52:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
+if(str==null){
+return false;
+}
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:52:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
+}
+if(str==null){
+return false;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:52:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
-if(str==null||(strLen=str.length())==0){
+if(str==null||(strLen=str.length())+strLen==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:53:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
-if((Character.isWhitespace(str.charAt(i))==false)){
+if((Character.isWhitespace(str.charAt(i)*-1)==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1084/pattern-ver1-serial/Bank.src.entities.Account.java-returnLoan.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:53:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
+assert (str!=null);
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:53:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
+assert (str!=null);
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:53:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
+assert (!str.isEmpty());
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:53:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
+assert (!str.isEmpty());
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:53:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
+if(str.contains(str)){
+return false;
+}
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V43/6402/pattern-ver1-serial/src.edu.calpoly.android.imfree.DataStore.java-trueAddParseFriend.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:53:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
+if(str.startsWith("-")){
+return false;
+}
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/3084/pattern-ver1-serial/src.cdio.shared.FieldVerifier.java-isValidRbId.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:53:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
+if(str.startsWith("-")){
+return false;
+}
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/3084/pattern-ver1-serial/src.cdio.shared.FieldVerifier.java-isValidRbId.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:53:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
+if(str!=null){
+int strLen;
+if(str==null||(strLen=str.length())==0){
+return true;
+}
+for(int i=0;i<strLen;i++){
+if((Character.isWhitespace(str.charAt(i))==false)){
+return false;
+}
+}
+return true;
+}
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:53:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
+if(str!=null){
+if((Character.isWhitespace(str.charAt(i))==false)){
+return false;
+}
+}
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:53:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
+}
+if(strLen==0){
+return false;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:53:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
-if(str==null||(strLen=str.length())==0){
+if(str==null||(strLen=-1)==0){
 return true;
 }
+strLen++;
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:53:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
-if(str==null||(strLen=str.length())==0){
+if(str==null||(strLen=-1)==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
+strLen++;
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:53:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
+assert (str!=null);
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:53:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
+assert (str!=null);
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:53:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
+if(str.matches("[0-9]*")){
+return false;
+}
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/5036/pattern-ver1-serial/src.engine.PrinterServerTask1After.java-checkIfInputMatchStored.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:53:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
+if(str.matches("[0-9]*")){
+return false;
+}
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/5036/pattern-ver1-serial/src.engine.PrinterServerTask1After.java-checkIfInputMatchStored.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:53:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
+}
+if(str.isEmpty()){
+str=null;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:53:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
+if(str.isEmpty()){
+str=null;
+}
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:53:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:53:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:53:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
-if((Character.isWhitespace(str.charAt(i))==false)){
+if((Character.isWhitespace(str==null?null:str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V31/4299/pattern-ver1-serial/client.synapseJavaClient.src.main.java.org.sagebionetworks.client.SynapseClientImpl.java-uploadToS3FileHandle.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:53:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
-if((Character.isWhitespace(str.charAt(i))==false)){
+if((Character.isWhitespace(str!=null?str.charAt(i):null)==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/4302/pattern-ver1-serial/src.com.floreantpos.model.KitchenTicket.java-fromTicket.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:53:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:54:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
+assert (str!=null):"Appointments day is not allowed to be null!";
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:54:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
+assert (str!=null):"Appointments day is not allowed to be null!";
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:54:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
+import java.util.HashSet;
+
+import java.util.Collections;
+
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
+}
+if(str.isEmpty()){
+str=null;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/6949/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.db_models.DBUserProfile.java-removeConversationId.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:54:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
+if(str.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
+}
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:54:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
+if(str.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
+}
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:54:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
+if(str==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:54:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
+if(str==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:54:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
+}
+if(str==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:54:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
+}
+if(strLen<0){
+strLen=0;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:54:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
+}
+if(strLen<=0){
+strLen=1;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/1761/pattern-ver1-serial/JazminServer.src.jazmin.core.monitor.DispatcherMonitorAgent.java-sample.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:54:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
+}
+if(str.getClass().getSimpleName().startsWith("SystemException")){
+return true;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:54:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
+return true;
+}
+if(str.getClass().getSimpleName().startsWith("SystemException")){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:54:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
-if((Character.isWhitespace(str.charAt(i))==false)){
+if(!(Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V12/6908/pattern-ver1-serial/mainModule.src.backend.building.ProductionBuilding.java-canBuild.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:54:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
-if((Character.isWhitespace(str.charAt(i))==false)){
+if(true){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:54:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
-if((Character.isWhitespace(str.charAt(i))==false)){
+if((Character.isWhitespace(str.charAt(i))==false)==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:54:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
-if((Character.isWhitespace(str.charAt(i))==false)){
+if(str.equals(Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7428/pattern-ver1-serial/src.main.java.com.kruth.symbol.InstructionRouter.java-getInstruction.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:54:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
-if((Character.isWhitespace(str.charAt(i))==false)){
+if(str.equals(Character.isWhitespace(str.charAt(i)))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7428/pattern-ver1-serial/src.main.java.com.kruth.symbol.InstructionRouter.java-getInstruction.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:54:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
-if((Character.isWhitespace(str.charAt(i))==false)){
+if(str.equals(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7428/pattern-ver1-serial/src.main.java.com.kruth.symbol.InstructionRouter.java-getInstruction.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:54:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
-if((Character.isWhitespace(str.charAt(i))==false)){
+if(str.equals(i)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7428/pattern-ver1-serial/src.main.java.com.kruth.symbol.InstructionRouter.java-getInstruction.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:54:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
-if((Character.isWhitespace(str.charAt(i))==false)){
+if(str.equals(false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7428/pattern-ver1-serial/src.main.java.com.kruth.symbol.InstructionRouter.java-getInstruction.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:54:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
-if((Character.isWhitespace(str.charAt(i))==false)){
+if((Character.isWhitespace(str.charAt(i))==false)&&false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/5079/pattern-ver1-serial/Server.src.server.model.players.packets.ClickNPC.java-processPacket.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:54:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
-if((Character.isWhitespace(str.charAt(i))==false)){
+if((Character.isWhitespace(str.charAt(i))==false)==true){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:54:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
-if((Character.isWhitespace(str.charAt(i))==false)){
+if(!Character.isWhitespace(str.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V35/7408/pattern-ver1-serial/src.main.java.com.joshuasnider.workspace.InternetIO.XKCDDebugger.java-printMissing.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:54:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
-if((Character.isWhitespace(str.charAt(i))==false)){
+if(!Character.isWhitespace(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V35/7408/pattern-ver1-serial/src.main.java.com.joshuasnider.workspace.InternetIO.XKCDDebugger.java-printMissing.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:54:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
-if((Character.isWhitespace(str.charAt(i))==false)){
+if(!false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V35/7408/pattern-ver1-serial/src.main.java.com.joshuasnider.workspace.InternetIO.XKCDDebugger.java-printMissing.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:55:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
+if(str.startsWith("\r\n")){
+str=str.substring(2);
+}
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:55:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
+if(str.startsWith("\r\n")){
+str=str.substring(2);
+}
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:55:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
+}
+if(str.startsWith("/")){
+str=str.substring(1);
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V47/2604/pattern-ver1-serial/components.data-services.org.wso2.carbon.dataservices.core.src.main.java.org.wso2.carbon.dataservices.core.DBDeployer.java-createAxisOperation.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:55:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
-if(str==null||(strLen=str.length())==0){
+if(str==null||(strLen=str.length())==0||"查看红包".equals(str==null)){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:55:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
-if(str==null||(strLen=str.length())==0){
+if(str==null||(strLen=str.length())==0||(strLen=str.length())=='%'){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/6049/pattern-ver1-serial/src.main.java.org.wltea.analyzer.core.LaTeXSegmenter.java-addOperatorFormula.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:55:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
+if(i==3){
+System.out.println("debug");
+}
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
+}
+if(i==3){
+System.out.println("debug");
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:55:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
+if(strLen==3){
+System.out.println("debug");
+}
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
+}
+if(strLen==3){
+System.out.println("debug");
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:55:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
-if(str==null||(strLen=str.length())==0){
+if(true){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:55:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
-if(str==null||(strLen=str.length())==0){
+if(str==null||(strLen=str.length())==0==false){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:55:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
-if(str==null||(strLen=str.length())==0){
+if((strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/293/pattern-ver1-serial/src.snpsvm.app.CommandLineApp.java-main.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:55:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
-if(str==null||(strLen=str.length())==0){
+if(str==null||(strLen=str.length())==0&&false){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/5079/pattern-ver1-serial/Server.src.server.model.players.packets.ClickNPC.java-processPacket.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:55:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
+boolean haveBreadCrumbs=false;
 for(int i=0;i<strLen;i++){
-if((Character.isWhitespace(str.charAt(i))==false)){
+if((Character.isWhitespace(str.charAt(i))==false)&&haveBreadCrumbs){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 7, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:55:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
-if(str==null||(strLen=str.length())==0){
+if(str==null||(strLen=str.length())==0==true){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:55:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
+}
+if(str.endsWith("/")==false){
+str=str+"/";
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/627/pattern-ver1-serial/src.main.java.com.thunder.util.Util.java-restMap.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:55:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
+}
+if(str.endsWith("/")==false){
+str=str+"/";
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/627/pattern-ver1-serial/src.main.java.com.thunder.util.Util.java-restMap.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:55:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
+boolean haveBreadCrumbs=false;
 for(int i=0;i<strLen;i++){
-if((Character.isWhitespace(str.charAt(i))==false)){
+if((Character.isWhitespace(str.charAt(i))==false)&&haveBreadCrumbs){
 return false;
 }
+haveBreadCrumbs=true;
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 7, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:55:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
+long startTime=System.currentTimeMillis();
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:55:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
+long startTime=System.currentTimeMillis();
 int strLen;
 if(str==null||(strLen=str.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(str.charAt(i))==false)){
 return false;
 }
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:55:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/StringUtils.java[206,232]
------------Candidate---------------
 public static boolean isBlank(String str){
 int strLen;
-if(str==null||(strLen=str.length())==0){
+if((str==null)||((strLen=str.length())==0)){
 return true;
 }
 for(int i=0;i<strLen;i++){
-if((Character.isWhitespace(str.charAt(i))==false)){
+if(((Character.isWhitespace(str.charAt(i)))==(false))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V17/5331/pattern-ver1-serial/src.main.java.groupProject.twentyFortyEight.GameLogic.java-gameOver.pattern
MATCHLEVEL : ALL
ALL : 15, UPD : 15, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 15:55:50 CDT
--------------- END -----------------
Location : org.apache.commons.lang.math.NumberUtils.createLong:[628, 631]#0.5
Compute Candidate : 2019.09.07 AD at 15:56:07 CDT - 2019.09.07 AD at 16:00:24 CDT , PNumber : 11331, CandNumber : 55 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[618,632]
------------Candidate---------------
 public static Long createLong(String str){
-if(str==null){
+if(str!=null){
 return null;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4111/pattern-ver1-serial/tephra-core.src.main.java.co.cask.tephra.snapshot.SnapshotCodecV4.java-encodeInProgress.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 16:00:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[618,632]
------------Candidate---------------
 public static Long createLong(String str){
 if(str==null){
 return null;
 }
-return Long.valueOf(str);
+return Long.valueOf(str,0);
 }

PATTERN : /home/jiajun/GithubData/2016/V17/3557/pattern-ver1-serial/src.main.java.com.jetbrains.jetpad.vclang.term.expr.sort.Level.java-prettyPrint.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 16:00:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[618,632]
------------Candidate---------------
 public static Long createLong(String str){
 if(str==null){
 return null;
 }
-return Long.valueOf(str);
+return Long.parseLong(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/1910/pattern-ver1-serial/components.apimgt.org.wso2.carbon.apimgt.keymgt.src.main.java.org.wso2.carbon.apimgt.keymgt.handlers.ExtendedClientCredentialsGrantHandler.java-authorizeAccessDelegation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 16:00:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[618,632]
------------Candidate---------------
 public static Long createLong(String str){
 if(str==null){
 return null;
 }
-return Long.valueOf(str);
+return Long.valueOf(str,2);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2170/pattern-ver1-serial/tool.jtag.src.main.java.nl.lxtreme.ols.tool.jtag.JTAGDataSet.java-reportJTAGTdiData.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 16:00:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[618,632]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 public static Long createLong(String str){
 if(str==null){
 return null;
 }
-return Long.valueOf(str);
+return Long.valueOf(str.trim());
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 16:00:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[618,632]
------------Candidate---------------
 public static Long createLong(String str){
 if(str==null){
 return null;
 }
-return Long.valueOf(str);
+return Long.valueOf((str).toLowerCase());
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 16:00:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[618,632]
------------Candidate---------------
 public static Long createLong(String str){
 if(str==null){
 return null;
 }
-return Long.valueOf(str);
+return Long.valueOf((str).toUpperCase());
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7401/pattern-ver1-serial/Model.src.main.java.config.SensorParams.java-SensorParams.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 16:00:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[618,632]
------------Candidate---------------
 public static Long createLong(String str){
-if(str==null){
+if(StringUtils.isEmpty(str)){
 return null;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/130/pattern-ver1-serial/yamj3-core.src.main.java.org.yamj.core.web.HTMLTools.java-replaceHtmlTags.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 16:00:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[618,632]
------------Candidate---------------
 public static Long createLong(String str){
 if(str==null){
 return null;
 }
-return Long.valueOf(str);
+return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 16:00:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[618,632]
------------Candidate---------------
 public static Long createLong(String str){
-if(str==null){
+if(str.equals(null)){
 return null;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/343/pattern-ver1-serial/src.gui.batches.ItemBatchView.java-selectProduct.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 16:00:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[618,632]
------------Candidate---------------
 public static Long createLong(String str){
-if(str==null){
+if(str.isEmpty()){
 return null;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V1/7829/pattern-ver1-serial/app.src.main.java.de.tum.in.tumcampusapp.activities.TransportationDetailsActivity.java-onLoadInBackground.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 16:00:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[618,632]
------------Candidate---------------
 public static Long createLong(String str){
 if(str==null){
 return null;
 }
-return Long.valueOf(str);
+return Long.valueOf(str)&0xff;
 }

PATTERN : /home/jiajun/GithubData/2015/V16/5603/pattern-ver1-serial/uk.ac.herts.SmartLab.XBee.Response.XBeeRx64Response.java-GetReceiveStatus.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 16:00:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[618,632]
------------Candidate---------------
 public static Long createLong(String str){
-if(str==null){
+if(true){
 return null;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 16:00:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[618,632]
------------Candidate---------------
 public static Long createLong(String str){
 if(str==null){
 return null;
 }
-return Long.valueOf(str);
+return new Long(Long.valueOf(str));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 16:00:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[618,632]
------------Candidate---------------
 public static Long createLong(String str){
 if(str==null){
 return null;
 }
-return Long.valueOf(str);
+return (Long)Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5127/pattern-ver1-serial/com.buglabs.common.com.buglabs.bug.sysfs.BMIDevice.java-apply.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 16:00:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[618,632]
------------Candidate---------------
 public static Long createLong(String str){
 if(str==null){
+int a=0;
 return null;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 16:00:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[618,632]
------------Candidate---------------
 public static Long createLong(String str){
+int a=0;
 if(str==null){
 return null;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 16:01:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[618,632]
------------Candidate---------------
 public static Long createLong(String str){
 if(str==null){
 return null;
 }
-return Long.valueOf(str);
+return -Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V39/501/pattern-ver1-serial/src.com.nutrons.recyclerush.OI.java-getOperatorJoystickY.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 16:01:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[618,632]
------------Candidate---------------
 public static Long createLong(String str){
 if(str==null){
+String OUTSTRING="";
 return null;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 16:01:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[618,632]
------------Candidate---------------
 public static Long createLong(String str){
+String OUTSTRING="";
 if(str==null){
 return null;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 16:01:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[618,632]
------------Candidate---------------
 public static Long createLong(String str){
+if(str.isEmpty()){
+return 0l;
+}
 if(str==null){
 return null;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5856/pattern-ver1-serial/src.main.java.io.aif.associations.builder.ExperimentsConnectionsGraphReducer.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 16:01:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[618,632]
------------Candidate---------------
 public static Long createLong(String str){
-if(str==null){
+if(str.equalsIgnoreCase(null)){
 return null;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/409/pattern-ver1-serial/src.com.wasteofplastic.askyblock.ASkyBlock.java-loadPluginConfig.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 16:01:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[618,632]
------------Candidate---------------
 public static Long createLong(String str){
 if(str==null){
 return null;
 }
-return Long.valueOf(str);
+return (Long)(Long.valueOf(str));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 16:01:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[618,632]
------------Candidate---------------
 public static Long createLong(String str){
 if(str==null){
+return null;
+}
+if(str.isEmpty()){
 return null;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7204/pattern-ver1-serial/src.main.java.sg.edu.nus.cs2103t.omnitask.logic.DataImpl.java-addTask.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 16:01:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[618,632]
------------Candidate---------------
 public static Long createLong(String str){
 if(str==null){
 return null;
+}
+if(str.isEmpty()){
+return 0l;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V17/3182/pattern-ver1-serial/canal-client.src.main.java.com.tqmall.search.canal.handle.TableSectionHandle.java-runRowChangeAction.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 16:01:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[618,632]
------------Candidate---------------
 public static Long createLong(String str){
 if(str==null){
+int a=1;
 return null;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 16:01:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[618,632]
------------Candidate---------------
 public static Long createLong(String str){
+int a=1;
 if(str==null){
 return null;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 16:01:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[618,632]
------------Candidate---------------
 public static Long createLong(String str){
 if(str==null){
+boolean b=true;
 return null;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 16:01:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[618,632]
------------Candidate---------------
 public static Long createLong(String str){
+boolean b=true;
 if(str==null){
 return null;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 16:01:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[618,632]
------------Candidate---------------
 public static Long createLong(String str){
+if(str==null){
+return null;
+}
 if(str==null){
 return null;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 16:01:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[618,632]
------------Candidate---------------
 public static Long createLong(String str){
-if(str==null){
+if(str==null||str.isEmpty()){
 return null;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/354/pattern-ver1-serial/hapi-fhir-base.src.main.java.ca.uhn.fhir.parser.XmlParser.java-encodeCompositeElementChildrenToStreamWriter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 16:01:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[618,632]
------------Candidate---------------
 public static Long createLong(String str){
+if(str==null){
+return 0l;
+}
 if(str==null){
 return null;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 16:01:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[618,632]
------------Candidate---------------
 public static Long createLong(String str){
 if(str==null){
 return null;
+}
+if(str==null){
+return 0l;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 16:01:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[618,632]
------------Candidate---------------
 public static Long createLong(String str){
 if(str==null){
+return null;
+}
+if("&null".equals(str)){
 return null;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 16:01:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[618,632]
------------Candidate---------------
 public static Long createLong(String str){
+assert (str!=null);
 if(str==null){
 return null;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 16:01:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[618,632]
------------Candidate---------------
 public static Long createLong(String str){
 if(str==null){
 return null;
 }
+assert (!str.isEmpty());
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 16:01:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[618,632]
------------Candidate---------------
 public static Long createLong(String str){
+if(str!=null){
+if(str==null){
+return null;
+}
+return Long.valueOf(str);
+}
 if(str==null){
 return null;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 16:01:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[618,632]
------------Candidate---------------
 public static Long createLong(String str){
 if(str==null){
 return null;
 }
+assert (str!=null);
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 16:01:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[618,632]
------------Candidate---------------
 public static Long createLong(String str){
 if(str==null){
 return null;
+}
+if((Thread.currentThread().interrupted())){
+return 0l;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 16:01:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[618,632]
------------Candidate---------------
 public static Long createLong(String str){
-if(str==null){
+if(str==null||"查看红包".equals(str)){
 return null;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 16:01:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[618,632]
------------Candidate---------------
 public static Long createLong(String str){
 if(str==null){
 return null;
+}
+if(str.isEmpty()){
+str=null;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 16:01:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[618,632]
------------Candidate---------------
 public static Long createLong(String str){
-if(str==null){
+if(str==null||str==""){
 return null;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V38/7341/pattern-ver1-serial/log210_webproject_BDD.src.RechercheLivre.java-RechercheLivre.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 16:01:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[618,632]
------------Candidate---------------
 public static Long createLong(String str){
 if(str==null){
 return null;
 }
-return Long.valueOf(str);
+return Long.valueOf(str)==null?0:Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/2889/pattern-ver1-serial/dbclient.src.main.java.com.emc.storageos.db.client.model.VirtualPool.java-getRpRpoValue.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 16:01:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[618,632]
------------Candidate---------------
 public static Long createLong(String str){
-if(str==null){
+if(str==null||str==null){
 return null;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4704/pattern-ver1-serial/src.main.java.com.alibaba.fastjson.parser.ParserConfig.java-createJavaBeanDeserializer.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 16:01:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[618,632]
------------Candidate---------------
 public static Long createLong(String str){
-if(str==null){
+if(str==null||str.trim().isEmpty()){
 return null;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1097/pattern-ver1-serial/src.bakatxt.core.BakaProcessor.java-editEndTime.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 16:01:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[618,632]
------------Candidate---------------
+import java.util.LinkedList;
+
 public static Long createLong(String str){
+Long pcb=new Long(str);
 if(str==null){
 return null;
 }
-return Long.valueOf(str);
+return pcb.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7301/pattern-ver1-serial/src.simulator.FCFSKernel.java-loadProgram.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 1, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 16:02:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[618,632]
------------Candidate---------------
 public static Long createLong(String str){
 if(str==null){
 return null;
 }
-return Long.valueOf(str);
+return str==null?null:Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4622/pattern-ver1-serial/src.soot.shimple.ShimpleMethodSource.java-getBody.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 16:02:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[618,632]
------------Candidate---------------
 public static Long createLong(String str){
+if(str.isEmpty()){
+System.out.println("Team has to have a name");
+return null;
+}
 if(str==null){
 return null;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 16:02:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[618,632]
------------Candidate---------------
 public static Long createLong(String str){
 if(str==null){
+return null;
+}
+if(str.isEmpty()){
+System.out.println("Team has to have a name");
 return null;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 16:02:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[618,632]
------------Candidate---------------
 public static Long createLong(String str){
+assert (str!=null):"Appointments day is not allowed to be null!";
 if(str==null){
 return null;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 16:02:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[618,632]
------------Candidate---------------
 public static Long createLong(String str){
+if(str.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
+}
 if(str==null){
 return null;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 16:02:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[618,632]
------------Candidate---------------
 public static Long createLong(String str){
 if(str==null){
 return null;
+}
+if(str.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 16:02:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[618,632]
------------Candidate---------------
 public static Long createLong(String str){
 if(str==null){
 return null;
+}
+if(str==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 16:02:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[618,632]
------------Candidate---------------
 public static Long createLong(String str){
-if(str==null){
+if(str==null&&!str.equals("")){
 return null;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/6260/pattern-ver1-serial/Client.src.com.way.chat.activity.ChatActivity.java-onItemClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 16:02:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_58_buggy/src/java/org/apache/commons/lang/math/NumberUtils.java[618,632]
------------Candidate---------------
 public static Long createLong(String str){
+if(str.startsWith("\r\n")){
+str=str.substring(2);
+}
 if(str==null){
 return null;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang.math.NumberUtilsTest::testLang300]
---------START : 2019.09.07 AD at 11:19:49 CDT
---------TIME : 2019.09.07 AD at 16:02:20 CDT
--------------- END -----------------
Finish : lang-58 > patch : 2 | Start : Sat Sep 07 11:19:49 CDT 2019 | End : 2019.09.07 AD at 16:02:20 CDT
