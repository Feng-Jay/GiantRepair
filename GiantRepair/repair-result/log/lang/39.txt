Repair : lang_39
Current failed test : org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray | 2019.09.07 AD at 01:39:36 CDT
Location : org.apache.commons.lang3.StringUtils.replaceEach:[3502]#1.0
Compute Candidate : 2019.09.07 AD at 01:40:10 CDT - 2019.09.07 AD at 01:45:24 CDT , PNumber : 11289, CandNumber : 58 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3462,3503]
------------Candidate---------------
 public static String replaceEach(String text,String[] searchList,String[] replacementList){
-return replaceEach(text,searchList,replacementList,false,0);
+return replaceEach(text,searchList,replacementList,true,0);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V3/4718/pattern-ver1-serial/src.com.sleepfuriously.hpgworkout.GraphActivity.java-doInBackground.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 01:45:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3462,3503]
------------Candidate---------------
 public static String replaceEach(String text,String[] searchList,String[] replacementList){
+int a=0;
 return replaceEach(text,searchList,replacementList,false,0);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 01:45:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3462,3503]
------------Candidate---------------
 public static String replaceEach(String text,String[] searchList,String[] replacementList){
+String OUTSTRING="";
 return replaceEach(text,searchList,replacementList,false,0);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 01:45:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3462,3503]
------------Candidate---------------
 public static String replaceEach(String text,String[] searchList,String[] replacementList){
+if(text.isEmpty()){
+return null;
+}
 return replaceEach(text,searchList,replacementList,false,0);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5856/pattern-ver1-serial/src.main.java.io.aif.associations.builder.ExperimentsConnectionsGraphReducer.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 01:45:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3462,3503]
------------Candidate---------------
 public static String replaceEach(String text,String[] searchList,String[] replacementList){
+int a=1;
 return replaceEach(text,searchList,replacementList,false,0);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 01:45:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3462,3503]
------------Candidate---------------
 public static String replaceEach(String text,String[] searchList,String[] replacementList){
+boolean b=true;
 return replaceEach(text,searchList,replacementList,false,0);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 01:45:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3462,3503]
------------Candidate---------------
 public static String replaceEach(String text,String[] searchList,String[] replacementList){
+if(text==null){
+return "";
+}
 return replaceEach(text,searchList,replacementList,false,0);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 01:45:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3462,3503]
------------Candidate---------------
 public static String replaceEach(String text,String[] searchList,String[] replacementList){
+if(searchList==null){
+return "";
+}
 return replaceEach(text,searchList,replacementList,false,0);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 01:45:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3462,3503]
------------Candidate---------------
 public static String replaceEach(String text,String[] searchList,String[] replacementList){
+if(replacementList==null){
+return "";
+}
 return replaceEach(text,searchList,replacementList,false,0);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 01:45:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3462,3503]
------------Candidate---------------
 public static String replaceEach(String text,String[] searchList,String[] replacementList){
+if(text==null){
+return null;
+}
 return replaceEach(text,searchList,replacementList,false,0);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 01:45:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3462,3503]
------------Candidate---------------
 public static String replaceEach(String text,String[] searchList,String[] replacementList){
+if(searchList==null){
+return null;
+}
 return replaceEach(text,searchList,replacementList,false,0);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 01:45:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3462,3503]
------------Candidate---------------
 public static String replaceEach(String text,String[] searchList,String[] replacementList){
+if(replacementList==null){
+return null;
+}
 return replaceEach(text,searchList,replacementList,false,0);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 01:45:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3462,3503]
------------Candidate---------------
 public static String replaceEach(String text,String[] searchList,String[] replacementList){
+assert (text!=null);
 return replaceEach(text,searchList,replacementList,false,0);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 01:45:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3462,3503]
------------Candidate---------------
 public static String replaceEach(String text,String[] searchList,String[] replacementList){
+assert (searchList!=null);
 return replaceEach(text,searchList,replacementList,false,0);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 01:46:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3462,3503]
------------Candidate---------------
 public static String replaceEach(String text,String[] searchList,String[] replacementList){
+assert (replacementList!=null);
 return replaceEach(text,searchList,replacementList,false,0);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 01:46:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3462,3503]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 public static String replaceEach(String text,String[] searchList,String[] replacementList){
+if(searchList.equals(InputStream.class)){
+return text;
+}
 return replaceEach(text,searchList,replacementList,false,0);
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 01:46:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3462,3503]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 public static String replaceEach(String text,String[] searchList,String[] replacementList){
+if(replacementList.equals(InputStream.class)){
+return text;
+}
 return replaceEach(text,searchList,replacementList,false,0);
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 01:46:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3462,3503]
------------Candidate---------------
 public static String replaceEach(String text,String[] searchList,String[] replacementList){
+if(searchList!=null){
+return replaceEach(text,searchList,replacementList,false,0);
+}
 return replaceEach(text,searchList,replacementList,false,0);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 01:46:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3462,3503]
------------Candidate---------------
 public static String replaceEach(String text,String[] searchList,String[] replacementList){
+if(replacementList!=null){
+return replaceEach(text,searchList,replacementList,false,0);
+}
 return replaceEach(text,searchList,replacementList,false,0);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 01:46:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3462,3503]
------------Candidate---------------
 public static String replaceEach(String text,String[] searchList,String[] replacementList){
+if(text!=null){
+return replaceEach(text,searchList,replacementList,false,0);
+}
 return replaceEach(text,searchList,replacementList,false,0);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 01:46:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3462,3503]
------------Candidate---------------
 public static String replaceEach(String text,String[] searchList,String[] replacementList){
+if(text.startsWith("https")){
+return text;
+}
 return replaceEach(text,searchList,replacementList,false,0);
 }

PATTERN : /home/jiajun/GithubData/2015/V4/6342/pattern-ver1-serial/src.main.java.org.spo.fw.web.Lib_Utils.java-alterGotoUrl.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 01:46:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3462,3503]
------------Candidate---------------
 public static String replaceEach(String text,String[] searchList,String[] replacementList){
+if(text.equalsIgnoreCase("/")){
+return text;
+}
 return replaceEach(text,searchList,replacementList,false,0);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/3102/pattern-ver1-serial/src.main.java.com.github.kongchen.swagger.docgen.reader.AbstractReader.java-parseOperationPath.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 01:46:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3462,3503]
------------Candidate---------------
 public static String replaceEach(String text,String[] searchList,String[] replacementList){
+if(text.equalsIgnoreCase("")){
+return "";
+}
 return replaceEach(text,searchList,replacementList,false,0);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/3403/pattern-ver1-serial/src.Primitives.Stemmer.java-step4.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 01:46:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3462,3503]
------------Candidate---------------
 public static String replaceEach(String text,String[] searchList,String[] replacementList){
+if(text.isEmpty()){
+System.out.println("Team has to have a name");
+return null;
+}
 return replaceEach(text,searchList,replacementList,false,0);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 01:46:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3462,3503]
------------Candidate---------------
 public static String replaceEach(String text,String[] searchList,String[] replacementList){
+assert (text!=null):"Appointments day is not allowed to be null!";
 return replaceEach(text,searchList,replacementList,false,0);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 01:46:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3462,3503]
------------Candidate---------------
 public static String replaceEach(String text,String[] searchList,String[] replacementList){
+assert (searchList!=null):"Appointments day is not allowed to be null!";
 return replaceEach(text,searchList,replacementList,false,0);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 01:46:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3462,3503]
------------Candidate---------------
 public static String replaceEach(String text,String[] searchList,String[] replacementList){
+assert (replacementList!=null):"Appointments day is not allowed to be null!";
 return replaceEach(text,searchList,replacementList,false,0);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 01:46:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3462,3503]
------------Candidate---------------
 public static String replaceEach(String text,String[] searchList,String[] replacementList){
+if(text.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
+}
 return replaceEach(text,searchList,replacementList,false,0);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 01:46:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3462,3503]
------------Candidate---------------
 public static String replaceEach(String text,String[] searchList,String[] replacementList){
-return replaceEach(text,searchList,replacementList,false,0);
+return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 01:46:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3462,3503]
------------Candidate---------------
 public static String replaceEach(String text,String[] searchList,String[] replacementList){
-return replaceEach(text,searchList,replacementList,false,0);
+return "";
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2133/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereRequestImpl.java-getServletPath.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 01:46:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3462,3503]
------------Candidate---------------
 public static String replaceEach(String text,String[] searchList,String[] replacementList){
-return replaceEach(text,searchList,replacementList,false,0);
+return replaceEach(text,searchList,replacementList,false,0)==null?"":replaceEach(text,searchList,replacementList,false,0);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/319/pattern-ver1-serial/Flattitude.app.src.main.java.com.aseupc.flattitude.Models.IDs.java-getUserToken.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 01:46:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3462,3503]
------------Candidate---------------
 public static String replaceEach(String text,String[] searchList,String[] replacementList){
-return replaceEach(text,searchList,replacementList,false,0);
+return replaceEach(text,searchList,replacementList,false,0).trim();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1192/pattern-ver1-serial/NewsReader.src.com.example.net_ex04.SinaNewsParser.java-getTitle.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 01:46:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3462,3503]
------------Candidate---------------
 public static String replaceEach(String text,String[] searchList,String[] replacementList){
-return replaceEach(text,searchList,replacementList,false,0);
+return text;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5398/pattern-ver1-serial/extensions.fluent.src.org.exist.fluent.Item.java-valueWithDefault.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 01:46:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3462,3503]
------------Candidate---------------
 public static String replaceEach(String text,String[] searchList,String[] replacementList){
-return replaceEach(text,searchList,replacementList,false,0);
+return new String(replaceEach(text,searchList,replacementList,false,0));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 01:46:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3462,3503]
------------Candidate---------------
 public static String replaceEach(String text,String[] searchList,String[] replacementList){
-return replaceEach(text,searchList,replacementList,false,0);
+return (String)replaceEach(text,searchList,replacementList,false,0);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5127/pattern-ver1-serial/com.buglabs.common.com.buglabs.bug.sysfs.BMIDevice.java-apply.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 01:47:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3462,3503]
------------Candidate---------------
 public static String replaceEach(String text,String[] searchList,String[] replacementList){
-return replaceEach(text,searchList,replacementList,false,0);
+return replaceEach(text,searchList,replacementList,false,0)!=null?replaceEach(text,searchList,replacementList,false,0):new String();
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 01:47:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3462,3503]
------------Candidate---------------
 public static String replaceEach(String text,String[] searchList,String[] replacementList){
-return replaceEach(text,searchList,replacementList,false,0);
+return replaceEach(text,searchList,replacementList,false,0).toLowerCase();
 }

PATTERN : /home/jiajun/GithubData/2016/V31/301/pattern-ver1-serial/DODO.src.Parser.Parser.java-getUserCommand.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 01:47:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3462,3503]
------------Candidate---------------
 public static String replaceEach(String text,String[] searchList,String[] replacementList){
-return replaceEach(text,searchList,replacementList,false,0);
+return replaceEach(text,searchList,replacementList,false,0)==null?new String():replaceEach(text,searchList,replacementList,false,0);
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 01:47:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3462,3503]
------------Candidate---------------
 public static String replaceEach(String text,String[] searchList,String[] replacementList){
-return replaceEach(text,searchList,replacementList,false,0);
+return replaceEach(text,searchList,replacementList,false,0).replaceAll("\r","");
 }

PATTERN : /home/jiajun/GithubData/2016/V17/6011/pattern-ver1-serial/NonHTTPProxy.src.josh.nonHttp.PythonMangler.java-getPyCode.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 01:47:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3462,3503]
------------Candidate---------------
 public static String replaceEach(String text,String[] searchList,String[] replacementList){
-return replaceEach(text,searchList,replacementList,false,0);
+return (String)(replaceEach(text,searchList,replacementList,false,0));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 01:47:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3462,3503]
------------Candidate---------------
 public static String replaceEach(String text,String[] searchList,String[] replacementList){
-return replaceEach(text,searchList,replacementList,false,0);
+return String.format("%s",replaceEach(text,searchList,replacementList,false,0));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4308/pattern-ver1-serial/src.com.github.danfickle.cpptojavasourceconverter.ExpressionModels.java-toStringRhOnly.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 01:47:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3462,3503]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 public static String replaceEach(String text,String[] searchList,String[] replacementList){
-return replaceEach(text,searchList,replacementList,false,0);
+return replaceEach(text,searchList,replacementList,false,0)+".*";
 }

PATTERN : /home/jiajun/GithubData/2015/V25/6165/pattern-ver1-serial/src.main.java.com.oneandone.network.snmpman.configuration.type.WildcardOID.java-toString.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 01:47:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3462,3503]
------------Candidate---------------
 public static String replaceEach(String text,String[] searchList,String[] replacementList){
+if(text==null){
+return "";
+}
+if(searchList==null){
+return text;
+}
 return replaceEach(text,searchList,replacementList,false,0);
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 01:47:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3462,3503]
------------Candidate---------------
 public static String replaceEach(String text,String[] searchList,String[] replacementList){
+if(text==null){
+return "";
+}
+if(replacementList==null){
+return text;
+}
 return replaceEach(text,searchList,replacementList,false,0);
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 01:47:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3462,3503]
------------Candidate---------------
 public static String replaceEach(String text,String[] searchList,String[] replacementList){
+if(text.startsWith("\r\n")){
+text=text.substring(2);
+}
 return replaceEach(text,searchList,replacementList,false,0);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 01:47:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3462,3503]
------------Candidate---------------
 public static String replaceEach(String text,String[] searchList,String[] replacementList){
+if(text==null||searchList==null){
+throw new NullPointerException();
+}
 return replaceEach(text,searchList,replacementList,false,0);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 01:47:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3462,3503]
------------Candidate---------------
 public static String replaceEach(String text,String[] searchList,String[] replacementList){
+if(text==null||replacementList==null){
+throw new NullPointerException();
+}
 return replaceEach(text,searchList,replacementList,false,0);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 01:47:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3462,3503]
------------Candidate---------------
 public static String replaceEach(String text,String[] searchList,String[] replacementList){
+if(searchList==null||text==null){
+throw new NullPointerException();
+}
 return replaceEach(text,searchList,replacementList,false,0);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 01:47:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3462,3503]
------------Candidate---------------
 public static String replaceEach(String text,String[] searchList,String[] replacementList){
+if(replacementList==null||text==null){
+throw new NullPointerException();
+}
 return replaceEach(text,searchList,replacementList,false,0);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 01:47:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3462,3503]
------------Candidate---------------
 public static String replaceEach(String text,String[] searchList,String[] replacementList){
+if(searchList==null||replacementList==null){
+throw new NullPointerException();
+}
 return replaceEach(text,searchList,replacementList,false,0);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 01:47:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3462,3503]
------------Candidate---------------
 public static String replaceEach(String text,String[] searchList,String[] replacementList){
+if(replacementList==null||searchList==null){
+throw new NullPointerException();
+}
 return replaceEach(text,searchList,replacementList,false,0);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 01:47:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3462,3503]
------------Candidate---------------
 public static String replaceEach(String text,String[] searchList,String[] replacementList){
+if(text.startsWith("extern ")){
+return text.substring(6,text.length()-1).trim();
+}
 return replaceEach(text,searchList,replacementList,false,0);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/100/pattern-ver1-serial/plugins.org.nitlanguage.ndt.src.org.nitlanguage.ndt.ui.docmodel.Declaration.java-removeModificatorKeyword.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 0, INS : 11, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 01:47:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3462,3503]
------------Candidate---------------
 public static String replaceEach(String text,String[] searchList,String[] replacementList){
+if(searchList==null||replacementList==null||text==null){
+return null;
+}
 return replaceEach(text,searchList,replacementList,false,0);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 01:47:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3462,3503]
------------Candidate---------------
 public static String replaceEach(String text,String[] searchList,String[] replacementList){
+if(replacementList==null||searchList==null||text==null){
+return null;
+}
 return replaceEach(text,searchList,replacementList,false,0);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 01:47:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3462,3503]
------------Candidate---------------
 public static String replaceEach(String text,String[] searchList,String[] replacementList){
+if(text==null||searchList==null||replacementList==null){
+return null;
+}
 return replaceEach(text,searchList,replacementList,false,0);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 01:47:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3462,3503]
------------Candidate---------------
 public static String replaceEach(String text,String[] searchList,String[] replacementList){
+if(text==null||replacementList==null||searchList==null){
+return null;
+}
 return replaceEach(text,searchList,replacementList,false,0);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 01:47:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3462,3503]
------------Candidate---------------
 public static String replaceEach(String text,String[] searchList,String[] replacementList){
+if(searchList==null||text==null||replacementList==null){
+return null;
+}
 return replaceEach(text,searchList,replacementList,false,0);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 01:47:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3462,3503]
------------Candidate---------------
 public static String replaceEach(String text,String[] searchList,String[] replacementList){
+if(replacementList==null||text==null||searchList==null){
+return null;
+}
 return replaceEach(text,searchList,replacementList,false,0);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 01:48:00 CDT
--------------- END -----------------
Location : org.apache.commons.lang3.StringUtils.replaceEach:[3648, 3727, 3612, 3615, 3619, 3623, 3624, 3627, 3635, 3638, 3639, 3640, 3644, 3645, 3650, 3653, 3654, 3656, 3657, 3658, 3665, 3666, 3669, 3672, 3675, 3676, 3677, 3682, 3684, 3686, 3688, 3689, 3691, 3693, 3695, 3696, 3697, 3700, 3701, 3706, 3709, 3710, 3712, 3713, 3714, 3721, 3722, 3723, 3725, 3726]#1.0
Compute Candidate : 2019.09.07 AD at 01:48:13 CDT - 2019.09.07 AD at 02:30:20 CDT , PNumber : 7042, CandNumber : 1001 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
+continue;
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:30:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
+continue;
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:30:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
+continue;
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:30:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
+continue;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:30:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
+continue;
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/5856/pattern-ver1-serial/internalLibraries.backup.src.main.java.com.emc.storageos.management.backup.DbBackupHandler.java-dumpBackup.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:30:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
+continue;
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/5856/pattern-ver1-serial/internalLibraries.backup.src.main.java.com.emc.storageos.management.backup.DbBackupHandler.java-dumpBackup.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:30:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
+continue;
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/5856/pattern-ver1-serial/internalLibraries.backup.src.main.java.com.emc.storageos.management.backup.DbBackupHandler.java-dumpBackup.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:30:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
+continue;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/3884/pattern-ver1-serial/src.edu.nyu.cs.cs2580.IndexerInvertedDoconly.java-loadIndex.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:30:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
-String result=buf.toString();
+ String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:30:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
-int textLength=text.length();
+ int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:30:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
-int searchLength=searchList.length;
+ int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:30:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
-int replacementLength=replacementList.length;
+ int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:30:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
-int textIndex=-1;
+ int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:30:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
-int replaceIndex=-1;
+ int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:31:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
-boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
+ boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:31:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
-StringBuilder buf=new StringBuilder(text.length()+increase);
+ StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:31:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
-int tempIndex=-1;
+ int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:31:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
-int greater=replacementList[i].length()-searchList[i].length();
+ int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:31:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
-if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+if(noMoreMatchesForReplIndex[i]&&searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V17/3484/pattern-ver1-serial/src.com.massivecraft.creativegates.MainListener.java-stabilizePortalContent.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:31:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
-if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+if(noMoreMatchesForReplIndex[i]&&searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V17/3484/pattern-ver1-serial/src.com.massivecraft.creativegates.MainListener.java-stabilizePortalContent.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:31:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
-if(greater>0){
+if(greater>1){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5133/pattern-ver1-serial/app.src.main.java.com.bignerdranch.android.photogallery.PhotoGalleryFragment.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:31:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
-if(greater>0){
+if(greater>=0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V59/3225/pattern-ver1-serial/src.org.peg4d.ParserContext.java-beginPeformStat.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:31:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
-replaceIndex=i;
+replaceIndex=1;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:31:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
-textIndex=tempIndex;
+textIndex=1;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:31:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
-replaceIndex=i;
+replaceIndex=1;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:31:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
-textIndex=tempIndex;
+textIndex=1;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:33:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
+return null;
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:33:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
+return null;
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:33:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
+return null;
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:33:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
+return null;
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:33:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
+return null;
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:33:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
+return null;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:33:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
-if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
+if(text!=null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4111/pattern-ver1-serial/tephra-core.src.main.java.co.cask.tephra.snapshot.SnapshotCodecV4.java-encodeInProgress.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:33:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
-if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
+if(text==null||text.length()==0||searchList!=null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4111/pattern-ver1-serial/tephra-core.src.main.java.co.cask.tephra.snapshot.SnapshotCodecV4.java-encodeInProgress.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:33:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
-if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
+if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList!=null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4111/pattern-ver1-serial/tephra-core.src.main.java.co.cask.tephra.snapshot.SnapshotCodecV4.java-encodeInProgress.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:33:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
-for(int i=0;i<searchLength;i++){
+for(int i=0;replaceIndex<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7268/pattern-ver1-serial/src.org.easypr.core.CharsSegment.java-SortRect.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:33:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
-for(int i=0;i<searchList.length;i++){
+for(int i=0;replaceIndex<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7268/pattern-ver1-serial/src.org.easypr.core.CharsSegment.java-SortRect.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:33:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
-for(int i=0;i<searchList.length;i++){
+for(int i=0;tempIndex<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7268/pattern-ver1-serial/src.org.easypr.core.CharsSegment.java-SortRect.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:34:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
-for(int i=0;i<searchList.length;i++){
+for(int i=0;textIndex<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7268/pattern-ver1-serial/src.org.easypr.core.CharsSegment.java-SortRect.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:34:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
+return null;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/2057/pattern-ver1-serial/multiplication-game.Main.java-ollie.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:34:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
-return result;
+return null;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:34:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
-return text;
+return null;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:34:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
-return text;
+return null;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:34:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
-int replacementLength=replacementList.length;
+long replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/3496/pattern-ver1-serial/teavm-classlib.src.main.java.org.teavm.classlib.java.lang.TAbstractStringBuilder.java-append.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:34:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
-int textLength=text.length();
+long textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/3496/pattern-ver1-serial/teavm-classlib.src.main.java.org.teavm.classlib.java.lang.TAbstractStringBuilder.java-append.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:34:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
-int greater=replacementList[i].length()-searchList[i].length();
+long greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/3496/pattern-ver1-serial/teavm-classlib.src.main.java.org.teavm.classlib.java.lang.TAbstractStringBuilder.java-append.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:34:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
-tempIndex=text.indexOf(searchList[i]);
+tempIndex=text.indexOf(searchList[i],timeToLive);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V14/1763/pattern-ver1-serial/MyApplication.app.src.main.java.com.gcode.notes.controllers.BaseController.java-setNewContent.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:34:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
-replaceIndex=i;
+replaceIndex=0;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/1097/pattern-ver1-serial/plugins.de.ovgu.featureide.core.mpl.src.de.ovgu.featureide.core.mpl.signature.javadoc.AJavaDocCommentMerger.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:34:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
-textIndex=tempIndex;
+textIndex=0;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/1097/pattern-ver1-serial/plugins.de.ovgu.featureide.core.mpl.src.de.ovgu.featureide.core.mpl.signature.javadoc.AJavaDocCommentMerger.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:34:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
-replaceIndex=i;
+replaceIndex=0;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/1097/pattern-ver1-serial/plugins.de.ovgu.featureide.core.mpl.src.de.ovgu.featureide.core.mpl.signature.javadoc.AJavaDocCommentMerger.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:34:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
-textIndex=tempIndex;
+textIndex=0;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/1097/pattern-ver1-serial/plugins.de.ovgu.featureide.core.mpl.src.de.ovgu.featureide.core.mpl.signature.javadoc.AJavaDocCommentMerger.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:36:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
-if(timeToLive<0){
+if(timeToLive<=0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:36:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
-for(int i=0;i<searchLength;i++){
+for(int i=0;i<=searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:36:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
-if(textIndex==-1||tempIndex<textIndex){
+if(textIndex==-1||tempIndex<=textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:36:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
-for(int i=0;i<searchList.length;i++){
+for(int i=0;i<=searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:36:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
-for(int i=start;i<textIndex;i++){
+for(int i=start;i<=textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:36:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
-for(int i=0;i<searchLength;i++){
+for(int i=0;i<=searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:36:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
-if(textIndex==-1||tempIndex<textIndex){
+if(textIndex==-1||tempIndex<=textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:36:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
-for(int i=start;i<textLength;i++){
+for(int i=start;i<=textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:36:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
+tempIndex=text.indexOf(searchList[i]);
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:36:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
+textIndex=-1;
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:36:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
+textIndex=-1;
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:36:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
+tempIndex=text.indexOf(searchList[i]);
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:37:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
+textIndex=-1;
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:37:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
+tempIndex=text.indexOf(searchList[i]);
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:37:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
+textIndex=-1;
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:37:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
+start=textIndex+searchList[replaceIndex].length();
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:37:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
+start=textIndex+searchList[replaceIndex].length();
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:37:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
+import java.util.Collection;
+
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
-for(int i=0;i<searchLength;i++){
+for(int i=0,myUid;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V12/276/pattern-ver1-serial/actor-sdk.sdk-core.core.core-shared.src.main.java.im.actor.core.viewmodel.GroupVM.java-create.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:37:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
+import java.util.Collection;
+
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
-for(int i=0;i<searchList.length;i++){
+for(int i=0,myUid;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V12/276/pattern-ver1-serial/actor-sdk.sdk-core.core.core-shared.src.main.java.im.actor.core.viewmodel.GroupVM.java-create.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:37:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
+import java.util.Collection;
+
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
-for(int i=start;i<textIndex;i++){
+for(int i=start,myUid;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V12/276/pattern-ver1-serial/actor-sdk.sdk-core.core.core-shared.src.main.java.im.actor.core.viewmodel.GroupVM.java-create.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:37:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
-for(int i=0;i<searchLength;i++){
+for(int i=0,DEFAULT_TIMEOUT2;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/3872/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ManageAccount.java-addNewUserAccount.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:37:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
-for(int i=0;i<searchList.length;i++){
+for(int i=0,DEFAULT_TIMEOUT2;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/3872/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ManageAccount.java-addNewUserAccount.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:37:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
-for(int i=start;i<textIndex;i++){
+for(int i=start,DEFAULT_TIMEOUT2;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/3872/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ManageAccount.java-addNewUserAccount.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:37:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
-return result;
+return "";
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2133/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereRequestImpl.java-getServletPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:37:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
-return text;
+return "";
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2133/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereRequestImpl.java-getServletPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:37:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
-return text;
+return "";
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2133/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereRequestImpl.java-getServletPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:37:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
-if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
+if(text==null||text.length()==0&&searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V7/7763/pattern-ver1-serial/app.src.main.java.cheaphone.gui.Offerta.java-setOffert.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:37:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
-if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
+if(text==null||text.length()==0||searchList==null||searchList.length==0&&replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V7/7763/pattern-ver1-serial/app.src.main.java.cheaphone.gui.Offerta.java-setOffert.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:37:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
-if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0&&replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V7/7763/pattern-ver1-serial/app.src.main.java.cheaphone.gui.Offerta.java-setOffert.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:37:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
-tempIndex=text.indexOf(searchList[i]);
+tempIndex=text.indexOf(searchList[i],0);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V17/3557/pattern-ver1-serial/src.main.java.com.jetbrains.jetpad.vclang.term.expr.sort.Level.java-prettyPrint.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:37:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
-if(timeToLive<0){
+if(timeToLive>0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:37:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
-for(int i=0;i<searchLength;i++){
+for(int i=0;i>searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:37:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Solution---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
-for(int i=0;i<searchList.length;i++){
+for(int i=0;i>searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:38:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
-if(textIndex==-1||tempIndex<textIndex){
+if(textIndex==-1||tempIndex>textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:38:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
-for(int i=start;i<textIndex;i++){
+for(int i=start;i>textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:38:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
-for(int i=0;i<searchLength;i++){
+for(int i=0;i>searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:38:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
-if(textIndex==-1||tempIndex<textIndex){
+if(textIndex==-1||tempIndex>textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:38:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
-for(int i=start;i<textLength;i++){
+for(int i=start;i>textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:38:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
-for(int i=0;i<searchLength;i++){
+for(int i=0,MAX_SERVICE_NODES;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/4395/pattern-ver1-serial/vipr-portal.com.emc.sa.common.src.java.com.emc.sa.zookeeper.ZkServiceDescriptors.java-start.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:38:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
-for(int i=0;i<searchList.length;i++){
+for(int i=0,MAX_SERVICE_NODES;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/4395/pattern-ver1-serial/vipr-portal.com.emc.sa.common.src.java.com.emc.sa.zookeeper.ZkServiceDescriptors.java-start.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:38:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
-for(int i=start;i<textIndex;i++){
+for(int i=start,MAX_SERVICE_NODES;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/4395/pattern-ver1-serial/vipr-portal.com.emc.sa.common.src.java.com.emc.sa.zookeeper.ZkServiceDescriptors.java-start.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:38:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
-for(int i=0;i<searchLength;i++){
+for(int i=0,MAX_ZK_WAIT_RETRY_TIMES;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7180/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.vdc.VdcOpHandler.java-waitForAllNodesAndReboot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:38:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
-for(int i=0;i<searchList.length;i++){
+for(int i=0,MAX_ZK_WAIT_RETRY_TIMES;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7180/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.vdc.VdcOpHandler.java-waitForAllNodesAndReboot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:38:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
-for(int i=start;i<textIndex;i++){
+for(int i=start,MAX_ZK_WAIT_RETRY_TIMES;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7180/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.vdc.VdcOpHandler.java-waitForAllNodesAndReboot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:38:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Solution---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
+break;
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
+break;
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:38:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
+break;
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:38:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
+break;
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:38:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
+break;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:38:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
+break;
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:39:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
-if(searchLength!=replacementLength){
+if(searchLength==replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/6722/pattern-ver1-serial/collections.queue.IntArrayQueue.java-peek.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:39:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
-while(textIndex!=-1){
+while(textIndex==-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/6722/pattern-ver1-serial/collections.queue.IntArrayQueue.java-peek.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:39:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
-return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
+return replaceEach(result,searchList,replacementList,repeat,searchLength-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/6021/pattern-ver1-serial/src.org.andengine.util.algorithm.path.astar.ManhattanHeuristic.java-getExpectedRestCost.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:39:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
-return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
+return replaceEach(result,searchList,replacementList,repeat,replacementLength-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/6021/pattern-ver1-serial/src.org.andengine.util.algorithm.path.astar.ManhattanHeuristic.java-getExpectedRestCost.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:39:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
-return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
+return replaceEach(result,searchList,replacementList,repeat,textIndex-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/6021/pattern-ver1-serial/src.org.andengine.util.algorithm.path.astar.ManhattanHeuristic.java-getExpectedRestCost.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:39:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
-return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
+return replaceEach(result,searchList,replacementList,repeat,replaceIndex-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/6021/pattern-ver1-serial/src.org.andengine.util.algorithm.path.astar.ManhattanHeuristic.java-getExpectedRestCost.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:39:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
-return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
+return replaceEach(result,searchList,replacementList,repeat,tempIndex-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/6021/pattern-ver1-serial/src.org.andengine.util.algorithm.path.astar.ManhattanHeuristic.java-getExpectedRestCost.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:39:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
+break;
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V33/1233/pattern-ver1-serial/crm.src.main.java.com.ogg.crm.ui.activity.CustomerPublicListActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:39:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
+break;
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V33/1233/pattern-ver1-serial/crm.src.main.java.com.ogg.crm.ui.activity.CustomerPublicListActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:39:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
-textIndex=tempIndex;
+textIndex=2;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:39:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
-replaceIndex=i;
+replaceIndex=2;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:39:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
-textIndex=tempIndex;
+textIndex=2;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:40:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
-if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
+if(text==null||text.length()==0||searchList==null||searchList.length<=0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:40:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
-if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
+if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length<=0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:40:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
-if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
+if(text==null||text.length()<=0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:40:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
-if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()<=0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:40:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
-if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()<=0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:40:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
-if(tempIndex==-1){
+if(tempIndex<=-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:40:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
-if(textIndex==-1||tempIndex<textIndex){
+if(textIndex<=-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:40:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
-if(textIndex==-1){
+if(textIndex<=-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:40:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
-if(tempIndex==-1){
+if(tempIndex<=-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:40:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
-if(textIndex==-1||tempIndex<textIndex){
+if(textIndex<=-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:40:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
-int textLength=text.length();
+float textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/6860/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.map.impl.eviction.MaxSizeChecker.java-isEvictablePerPartition.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:40:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
-int replacementLength=replacementList.length;
+float replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/6860/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.map.impl.eviction.MaxSizeChecker.java-isEvictablePerPartition.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:41:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
-int greater=replacementList[i].length()-searchList[i].length();
+float greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/6860/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.map.impl.eviction.MaxSizeChecker.java-isEvictablePerPartition.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:41:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
-replaceIndex=i;
+replaceIndex=3;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:41:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
-textIndex=tempIndex;
+textIndex=3;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:41:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
-replaceIndex=i;
+replaceIndex=3;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:41:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
-textIndex=tempIndex;
+textIndex=3;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:41:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
-StringBuilder buf=new StringBuilder(text.length()+increase);
+StringBuilder buf=new StringBuilder(text.length()-increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/163/pattern-ver1-serial/app.src.main.java.th.zirata.Blocks.EnemyBlocks.Hydra.java-createHydra.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:41:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
-start=textIndex+searchList[replaceIndex].length();
+start=textIndex-searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/163/pattern-ver1-serial/app.src.main.java.th.zirata.Blocks.EnemyBlocks.Hydra.java-createHydra.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
+break;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/2027/pattern-ver1-serial/cong.Internet.BRITE.src.org.cong.complexNetwork.model.AB.java-getTargetNode.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:41:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
-for(int i=0;i<searchLength;i++){
+for(int i=0;i<searchLength;i--){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V7/4666/pattern-ver1-serial/src.main.java.com.deanveloper.playtimeplus.commands.playtime.subcommand.TopSubCmd.java-execute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:41:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
-for(int i=0;i<searchList.length;i++){
+for(int i=0;i<searchList.length;i--){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V7/4666/pattern-ver1-serial/src.main.java.com.deanveloper.playtimeplus.commands.playtime.subcommand.TopSubCmd.java-execute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:41:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
-for(int i=start;i<textIndex;i++){
+for(int i=start;i<textIndex;i--){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V7/4666/pattern-ver1-serial/src.main.java.com.deanveloper.playtimeplus.commands.playtime.subcommand.TopSubCmd.java-execute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:41:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
-for(int i=0;i<searchLength;i++){
+for(int i=0;i<searchLength;i--){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V7/4666/pattern-ver1-serial/src.main.java.com.deanveloper.playtimeplus.commands.playtime.subcommand.TopSubCmd.java-execute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:41:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
-for(int i=start;i<textLength;i++){
+for(int i=start;i<textLength;i--){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V7/4666/pattern-ver1-serial/src.main.java.com.deanveloper.playtimeplus.commands.playtime.subcommand.TopSubCmd.java-execute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:41:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
-if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+if(noMoreMatchesForReplIndex[i]||searchList[i]!=null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/6105/pattern-ver1-serial/src.main.java.com.chord4js.ServiceId.java-ServiceId.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:41:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
-if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]!=null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/6105/pattern-ver1-serial/src.main.java.com.chord4js.ServiceId.java-ServiceId.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:41:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
-if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+if(noMoreMatchesForReplIndex[i]||searchList[i]!=null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/6105/pattern-ver1-serial/src.main.java.com.chord4js.ServiceId.java-ServiceId.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:41:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
-if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]!=null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/6105/pattern-ver1-serial/src.main.java.com.chord4js.ServiceId.java-ServiceId.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:41:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
-StringBuilder buf=new StringBuilder(text.length()+increase);
+StringBuilder buf=new StringBuilder(text.length()+searchLength);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/1162/pattern-ver1-serial/Android.C4.app.src.main.java.projectc4.c4.client.GameGridView.java-dropPowerup.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:41:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
-StringBuilder buf=new StringBuilder(text.length()+increase);
+StringBuilder buf=new StringBuilder(text.length()+replacementLength);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/1162/pattern-ver1-serial/Android.C4.app.src.main.java.projectc4.c4.client.GameGridView.java-dropPowerup.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:41:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
-StringBuilder buf=new StringBuilder(text.length()+increase);
+StringBuilder buf=new StringBuilder(text.length()+textIndex);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/1162/pattern-ver1-serial/Android.C4.app.src.main.java.projectc4.c4.client.GameGridView.java-dropPowerup.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:41:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
-StringBuilder buf=new StringBuilder(text.length()+increase);
+StringBuilder buf=new StringBuilder(text.length()+replaceIndex);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/1162/pattern-ver1-serial/Android.C4.app.src.main.java.projectc4.c4.client.GameGridView.java-dropPowerup.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:42:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
-StringBuilder buf=new StringBuilder(text.length()+increase);
+StringBuilder buf=new StringBuilder(text.length()+tempIndex);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/1162/pattern-ver1-serial/Android.C4.app.src.main.java.projectc4.c4.client.GameGridView.java-dropPowerup.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:42:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
+break;
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V4/4119/pattern-ver1-serial/src.com.Sample.java-ParseLeft.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:42:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
-throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
+throw new IllegalArgumentException("Search and Replace array lengths don't match: "+text+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:42:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
-throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
+throw new IllegalArgumentException("Search and Replace array lengths don't match: "+replacementLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:42:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
-throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
+throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchList+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:42:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
-throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
+throw new IllegalArgumentException("Search and Replace array lengths don't match: "+replacementList+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:42:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
-throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
+throw new IllegalArgumentException("Search and Replace array lengths don't match: "+repeat+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:42:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
-throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
+throw new IllegalArgumentException("Search and Replace array lengths don't match: "+timeToLive+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:42:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
-if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+if(noMoreMatchesForReplIndex[i]||searchList[0]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2011/V2/4175/pattern-ver1-serial/common-gui.src.main.java.org.drugis.common.gui.FileDialog.java-wrapExtensions.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:42:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
-if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[0].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2011/V2/4175/pattern-ver1-serial/common-gui.src.main.java.org.drugis.common.gui.FileDialog.java-wrapExtensions.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:42:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
-if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[0]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2011/V2/4175/pattern-ver1-serial/common-gui.src.main.java.org.drugis.common.gui.FileDialog.java-wrapExtensions.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:42:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
-tempIndex=text.indexOf(searchList[i]);
+tempIndex=text.indexOf(searchList[0]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2011/V2/4175/pattern-ver1-serial/common-gui.src.main.java.org.drugis.common.gui.FileDialog.java-wrapExtensions.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:42:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Solution---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
-int greater=replacementList[i].length()-searchList[i].length();
+int greater=replacementList[0].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2011/V2/4175/pattern-ver1-serial/common-gui.src.main.java.org.drugis.common.gui.FileDialog.java-wrapExtensions.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:42:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
-int greater=replacementList[i].length()-searchList[i].length();
+int greater=replacementList[i].length()-searchList[0].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2011/V2/4175/pattern-ver1-serial/common-gui.src.main.java.org.drugis.common.gui.FileDialog.java-wrapExtensions.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:42:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
-if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+if(noMoreMatchesForReplIndex[i]||searchList[0]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2011/V2/4175/pattern-ver1-serial/common-gui.src.main.java.org.drugis.common.gui.FileDialog.java-wrapExtensions.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:42:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
-if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[0].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2011/V2/4175/pattern-ver1-serial/common-gui.src.main.java.org.drugis.common.gui.FileDialog.java-wrapExtensions.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:42:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
-if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[0]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2011/V2/4175/pattern-ver1-serial/common-gui.src.main.java.org.drugis.common.gui.FileDialog.java-wrapExtensions.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:42:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
-tempIndex=text.indexOf(searchList[i],start);
+tempIndex=text.indexOf(searchList[0],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2011/V2/4175/pattern-ver1-serial/common-gui.src.main.java.org.drugis.common.gui.FileDialog.java-wrapExtensions.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:42:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
-if(greater>0){
+if(greater<0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3672/pattern-ver1-serial/src.edu.miamioh.cse283.htw.Room.java-shoot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:43:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
-if(timeToLive<0){
+if(timeToLive<4){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V36/1764/pattern-ver1-serial/src.main.java.ua.com.ecotep.debtprevention.MainController.java-handleArchiveAction.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:43:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
-for(int i=0;i<searchLength;i++){
+for(int i=0;i<4;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V36/1764/pattern-ver1-serial/src.main.java.ua.com.ecotep.debtprevention.MainController.java-handleArchiveAction.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:43:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
-if(textIndex==-1||tempIndex<textIndex){
+if(textIndex==-1||tempIndex<4){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V36/1764/pattern-ver1-serial/src.main.java.ua.com.ecotep.debtprevention.MainController.java-handleArchiveAction.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:43:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
-for(int i=0;i<searchList.length;i++){
+for(int i=0;i<4;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V36/1764/pattern-ver1-serial/src.main.java.ua.com.ecotep.debtprevention.MainController.java-handleArchiveAction.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:43:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
-for(int i=start;i<textIndex;i++){
+for(int i=start;i<4;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V36/1764/pattern-ver1-serial/src.main.java.ua.com.ecotep.debtprevention.MainController.java-handleArchiveAction.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:43:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
-for(int i=0;i<searchLength;i++){
+for(int i=0;i<4;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V36/1764/pattern-ver1-serial/src.main.java.ua.com.ecotep.debtprevention.MainController.java-handleArchiveAction.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:43:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
-if(textIndex==-1||tempIndex<textIndex){
+if(textIndex==-1||tempIndex<4){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V36/1764/pattern-ver1-serial/src.main.java.ua.com.ecotep.debtprevention.MainController.java-handleArchiveAction.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:43:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
-for(int i=start;i<textLength;i++){
+for(int i=start;i<4;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V36/1764/pattern-ver1-serial/src.main.java.ua.com.ecotep.debtprevention.MainController.java-handleArchiveAction.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:43:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
-if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
+if(text==null||text.length()==0||searchList==null||searchList.length>=0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:43:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
-if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
+if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length>=0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:43:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
-if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
+if(text==null||text.length()>=0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:43:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
-if(tempIndex==-1){
+if(tempIndex>=-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:43:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
-if(textIndex==-1||tempIndex<textIndex){
+if(textIndex>=-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:43:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
-if(textIndex==-1){
+if(textIndex>=-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:43:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
-if(tempIndex==-1){
+if(tempIndex>=-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:43:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
-if(textIndex==-1||tempIndex<textIndex){
+if(textIndex>=-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:43:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
-if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()>=0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:43:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
-if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()>=0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:43:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
-if(greater>0){
+if(greater!=0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V36/71/pattern-ver1-serial/src.edu.stanford.nlp.mt.decoder.feat.base.TranslationModelFeaturizer.java-ruleFeaturize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:43:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
-if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+if(noMoreMatchesForReplIndex[i]||searchList[1]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:43:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
-if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[1].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:44:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
-if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[1]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:44:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
-tempIndex=text.indexOf(searchList[i]);
+tempIndex=text.indexOf(searchList[1]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:44:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
-if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+if(noMoreMatchesForReplIndex[1]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:44:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
-noMoreMatchesForReplIndex[i]=true;
+noMoreMatchesForReplIndex[1]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:44:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
-int greater=replacementList[i].length()-searchList[i].length();
+int greater=replacementList[1].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:44:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
-int greater=replacementList[i].length()-searchList[i].length();
+int greater=replacementList[i].length()-searchList[1].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:44:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
-if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+if(noMoreMatchesForReplIndex[i]||searchList[1]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:44:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
-if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[1].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:44:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
-if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
+if(text==null||text.length()==0||searchList==null||searchList.length!=0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:44:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
-if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
+if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length!=0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:44:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
-if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
+if(text==null||text.length()!=0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:44:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
-if(tempIndex==-1){
+if(tempIndex!=-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:44:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
-if(textIndex==-1||tempIndex<textIndex){
+if(textIndex!=-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:44:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
-if(textIndex==-1){
+if(textIndex!=-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:44:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
-if(tempIndex==-1){
+if(tempIndex!=-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:44:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
-if(textIndex==-1||tempIndex<textIndex){
+if(textIndex!=-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:44:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
-if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()!=0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:44:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
-if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()!=0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:44:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
-int searchLength=searchList.length;
+Integer searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:44:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
-int replacementLength=replacementList.length;
+Integer replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:44:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
-int textIndex=-1;
+Integer textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:45:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
-int replaceIndex=-1;
+Integer replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:45:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
-int tempIndex=-1;
+Integer tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:45:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
-int greater=replacementList[i].length()-searchList[i].length();
+Integer greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:45:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
-int start=0;
+Integer start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:45:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
-int increase=0;
+Integer increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:45:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
-int textLength=text.length();
+Integer textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:45:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
-return result;
+return text;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5398/pattern-ver1-serial/extensions.fluent.src.org.exist.fluent.Item.java-valueWithDefault.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:45:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
-if(searchLength!=replacementLength){
+if(searchLength!=6){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/1679/pattern-ver1-serial/src.main.java.net.sf.cram.index.CramIndex.java-Entry.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:45:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
-for(int i=0;i<searchLength;i++){
+for(int i=0,textLength;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V16/6746/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.vplexcontroller.VPlexDeviceController.java-deleteStorageView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:45:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
-for(int i=0;i<searchLength;i++){
+for(int i=0,result;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V16/6746/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.vplexcontroller.VPlexDeviceController.java-deleteStorageView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:45:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
-for(int i=0;i<searchList.length;i++){
+for(int i=0,textLength;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V16/6746/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.vplexcontroller.VPlexDeviceController.java-deleteStorageView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:45:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
-for(int i=start;i<textIndex;i++){
+for(int i=start,textLength;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V16/6746/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.vplexcontroller.VPlexDeviceController.java-deleteStorageView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:45:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
-for(int i=0;i<searchLength;i++){
+for(int i=0,localLevel;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/1178/pattern-ver1-serial/wrapper.src.main.java.com.ankit.wrapper.Logger.java-w.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:45:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
-for(int i=0;i<searchList.length;i++){
+for(int i=0,localLevel;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/1178/pattern-ver1-serial/wrapper.src.main.java.com.ankit.wrapper.Logger.java-w.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:45:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
-for(int i=start;i<textIndex;i++){
+for(int i=start,localLevel;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/1178/pattern-ver1-serial/wrapper.src.main.java.com.ankit.wrapper.Logger.java-w.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:45:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
+import java.io.IOException;
+
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
+return null;
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V39/3389/pattern-ver1-serial/NewMessageTask.java-call.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:45:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
-textIndex=tempIndex;
+textIndex=searchLength;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4596/pattern-ver1-serial/VortexGameEngine.src.vortex.Game.java-setDriver.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:45:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
-textIndex=tempIndex;
+textIndex=timeToLive;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4596/pattern-ver1-serial/VortexGameEngine.src.vortex.Game.java-setDriver.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:45:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
-textIndex=tempIndex;
+textIndex=replacementLength;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4596/pattern-ver1-serial/VortexGameEngine.src.vortex.Game.java-setDriver.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:45:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
-textIndex=tempIndex;
+textIndex=textIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4596/pattern-ver1-serial/VortexGameEngine.src.vortex.Game.java-setDriver.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:45:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
-textIndex=tempIndex;
+textIndex=replaceIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4596/pattern-ver1-serial/VortexGameEngine.src.vortex.Game.java-setDriver.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:45:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
-replaceIndex=i;
+replaceIndex=searchLength;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V10/7295/pattern-ver1-serial/src.android.SunmiPrinter.java-printTask.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:46:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
-replaceIndex=i;
+replaceIndex=timeToLive;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V10/7295/pattern-ver1-serial/src.android.SunmiPrinter.java-printTask.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:46:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
-replaceIndex=i;
+replaceIndex=replacementLength;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V10/7295/pattern-ver1-serial/src.android.SunmiPrinter.java-printTask.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:46:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
-replaceIndex=i;
+replaceIndex=textIndex;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V10/7295/pattern-ver1-serial/src.android.SunmiPrinter.java-printTask.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:46:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
-replaceIndex=i;
+replaceIndex=replaceIndex;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V10/7295/pattern-ver1-serial/src.android.SunmiPrinter.java-printTask.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:46:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
-for(int i=0;i<searchLength;i++){
+for(int i=0,increase;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7663/pattern-ver1-serial/tools.dbutils.src.main.java.com.emc.storageos.dbutils.Main.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:46:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
-tempIndex=text.indexOf(searchList[i]);
+tempIndex=text.indexOf(searchList[i],tempIndex);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7663/pattern-ver1-serial/tools.dbutils.src.main.java.com.emc.storageos.dbutils.Main.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:46:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
-tempIndex=text.indexOf(searchList[i]);
+tempIndex=text.indexOf(searchList[i],searchLength);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V13/7060/pattern-ver1-serial/t-relational.src.main.java.eu.unifiedviews.plugins.transformer.relational.Relational.java-execute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:46:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
-if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+if(noMoreMatchesForReplIndex[0]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V20/5785/pattern-ver1-serial/src.Seminars.first.collections.ArrayPriorityQueue.java-extractMin.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:46:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
-noMoreMatchesForReplIndex[i]=true;
+noMoreMatchesForReplIndex[0]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V20/5785/pattern-ver1-serial/src.Seminars.first.collections.ArrayPriorityQueue.java-extractMin.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:46:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
-if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+if(noMoreMatchesForReplIndex[1]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/1721/pattern-ver1-serial/src.util.window.SetFilterDialog.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:46:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
-noMoreMatchesForReplIndex[i]=true;
+noMoreMatchesForReplIndex[1]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/1721/pattern-ver1-serial/src.util.window.SetFilterDialog.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:46:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
-if(searchLength!=replacementLength){
+if(searchLength<replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/1616/pattern-ver1-serial/src.PileRPL.java-sub.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:46:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
-while(textIndex!=-1){
+while(textIndex<-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/1616/pattern-ver1-serial/src.PileRPL.java-sub.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:46:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
-replaceIndex=i;
+replaceIndex=10;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.SlarkDarkPact.java-SlarkDarkPact.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:46:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
-textIndex=tempIndex;
+textIndex=10;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.SlarkDarkPact.java-SlarkDarkPact.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:46:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
-replaceIndex=i;
+replaceIndex=10;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.SlarkDarkPact.java-SlarkDarkPact.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:46:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
-textIndex=tempIndex;
+textIndex=10;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.SlarkDarkPact.java-SlarkDarkPact.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:46:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
-if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+if(noMoreMatchesForReplIndex[i]||searchList[2]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:46:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
-if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[2].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:46:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
-if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[2]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:46:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
-tempIndex=text.indexOf(searchList[i]);
+tempIndex=text.indexOf(searchList[2]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:46:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
-if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+if(noMoreMatchesForReplIndex[2]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:47:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
-noMoreMatchesForReplIndex[i]=true;
+noMoreMatchesForReplIndex[2]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:47:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
-int greater=replacementList[i].length()-searchList[i].length();
+int greater=replacementList[2].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:47:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
-int greater=replacementList[i].length()-searchList[i].length();
+int greater=replacementList[i].length()-searchList[2].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:47:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
-if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+if(noMoreMatchesForReplIndex[i]||searchList[2]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:47:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
-if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[2].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:47:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
-noMoreMatchesForReplIndex[i]=true;
+noMoreMatchesForReplIndex[i]=repeat;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V35/1892/pattern-ver1-serial/toolbelt.src.main.java.com.simplifyops.toolbelt.ToolBelt.java-ansiColorOutput.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:47:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
-if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
+if(text==null||text.length()>0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:47:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
-if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
+if(text==null||text.length()==0||searchList==null||searchList.length>0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:47:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
-if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
+if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length>0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:47:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
-if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()>0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:47:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
-if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()>0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:47:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
-if(tempIndex==-1){
+if(tempIndex>-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:47:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
-if(textIndex==-1||tempIndex<textIndex){
+if(textIndex>-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:47:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
-if(textIndex==-1){
+if(textIndex>-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:47:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
-if(tempIndex==-1){
+if(tempIndex>-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:47:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
-if(textIndex==-1||tempIndex<textIndex){
+if(textIndex>-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:47:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
-tempIndex=text.indexOf(searchList[i]);
+tempIndex=text.indexOf(searchList[i],i);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V36/4714/pattern-ver1-serial/gisWebProject.src.emergencyProcess.FollowUser.java-doPost.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:47:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
-buf.append(replacementList[replaceIndex]);
+buf.append(replacementList[1]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V40/4485/pattern-ver1-serial/beetl-core.src.main.java.org.beetl.core.GeneralVarTagBinding.java-getAttributes.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:47:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
-start=textIndex+searchList[replaceIndex].length();
+start=textIndex+searchList[1].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V40/4485/pattern-ver1-serial/beetl-core.src.main.java.org.beetl.core.GeneralVarTagBinding.java-getAttributes.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:47:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
-return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
+return replaceEach(result,searchList,replacementList,repeat,timeToLive-searchLength);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:47:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
-return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
+return replaceEach(result,searchList,replacementList,repeat,timeToLive-replacementLength);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:48:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
-return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
+return replaceEach(result,searchList,replacementList,repeat,timeToLive-textLength);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:48:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
-return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
+return replaceEach(result,searchList,replacementList,repeat,timeToLive-textIndex);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:48:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
-return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
+return replaceEach(result,searchList,replacementList,repeat,timeToLive-replaceIndex);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:48:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
-return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
+return replaceEach(result,searchList,replacementList,repeat,timeToLive-tempIndex);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:48:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
-if(searchLength!=replacementLength){
+if(searchLength>replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V36/3765/pattern-ver1-serial/app.src.main.java.com.xlythe.sms.MessageActivity.java-onGlobalLayout.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:48:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
-while(textIndex!=-1){
+while(textIndex>-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V36/3765/pattern-ver1-serial/app.src.main.java.com.xlythe.sms.MessageActivity.java-onGlobalLayout.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:48:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
-replaceIndex=i;
+replaceIndex=2;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V2/2316/pattern-ver1-serial/TaskScheduler.src.ApplicationWindow.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:48:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
-increase=Math.min(increase,text.length()/5);
+increase=Math.max(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4024/pattern-ver1-serial/MPChartLib.src.main.java.com.github.mikephil.charting.charts.BarLineChartBase.java-getLowestVisibleX.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:48:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
+import java.util.ArrayList;
+
+import com.sun.javafx.scene.control.behavior.KeyBinding;
+
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
-for(int i=0;i<searchLength;i++){
+for(int i=0;i<searchLength;i++,new ArrayList<KeyBinding>()){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/314/pattern-ver1-serial/src.main.java.jfxtras.labs.internal.scene.control.behavior.SixteenSegmentBehavior.java-SixteenSegmentBehavior.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:48:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
+import java.util.ArrayList;
+
+import com.sun.javafx.scene.control.behavior.KeyBinding;
+
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
-for(int i=0;i<searchList.length;i++){
+for(int i=0;i<searchList.length;i++,new ArrayList<KeyBinding>()){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/314/pattern-ver1-serial/src.main.java.jfxtras.labs.internal.scene.control.behavior.SixteenSegmentBehavior.java-SixteenSegmentBehavior.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:48:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
+import java.util.ArrayList;
+
+import com.sun.javafx.scene.control.behavior.KeyBinding;
+
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
-for(int i=start;i<textIndex;i++){
+for(int i=start;i<textIndex;i++,new ArrayList<KeyBinding>()){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/314/pattern-ver1-serial/src.main.java.jfxtras.labs.internal.scene.control.behavior.SixteenSegmentBehavior.java-SixteenSegmentBehavior.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:48:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
-textIndex=tempIndex;
+textIndex=100;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.TemplarAssassinRefraction.java-TemplarAssassinRefraction.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:48:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
-replaceIndex=i;
+replaceIndex=100;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.TemplarAssassinRefraction.java-TemplarAssassinRefraction.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:48:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
-replaceIndex=i;
+replaceIndex=100;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.TemplarAssassinRefraction.java-TemplarAssassinRefraction.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:48:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
-textIndex=tempIndex;
+textIndex=100;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.TemplarAssassinRefraction.java-TemplarAssassinRefraction.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:48:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
-if(greater>0){
+if(greater>3){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5511/pattern-ver1-serial/core.src.com.trumandeyoung.sprouts.GameRenderer.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:48:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
-if(timeToLive<0){
+if(timeToLive<5){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V34/7269/pattern-ver1-serial/src.infovis.piechart.Data.java-Data.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:48:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
-for(int i=0;i<searchLength;i++){
+for(int i=0;i<5;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V34/7269/pattern-ver1-serial/src.infovis.piechart.Data.java-Data.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:48:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
-if(textIndex==-1||tempIndex<textIndex){
+if(textIndex==-1||tempIndex<5){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V34/7269/pattern-ver1-serial/src.infovis.piechart.Data.java-Data.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:48:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
-for(int i=0;i<searchList.length;i++){
+for(int i=0;i<5;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V34/7269/pattern-ver1-serial/src.infovis.piechart.Data.java-Data.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:48:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
-for(int i=start;i<textIndex;i++){
+for(int i=start;i<5;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V34/7269/pattern-ver1-serial/src.infovis.piechart.Data.java-Data.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:48:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
-for(int i=0;i<searchLength;i++){
+for(int i=0;i<5;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V34/7269/pattern-ver1-serial/src.infovis.piechart.Data.java-Data.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:48:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
-for(int i=start;i<textLength;i++){
+for(int i=start;i<5;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V34/7269/pattern-ver1-serial/src.infovis.piechart.Data.java-Data.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:48:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
-if(textIndex==-1||tempIndex<textIndex){
+if(textIndex==-1||tempIndex<5){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V34/7269/pattern-ver1-serial/src.infovis.piechart.Data.java-Data.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:49:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
-buf.append(replacementList[replaceIndex]);
+buf.append(replacementList[0]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V45/2062/pattern-ver1-serial/jkind-common.src.jkind.lustre.values.RatValue.java-truncate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:49:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
-start=textIndex+searchList[replaceIndex].length();
+start=textIndex+searchList[0].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V45/2062/pattern-ver1-serial/jkind-common.src.jkind.lustre.values.RatValue.java-truncate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:49:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
-boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
+boolean[] noMoreMatchesForReplIndex=new boolean[(searchLength)];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/4580/pattern-ver1-serial/src.sort.MergeTask.java-call.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:49:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
-tempIndex=text.indexOf(searchList[i],start);
+tempIndex=text.lastIndexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4339/pattern-ver1-serial/app.src.main.java.com.leafpic.app.utils.StringUtils.java-getPhotoNamebyPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:51:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
-tempIndex=text.indexOf(searchList[i]);
+tempIndex=text.lastIndexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4339/pattern-ver1-serial/app.src.main.java.com.leafpic.app.utils.StringUtils.java-getPhotoNamebyPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:51:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
-increase+=3*greater;
+increase+=tempIndex*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V34/4880/pattern-ver1-serial/src.main.java.ch.trq.carrera.javapilot.akka.trackanalyzer.TrackAnalyzer.java-calculateDistance.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:51:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
-increase+=3*greater;
+increase+=increase*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V34/4880/pattern-ver1-serial/src.main.java.ch.trq.carrera.javapilot.akka.trackanalyzer.TrackAnalyzer.java-calculateDistance.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:51:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
-increase+=3*greater;
+increase+=textIndex*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V34/4880/pattern-ver1-serial/src.main.java.ch.trq.carrera.javapilot.akka.trackanalyzer.TrackAnalyzer.java-calculateDistance.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:51:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
-increase+=3*greater;
+increase+=replaceIndex*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V34/4880/pattern-ver1-serial/src.main.java.ch.trq.carrera.javapilot.akka.trackanalyzer.TrackAnalyzer.java-calculateDistance.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:51:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
-increase+=3*greater;
+increase+=start*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V34/4880/pattern-ver1-serial/src.main.java.ch.trq.carrera.javapilot.akka.trackanalyzer.TrackAnalyzer.java-calculateDistance.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:51:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
-tempIndex=text.indexOf(searchList[i]);
+tempIndex=text.indexOf(searchList[i],2);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2170/pattern-ver1-serial/tool.jtag.src.main.java.nl.lxtreme.ols.tool.jtag.JTAGDataSet.java-reportJTAGTdiData.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:51:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
-buf.append(replacementList[replaceIndex]);
+buf.append(replacementList[start]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/1576/pattern-ver1-serial/src.wyil.io.WyilFileReader.java-readTypePool.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:51:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
-buf.append(replacementList[replaceIndex]);
+buf.append(replacementList[increase]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/1576/pattern-ver1-serial/src.wyil.io.WyilFileReader.java-readTypePool.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:51:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
-buf.append(replacementList[replaceIndex]);
+buf.append(replacementList[searchLength]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/1576/pattern-ver1-serial/src.wyil.io.WyilFileReader.java-readTypePool.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:51:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
-buf.append(replacementList[replaceIndex]);
+buf.append(replacementList[replacementLength]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/1576/pattern-ver1-serial/src.wyil.io.WyilFileReader.java-readTypePool.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:51:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
-buf.append(replacementList[replaceIndex]);
+buf.append(replacementList[textIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/1576/pattern-ver1-serial/src.wyil.io.WyilFileReader.java-readTypePool.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:51:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
-int textIndex=-1;
+int textIndex=-2;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1609/pattern-ver1-serial/jsqlbox.src.main.java.com.github.drinkjava2.jsqlbox.Dao.java-executeQuiet.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:51:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
-int replaceIndex=-1;
+int replaceIndex=-2;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1609/pattern-ver1-serial/jsqlbox.src.main.java.com.github.drinkjava2.jsqlbox.Dao.java-executeQuiet.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:51:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
-int tempIndex=-1;
+int tempIndex=-2;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1609/pattern-ver1-serial/jsqlbox.src.main.java.com.github.drinkjava2.jsqlbox.Dao.java-executeQuiet.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:51:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
-if(tempIndex==-1){
+if(tempIndex==-2){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1609/pattern-ver1-serial/jsqlbox.src.main.java.com.github.drinkjava2.jsqlbox.Dao.java-executeQuiet.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:51:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
-if(textIndex==-1||tempIndex<textIndex){
+if(textIndex==-2||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1609/pattern-ver1-serial/jsqlbox.src.main.java.com.github.drinkjava2.jsqlbox.Dao.java-executeQuiet.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:51:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
-if(textIndex==-1){
+if(textIndex==-2){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1609/pattern-ver1-serial/jsqlbox.src.main.java.com.github.drinkjava2.jsqlbox.Dao.java-executeQuiet.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:51:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
-while(textIndex!=-1){
+while(textIndex!=-2){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1609/pattern-ver1-serial/jsqlbox.src.main.java.com.github.drinkjava2.jsqlbox.Dao.java-executeQuiet.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:52:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
-textIndex=-1;
+textIndex=-2;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1609/pattern-ver1-serial/jsqlbox.src.main.java.com.github.drinkjava2.jsqlbox.Dao.java-executeQuiet.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:52:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
-replaceIndex=-1;
+replaceIndex=-2;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1609/pattern-ver1-serial/jsqlbox.src.main.java.com.github.drinkjava2.jsqlbox.Dao.java-executeQuiet.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:52:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
-tempIndex=-1;
+tempIndex=-2;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1609/pattern-ver1-serial/jsqlbox.src.main.java.com.github.drinkjava2.jsqlbox.Dao.java-executeQuiet.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:52:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
-if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[1]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V39/4646/pattern-ver1-serial/src.dataset.utils.AnalyzeUtils.java-readFromDoubleFile.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:52:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
-if(tempIndex==-1){
+if(tempIndex==0){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/4568/pattern-ver1-serial/src.client.game.GameFrame.java-received.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:52:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
-if(textIndex==-1||tempIndex<textIndex){
+if(textIndex==0||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/4568/pattern-ver1-serial/src.client.game.GameFrame.java-received.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:52:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
-if(textIndex==-1){
+if(textIndex==0){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/4568/pattern-ver1-serial/src.client.game.GameFrame.java-received.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:52:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
-if(tempIndex==-1){
+if(tempIndex==0){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/4568/pattern-ver1-serial/src.client.game.GameFrame.java-received.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:52:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
-if(textIndex==-1||tempIndex<textIndex){
+if(textIndex==0||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/4568/pattern-ver1-serial/src.client.game.GameFrame.java-received.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:52:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
-boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
+ final boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
-String result=buf.toString();
+ final String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:52:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
-int searchLength=searchList.length;
+ final int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
-boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
+ final boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:52:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
-int replacementLength=replacementList.length;
+ final int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
-boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
+ final boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:52:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
-boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
+ final boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
-StringBuilder buf=new StringBuilder(text.length()+increase);
+ final StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:52:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
-boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
+ final boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
-int textLength=text.length();
+ final int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:52:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
-textIndex=-1;
+textIndex=1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:52:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
-replaceIndex=-1;
+replaceIndex=1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:52:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
-tempIndex=-1;
+tempIndex=1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:52:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
-textIndex=tempIndex;
+textIndex=-1;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:52:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
-replaceIndex=i;
+replaceIndex=-1;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:52:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
-replaceIndex=i;
+replaceIndex=-1;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:52:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
-textIndex=tempIndex;
+textIndex=-1;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:52:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
-return result;
+return new String(result);
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V2/6348/pattern-ver1-serial/src.bufmgr.LIRS.java-getReplacementCandidate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:53:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
-return text;
+return new String(text);
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V2/6348/pattern-ver1-serial/src.bufmgr.LIRS.java-getReplacementCandidate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:53:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
-return text;
+return new String(text);
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V2/6348/pattern-ver1-serial/src.bufmgr.LIRS.java-getReplacementCandidate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:53:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
-int greater=replacementList[i].length()-searchList[i].length();
+ final int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
-String result=buf.toString();
+ final String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6059/pattern-ver1-serial/src.main.java.com.bandwidth.sdk.examples.ResourceListExample.java-printRecordings.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:53:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
-int searchLength=searchList.length;
+ int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
-String result=buf.toString();
+ String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:53:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
-int searchLength=searchList.length;
+ int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
-int textLength=text.length();
+ int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:53:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
-int replacementLength=replacementList.length;
+ int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
-String result=buf.toString();
+ String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:53:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
-int replacementLength=replacementList.length;
+ int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
-int textLength=text.length();
+ int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:53:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
-boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
+ boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
-String result=buf.toString();
+ String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:53:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
-boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
+ boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
-int textLength=text.length();
+ int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:53:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
-int textIndex=-1;
+ int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
-String result=buf.toString();
+ String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:53:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
-int textIndex=-1;
+ int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
-int textLength=text.length();
+ int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:53:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
-int replaceIndex=-1;
+ int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
-String result=buf.toString();
+ String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:53:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
-int replaceIndex=-1;
+ int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
-int textLength=text.length();
+ int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:53:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
-int searchLength=searchList.length;
+ final int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
-StringBuilder buf=new StringBuilder(text.length()+increase);
+ final StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/4668/pattern-ver1-serial/src.main.java.accountService.AccountServiceImpl.java-updateUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:53:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
-int replacementLength=replacementList.length;
+ final int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
-StringBuilder buf=new StringBuilder(text.length()+increase);
+ final StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/4668/pattern-ver1-serial/src.main.java.accountService.AccountServiceImpl.java-updateUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:53:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
-int searchLength=searchList.length;
+ final int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
-int greater=replacementList[i].length()-searchList[i].length();
+ final int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V22/6331/pattern-ver1-serial/src.java.growthcraft.api.fishtrap.FishTrapEntry.java-getFishable.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:53:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
-int replacementLength=replacementList.length;
+ final int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
-int greater=replacementList[i].length()-searchList[i].length();
+ final int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V22/6331/pattern-ver1-serial/src.java.growthcraft.api.fishtrap.FishTrapEntry.java-getFishable.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:53:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
-int searchLength=searchList.length;
-int replacementLength=replacementList.length;
+ final int searchLength=searchList.length;
+ final int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V22/6331/pattern-ver1-serial/src.java.growthcraft.api.fishtrap.FishTrapEntry.java-getFishable.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:53:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
-tempIndex=-1;
+tempIndex=0;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/1097/pattern-ver1-serial/plugins.de.ovgu.featureide.core.mpl.src.de.ovgu.featureide.core.mpl.signature.javadoc.AJavaDocCommentMerger.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:53:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
-textIndex=-1;
+textIndex=0;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/1097/pattern-ver1-serial/plugins.de.ovgu.featureide.core.mpl.src.de.ovgu.featureide.core.mpl.signature.javadoc.AJavaDocCommentMerger.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:53:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
-replaceIndex=-1;
+replaceIndex=0;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/1097/pattern-ver1-serial/plugins.de.ovgu.featureide.core.mpl.src.de.ovgu.featureide.core.mpl.signature.javadoc.AJavaDocCommentMerger.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:53:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
-buf.append(replacementList[replaceIndex]);
+buf.append(replacementList[replaceIndex].trim());
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:53:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
-tempIndex=text.indexOf(searchList[i]);
+tempIndex=text.indexOf(searchList[i].trim());
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:54:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
-textIndex=-1;
+textIndex=2;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:54:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
-replaceIndex=-1;
+replaceIndex=2;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:54:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
-tempIndex=-1;
+tempIndex=2;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:54:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
-textIndex=-1;
+textIndex=3;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:54:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
-replaceIndex=-1;
+replaceIndex=3;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:54:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
-tempIndex=-1;
+tempIndex=3;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:54:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
+import java.util.Iterator;
+
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
-if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
+if(text==null||text.length()==-1||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:54:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
+import java.util.Iterator;
+
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
-if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
+if(text==null||text.length()==0||searchList==null||searchList.length==-1||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:54:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
+import java.util.Iterator;
+
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
-if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
+if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==-1){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:54:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
+import java.util.Iterator;
+
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
-if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==-1||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:54:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
+import java.util.Iterator;
+
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
-if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==-1||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:54:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
-if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
+if(text==null||timeToLive==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5778/pattern-ver1-serial/src.main.java.cn.momia.mapi.api.AbstractIndexApi.java-getBanners.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:54:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
+start++;
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:54:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
+start++;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:54:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
+increase++;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:54:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
+searchLength++;
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:54:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
+textIndex++;
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:54:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
+textIndex++;
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:54:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
+greater++;
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:54:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
+i++;
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:54:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
+i++;
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:54:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Solution---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
+i++;
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:55:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
+i++;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:55:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
+i++;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:55:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
+i++;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:55:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
-return result;
+return result.trim();
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1192/pattern-ver1-serial/NewsReader.src.com.example.net_ex04.SinaNewsParser.java-getTitle.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:55:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
-return text;
+return text.trim();
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1192/pattern-ver1-serial/NewsReader.src.com.example.net_ex04.SinaNewsParser.java-getTitle.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:55:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
-return text;
+return text.trim();
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1192/pattern-ver1-serial/NewsReader.src.com.example.net_ex04.SinaNewsParser.java-getTitle.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:55:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
-if(!repeat){
+if(true){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:55:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
+i++;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V8/868/pattern-ver1-serial/src.main.java.gcommon.objects.NumberFormatter.java-format.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:55:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
+textIndex--;
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:55:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
+textIndex--;
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:55:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
+greater--;
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:55:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
-for(int i=0;i<searchLength;i++){
+for(int i=0;i<=searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
-for(int i=start;i<textIndex;i++){
+for(int i=start;i<=textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4679/pattern-ver1-serial/src.course.Grass.java-render.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:55:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
-for(int i=0;i<searchLength;i++){
+for(int i=0;i<=searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
-for(int i=0;i<searchLength;i++){
+for(int i=0;i<=searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4679/pattern-ver1-serial/src.course.Grass.java-render.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:55:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
-for(int i=0;i<searchLength;i++){
+for(int i=0;i<=searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
-for(int i=start;i<textLength;i++){
+for(int i=start;i<=textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4679/pattern-ver1-serial/src.course.Grass.java-render.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:55:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
-if(timeToLive<0){
+if(timeToLive<=0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
-for(int i=0;i<searchLength;i++){
+for(int i=0;i<=searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4679/pattern-ver1-serial/src.course.Grass.java-render.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:55:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
-if(timeToLive<0){
+if(timeToLive<=0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
-for(int i=start;i<textIndex;i++){
+for(int i=start;i<=textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4679/pattern-ver1-serial/src.course.Grass.java-render.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:55:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
-for(int i=0;i<searchLength;i++){
+for(int i=0;i<=searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
-for(int i=0;i<searchList.length;i++){
+for(int i=0;i<=searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4679/pattern-ver1-serial/src.course.Grass.java-render.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:55:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
-for(int i=start;i<textIndex;i++){
+for(int i=start;i<=textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
-for(int i=0;i<searchLength;i++){
+for(int i=0;i<=searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4679/pattern-ver1-serial/src.course.Grass.java-render.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:55:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
-for(int i=start;i<textIndex;i++){
+for(int i=start;i<=textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
-for(int i=start;i<textLength;i++){
+for(int i=start;i<=textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4679/pattern-ver1-serial/src.course.Grass.java-render.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:55:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
-for(int i=0;i<searchLength;i++){
+for(int i=0;i<=searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
-if(textIndex==-1||tempIndex<textIndex){
+if(textIndex==-1||tempIndex<=textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4679/pattern-ver1-serial/src.course.Grass.java-render.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:56:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
+i--;
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:56:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
+i--;
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:56:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
+i--;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:56:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
+textIndex++;
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V68/5574/pattern-ver1-serial/no.ntnu.item.semesterassignment.src.no.ntnu.item.semesterassignment.taxidispatcher.TaxiDispatcher.java-getRequestQueuePosition.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:56:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
+textIndex++;
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V68/5574/pattern-ver1-serial/no.ntnu.item.semesterassignment.src.no.ntnu.item.semesterassignment.taxidispatcher.TaxiDispatcher.java-getRequestQueuePosition.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:56:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
+replaceIndex++;
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V68/5574/pattern-ver1-serial/no.ntnu.item.semesterassignment.src.no.ntnu.item.semesterassignment.taxidispatcher.TaxiDispatcher.java-getRequestQueuePosition.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:56:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
+textIndex++;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V68/5574/pattern-ver1-serial/no.ntnu.item.semesterassignment.src.no.ntnu.item.semesterassignment.taxidispatcher.TaxiDispatcher.java-getRequestQueuePosition.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:56:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
-while(textIndex!=-1){
+while(textIndex!=6){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/1679/pattern-ver1-serial/src.main.java.net.sf.cram.index.CramIndex.java-Entry.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:56:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
-if(!repeat){
+if(repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/750/pattern-ver1-serial/src.pic.simulator.pins.Rb7_4.java-clearExternally.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:56:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
-textIndex=-1;
+textIndex=10;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.SlarkDarkPact.java-SlarkDarkPact.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:56:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
-replaceIndex=-1;
+replaceIndex=10;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.SlarkDarkPact.java-SlarkDarkPact.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:56:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
-tempIndex=-1;
+tempIndex=10;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.SlarkDarkPact.java-SlarkDarkPact.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:56:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
-buf.append(replacementList[replaceIndex]);
+buf.append(replacementList[replaceIndex++]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V23/7673/pattern-ver1-serial/src.main.java.org.rapla.storage.dbrm.RemoteOperator.java-getFromId.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:57:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
-start=textIndex+searchList[replaceIndex].length();
+start=textIndex+searchList[replaceIndex++].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V23/7673/pattern-ver1-serial/src.main.java.org.rapla.storage.dbrm.RemoteOperator.java-getFromId.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:57:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
-StringBuilder buf=new StringBuilder(text.length()+increase);
+StringBuilder buf=new StringBuilder("ClientConnector{"+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/4331/pattern-ver1-serial/src.main.java.net.openhft.chronicle.map.TcpReplicator.java-toString.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:57:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
-StringBuilder buf=new StringBuilder(text.length()+increase);
+StringBuilder buf=new StringBuilder(text+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/2928/pattern-ver1-serial/src.offensive.Communicator.JsonMessage.java-toString.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:57:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
-if(timeToLive<0){
+if(timeToLive<=0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
-for(int i=0;i<searchList.length;i++){
+for(int i=0;i<=searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V37/4843/pattern-ver1-serial/src.com.jhuster.eweightscale.widget.ChartDateSelector.java-ChartDateSelector.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:57:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
-if(timeToLive<0){
+if(timeToLive<=0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
-for(int i=0;i<searchLength;i++){
+for(int i=0;i<=searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V37/4843/pattern-ver1-serial/src.com.jhuster.eweightscale.widget.ChartDateSelector.java-ChartDateSelector.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:57:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
-if(timeToLive<0){
+if(timeToLive<=0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
-for(int i=start;i<textLength;i++){
+for(int i=start;i<=textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V37/4843/pattern-ver1-serial/src.com.jhuster.eweightscale.widget.ChartDateSelector.java-ChartDateSelector.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:57:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
-for(int i=0;i<searchList.length;i++){
+for(int i=0;i<=searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
-for(int i=start;i<textIndex;i++){
+for(int i=start;i<=textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V37/4843/pattern-ver1-serial/src.com.jhuster.eweightscale.widget.ChartDateSelector.java-ChartDateSelector.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:57:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
-StringBuilder buf=new StringBuilder(text.length()+increase);
+StringBuilder buf=new StringBuilder(searchLength+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/222/pattern-ver1-serial/src.com.yuval.aiconnotation.FileSystem.java-saveObject.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:57:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
-StringBuilder buf=new StringBuilder(text.length()+increase);
+StringBuilder buf=new StringBuilder(replacementLength+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/222/pattern-ver1-serial/src.com.yuval.aiconnotation.FileSystem.java-saveObject.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:57:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
-StringBuilder buf=new StringBuilder(text.length()+increase);
+StringBuilder buf=new StringBuilder(timeToLive+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/222/pattern-ver1-serial/src.com.yuval.aiconnotation.FileSystem.java-saveObject.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:57:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
-StringBuilder buf=new StringBuilder(text.length()+increase);
+StringBuilder buf=new StringBuilder(textIndex+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/222/pattern-ver1-serial/src.com.yuval.aiconnotation.FileSystem.java-saveObject.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:57:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
-StringBuilder buf=new StringBuilder(text.length()+increase);
+StringBuilder buf=new StringBuilder(replaceIndex+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/222/pattern-ver1-serial/src.com.yuval.aiconnotation.FileSystem.java-saveObject.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:57:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
-textIndex=-1;
+textIndex=100;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.TemplarAssassinRefraction.java-TemplarAssassinRefraction.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:57:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
-replaceIndex=-1;
+replaceIndex=100;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.TemplarAssassinRefraction.java-TemplarAssassinRefraction.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:57:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
-tempIndex=-1;
+tempIndex=100;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.TemplarAssassinRefraction.java-TemplarAssassinRefraction.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:57:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
-if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
+if(text==null&&text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
-if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+if(noMoreMatchesForReplIndex[i]&&searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/3665/pattern-ver1-serial/org.bridgedb.uri.ws.server.src.org.bridgedb.ws.uri.WSUriInterfaceService.java-map.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:57:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
-if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
+if(text==null&&text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
-if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+if(noMoreMatchesForReplIndex[i]&&searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/3665/pattern-ver1-serial/org.bridgedb.uri.ws.server.src.org.bridgedb.ws.uri.WSUriInterfaceService.java-map.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:57:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
-if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
+if(text==null||text.length()==0||searchList==null&&searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
-if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+if(noMoreMatchesForReplIndex[i]&&searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/3665/pattern-ver1-serial/org.bridgedb.uri.ws.server.src.org.bridgedb.ws.uri.WSUriInterfaceService.java-map.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:57:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
-if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
+if(text==null||text.length()==0||searchList==null&&searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
-if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+if(noMoreMatchesForReplIndex[i]&&searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/3665/pattern-ver1-serial/org.bridgedb.uri.ws.server.src.org.bridgedb.ws.uri.WSUriInterfaceService.java-map.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:57:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
+synchronized(buf){
 buf.append(text.charAt(i));
+}
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V17/90/pattern-ver1-serial/PolibudaRun.src.HorizontalMove.java-down.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:57:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
+synchronized(buf){
 buf.append(text.charAt(i));
+}
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V17/90/pattern-ver1-serial/PolibudaRun.src.HorizontalMove.java-down.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:58:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
+synchronized(buf){
 buf.append(replacementList[replaceIndex]);
+}
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V17/90/pattern-ver1-serial/PolibudaRun.src.HorizontalMove.java-down.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:58:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
-buf.append(text.charAt(i));
+buf.append(text.charAt((int)(i)));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:58:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
-buf.append(text.charAt(i));
+buf.append(text.charAt((int)(i)));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:58:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
-if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
+if(text==null&&text.length()==0&&searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V16/4407/pattern-ver1-serial/app.src.main.java.com.coderockets.referandumproject.util.adapter.MyFavoritesAdapter.java-bind.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:58:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
-if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
+if(text==null||text.length()==0||searchList==null&&searchList.length==0&&replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V16/4407/pattern-ver1-serial/app.src.main.java.com.coderockets.referandumproject.util.adapter.MyFavoritesAdapter.java-bind.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:58:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
-return result;
+return result.toLowerCase();
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/301/pattern-ver1-serial/DODO.src.Parser.Parser.java-getUserCommand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:58:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
-return text;
+return text.toLowerCase();
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/301/pattern-ver1-serial/DODO.src.Parser.Parser.java-getUserCommand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:58:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
-return text;
+return text.toLowerCase();
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/301/pattern-ver1-serial/DODO.src.Parser.Parser.java-getUserCommand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:58:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
-tempIndex=text.indexOf(searchList[i]);
+tempIndex=text.indexOf((searchList[i]).toLowerCase());
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:58:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
-buf.append(replacementList[replaceIndex]);
+buf.append((replacementList[replaceIndex]).toLowerCase());
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:58:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
-for(int i=0;i<searchLength;i++){
+for(int i=0;i<1;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
-for(int i=0;i<searchLength;i++){
+for(int i=0;i<1;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6177/pattern-ver1-serial/src.Hapi.SQLMethods.Methods.java-setCustomerDiscount.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:58:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
-if(textIndex==-1||tempIndex<textIndex){
+if(textIndex==-1||tempIndex<1){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
-for(int i=start;i<textIndex;i++){
+for(int i=start;i<1;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6177/pattern-ver1-serial/src.Hapi.SQLMethods.Methods.java-setCustomerDiscount.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:58:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
-for(int i=start;i<textIndex;i++){
+for(int i=start;i<1;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
-if(textIndex==-1||tempIndex<textIndex){
+if(textIndex==-1||tempIndex<1){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6177/pattern-ver1-serial/src.Hapi.SQLMethods.Methods.java-setCustomerDiscount.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:58:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
-if(textIndex==-1||tempIndex<textIndex){
+if(textIndex==-1||tempIndex<1){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
-if(textIndex==-1||tempIndex<textIndex){
+if(textIndex==-1||tempIndex<1){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6177/pattern-ver1-serial/src.Hapi.SQLMethods.Methods.java-setCustomerDiscount.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:58:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
+import java.nio.charset.Charset;
+
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
-for(int i=0;i<searchLength;i++){
+for(int i=0;i<searchLength;i++,Charset.forName("UTF-8")){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3733/pattern-ver1-serial/Code.Part1.src.core.Intraprocedural.java-callgraph.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:58:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
+import java.nio.charset.Charset;
+
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
-for(int i=0;i<searchList.length;i++){
+for(int i=0;i<searchList.length;i++,Charset.forName("UTF-8")){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3733/pattern-ver1-serial/Code.Part1.src.core.Intraprocedural.java-callgraph.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:58:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
+import java.nio.charset.Charset;
+
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
-for(int i=start;i<textIndex;i++){
+for(int i=start;i<textIndex;i++,Charset.forName("UTF-8")){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3733/pattern-ver1-serial/Code.Part1.src.core.Intraprocedural.java-callgraph.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:58:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
+if(buf!=null){
 buf.append(replacementList[replaceIndex]);
+}
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6555/pattern-ver1-serial/app.src.main.java.com.example.uaharoni.tourdeplace.view.MapFragment.java-addPlaceMarker.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:58:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
+if(buf!=null){
 buf.append(text.charAt(i));
+}
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V27/6565/pattern-ver1-serial/MarioAI.src.ch.idsia.agents.controllers.AdvancedMarioAIAgent.java-getAction.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:58:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
+if(buf!=null){
 buf.append(text.charAt(i));
+}
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V27/6565/pattern-ver1-serial/MarioAI.src.ch.idsia.agents.controllers.AdvancedMarioAIAgent.java-getAction.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:58:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+continue;
+}
+if(searchList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V29/816/pattern-ver1-serial/src.main.java.com.dynious.refinedrelocation.client.renderer.RendererRelocator.java-renderTileEntityAt.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:58:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
+if(text.indexOf(searchList[i])!=0){
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
+}
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7542/pattern-ver1-serial/gde-backend.src.main.java.com.nagarro.gde.persistence.model.UserSpecialization.java-populateAreaOfSpecialization.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:58:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
+if(text.indexOf(searchList[i],start)!=0){
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
+}
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7542/pattern-ver1-serial/gde-backend.src.main.java.com.nagarro.gde.persistence.model.UserSpecialization.java-populateAreaOfSpecialization.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:59:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
+if(textIndex+searchList[replaceIndex].length()!=0){
 start=textIndex+searchList[replaceIndex].length();
+}
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7542/pattern-ver1-serial/gde-backend.src.main.java.com.nagarro.gde.persistence.model.UserSpecialization.java-populateAreaOfSpecialization.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:59:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
+if(tempIndex!=0){
 textIndex=tempIndex;
+}
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7542/pattern-ver1-serial/gde-backend.src.main.java.com.nagarro.gde.persistence.model.UserSpecialization.java-populateAreaOfSpecialization.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:59:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
+if(text.charAt(i)>0){
 buf.append(text.charAt(i));
+}
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/1583/pattern-ver1-serial/core.src.main.java.tachyon.client.CountingWritableBlockChannel.java-write.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:59:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
+if(text.charAt(i)>0){
 buf.append(text.charAt(i));
+}
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/1583/pattern-ver1-serial/core.src.main.java.tachyon.client.CountingWritableBlockChannel.java-write.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:59:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
-increase=Math.min(increase,text.length()/5);
+increase=Math.min(30-(increase),text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/1792/pattern-ver1-serial/rangebar.src.com.appyvet.rangebar.RangeBar.java-onAnimationUpdate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:59:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
-tempIndex=text.indexOf(searchList[i],start);
+tempIndex=text.indexOf(searchList[i],30-(start));
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/1792/pattern-ver1-serial/rangebar.src.com.appyvet.rangebar.RangeBar.java-onAnimationUpdate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:59:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
-int replacementLength=replacementList.length;
+ final int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
-StringBuilder buf=new StringBuilder(text.length()+increase);
+ final StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
-int textLength=text.length();
+ final int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3285/pattern-ver1-serial/project.core.src.se.computerscience.kelde.model.entities.EntityBat.java-getHeading.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:59:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
-int searchLength=searchList.length;
+ final int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
-int greater=replacementList[i].length()-searchList[i].length();
+ final int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
-int textLength=text.length();
+ final int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3285/pattern-ver1-serial/project.core.src.se.computerscience.kelde.model.entities.EntityBat.java-getHeading.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:59:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
-int searchLength=searchList.length;
-int replacementLength=replacementList.length;
+ final int searchLength=searchList.length;
+ final int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
-int textLength=text.length();
+ final int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3285/pattern-ver1-serial/project.core.src.se.computerscience.kelde.model.entities.EntityBat.java-getHeading.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:59:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
-int replacementLength=replacementList.length;
+ final int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
-int greater=replacementList[i].length()-searchList[i].length();
+ final int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
-int textLength=text.length();
+ final int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3285/pattern-ver1-serial/project.core.src.se.computerscience.kelde.model.entities.EntityBat.java-getHeading.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:59:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
-int replacementLength=replacementList.length;
+ final int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
-StringBuilder buf=new StringBuilder(text.length()+increase);
+ final StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
-String result=buf.toString();
+ final String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6059/pattern-ver1-serial/src.main.java.com.bandwidth.sdk.model.Conference.java-getMembers.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:59:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
-boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
+ final boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
-StringBuilder buf=new StringBuilder(text.length()+increase);
+ final StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
-String result=buf.toString();
+ final String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6059/pattern-ver1-serial/src.main.java.com.bandwidth.sdk.model.Conference.java-getMembers.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:59:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
-boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
+ final boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
-StringBuilder buf=new StringBuilder(text.length()+increase);
+ final StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
-int textLength=text.length();
+ final int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6059/pattern-ver1-serial/src.main.java.com.bandwidth.sdk.model.Conference.java-getMembers.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:59:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
-StringBuilder buf=new StringBuilder(text.length()+increase);
+ final StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
-int textLength=text.length();
+ final int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
-String result=buf.toString();
+ final String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6059/pattern-ver1-serial/src.main.java.com.bandwidth.sdk.model.Conference.java-getMembers.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:59:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
-buf.append(replacementList[replaceIndex]);
+buf.append(replacementList[replaceIndex-1]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V20/1847/pattern-ver1-serial/33_CDIO3.src.boundary.GUIHandler.java-askPlayerBuyField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:59:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
-start=textIndex+searchList[replaceIndex].length();
+start=textIndex+searchList[replaceIndex-1].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V20/1847/pattern-ver1-serial/33_CDIO3.src.boundary.GUIHandler.java-askPlayerBuyField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:59:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
+buf.append("]");
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/2811/pattern-ver1-serial/src.main.java.no.anderska.wta.engines.MinesweeperEngine.java-generateBoard.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:59:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
+buf.append("]");
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/2811/pattern-ver1-serial/src.main.java.no.anderska.wta.engines.MinesweeperEngine.java-generateBoard.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:59:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
-int searchLength=searchList.length;
+ @SuppressWarnings("UnusedAssignment") int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
-int greater=replacementList[i].length()-searchList[i].length();
+ @SuppressWarnings("UnusedAssignment") int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
-int textLength=text.length();
+ @SuppressWarnings("UnusedAssignment") int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:59:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
-int searchLength=searchList.length;
+ @SuppressWarnings("UnusedAssignment") int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
-StringBuilder buf=new StringBuilder(text.length()+increase);
+ @SuppressWarnings("UnusedAssignment") StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
-int textLength=text.length();
+ @SuppressWarnings("UnusedAssignment") int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:59:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
-int replacementLength=replacementList.length;
+ @SuppressWarnings("UnusedAssignment") int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
-int greater=replacementList[i].length()-searchList[i].length();
+ @SuppressWarnings("UnusedAssignment") int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
-int textLength=text.length();
+ @SuppressWarnings("UnusedAssignment") int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:59:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
-int replacementLength=replacementList.length;
+ @SuppressWarnings("UnusedAssignment") int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
-StringBuilder buf=new StringBuilder(text.length()+increase);
+ @SuppressWarnings("UnusedAssignment") StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
-int textLength=text.length();
+ @SuppressWarnings("UnusedAssignment") int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 02:59:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
-int searchLength=searchList.length;
-int replacementLength=replacementList.length;
+ @SuppressWarnings("UnusedAssignment") int searchLength=searchList.length;
+ @SuppressWarnings("UnusedAssignment") int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
-int textLength=text.length();
+ @SuppressWarnings("UnusedAssignment") int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:00:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
-int searchLength=searchList.length;
+ @SuppressWarnings("UnusedAssignment") int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
-int start=0;
+ @SuppressWarnings("UnusedAssignment") int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
-int textLength=text.length();
+ @SuppressWarnings("UnusedAssignment") int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:00:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
-int searchLength=searchList.length;
+ @SuppressWarnings("UnusedAssignment") int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
-int increase=0;
+ @SuppressWarnings("UnusedAssignment") int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
-int textLength=text.length();
+ @SuppressWarnings("UnusedAssignment") int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:00:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
-StringBuilder buf=new StringBuilder(text.length()+increase);
+StringBuilder buf=new StringBuilder(text.length()+1+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2703/pattern-ver1-serial/src.main.java.net.minecraftforge.common.interpreter.AST.java-apply.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:00:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
-start=textIndex+searchList[replaceIndex].length();
+start=textIndex+1+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2703/pattern-ver1-serial/src.main.java.net.minecraftforge.common.interpreter.AST.java-apply.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:00:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
-if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
+if(text==null||text.length()==0||searchList==null||searchList.length+timeToLive==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:00:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
-boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
+ final boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
-int textLength=text.length();
+ final int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
-String result=buf.toString();
+ final String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V18/5586/pattern-ver1-serial/querqy-core.src.main.java.querqy.CompoundCharSequence.java-subSequence.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:00:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
-int replacementLength=replacementList.length;
+ final int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
-boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
+ final boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
-String result=buf.toString();
+ final String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V18/5586/pattern-ver1-serial/querqy-core.src.main.java.querqy.CompoundCharSequence.java-subSequence.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:00:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
-int replacementLength=replacementList.length;
+ final int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
-boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
+ final boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
-int textLength=text.length();
+ final int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V18/5586/pattern-ver1-serial/querqy-core.src.main.java.querqy.CompoundCharSequence.java-subSequence.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:00:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+continue;
+}
+if(i==4){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5508/pattern-ver1-serial/common.enhancedportals.item.ItemPortalModifierUpgrade.java-getSubItems.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:00:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
+if(i==4){
+continue;
+}
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5508/pattern-ver1-serial/common.enhancedportals.item.ItemPortalModifierUpgrade.java-getSubItems.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:00:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
+if(i==4){
+continue;
+}
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5508/pattern-ver1-serial/common.enhancedportals.item.ItemPortalModifierUpgrade.java-getSubItems.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:00:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
+if(i==4){
+continue;
+}
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5508/pattern-ver1-serial/common.enhancedportals.item.ItemPortalModifierUpgrade.java-getSubItems.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:00:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+continue;
+}
+if(i==4){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5508/pattern-ver1-serial/common.enhancedportals.item.ItemPortalModifierUpgrade.java-getSubItems.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:00:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
+if(!text.isEmpty()){
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
+}
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/1755/pattern-ver1-serial/src.main.java.com.salesforce.phoenix.compile.StatementContext.java-StatementContext.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:00:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
+if(!text.isEmpty()){
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
+}
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/1755/pattern-ver1-serial/src.main.java.com.salesforce.phoenix.compile.StatementContext.java-StatementContext.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:00:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
+greater=1000;
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V4/3726/pattern-ver1-serial/WeatherService.src.weatherservice.StatisticsCalculator.java-MinWindSpeed.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:00:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
+tempIndex=1000;
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V4/3726/pattern-ver1-serial/WeatherService.src.weatherservice.StatisticsCalculator.java-MinWindSpeed.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:00:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
-if(timeToLive<0){
+if(true){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:00:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
-if(searchLength!=replacementLength){
+if(true){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:00:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
-if(greater>0){
+if(true){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:00:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
-int greater=replacementList[i].length()-searchList[i].length();
+int greater=replacementList[i].length()-2;
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/1120/pattern-ver1-serial/src.main.java.com.pratilipi.data.util.PratilipiDataUtil.java-updatePratilipiStats.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:00:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
-buf.append(text.charAt(i));
+buf.append("https://myschool.ru.is/myschool/"+text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V56/3824/pattern-ver1-serial/MyRU.src.com.littleindian.myru.AssignmentDetailFragment.java-onCreateView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:01:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
-buf.append(text.charAt(i));
+buf.append("https://myschool.ru.is/myschool/"+text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V56/3824/pattern-ver1-serial/MyRU.src.com.littleindian.myru.AssignmentDetailFragment.java-onCreateView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:01:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
+if(replacementList[replaceIndex]!=null){
 buf.append(replacementList[replaceIndex]);
+}
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/2525/pattern-ver1-serial/UnivMobile.src.org.unpidf.univmobile.ui.fragments.GeoCampusFragment.java-addNewPoi.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:01:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
-int replacementLength=replacementList.length;
+ final int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
-int greater=replacementList[i].length()-searchList[i].length();
+ final int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
-StringBuilder buf=new StringBuilder(text.length()+increase);
+ final StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V37/6206/pattern-ver1-serial/ColFusionServerBLL.src.main.java.edu.pitt.sis.exp.colfusion.bll.BasicTableBL.java-getAttachmentList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:01:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
-int replacementLength=replacementList.length;
+ final int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
-boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
+ final boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
-StringBuilder buf=new StringBuilder(text.length()+increase);
+ final StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V37/6206/pattern-ver1-serial/ColFusionServerBLL.src.main.java.edu.pitt.sis.exp.colfusion.bll.BasicTableBL.java-getAttachmentList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:01:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
-textIndex=tempIndex;
+textIndex=0xEfffffff&(tempIndex);
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/1711/pattern-ver1-serial/src.main.java.com.ociweb.pronghorn.ring.RingWriter.java-writeBytes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:01:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
-replaceIndex=i;
+replaceIndex=0xEfffffff&(i);
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/1711/pattern-ver1-serial/src.main.java.com.ociweb.pronghorn.ring.RingWriter.java-writeBytes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:01:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
-textIndex=-1;
+textIndex=0xEfffffff&(-1);
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/1711/pattern-ver1-serial/src.main.java.com.ociweb.pronghorn.ring.RingWriter.java-writeBytes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:01:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
-replaceIndex=-1;
+replaceIndex=0xEfffffff&(-1);
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/1711/pattern-ver1-serial/src.main.java.com.ociweb.pronghorn.ring.RingWriter.java-writeBytes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:01:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
-tempIndex=-1;
+tempIndex=0xEfffffff&(-1);
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/1711/pattern-ver1-serial/src.main.java.com.ociweb.pronghorn.ring.RingWriter.java-writeBytes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:01:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
-textIndex=tempIndex;
+textIndex=0xEfffffff&(tempIndex);
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/1711/pattern-ver1-serial/src.main.java.com.ociweb.pronghorn.ring.RingWriter.java-writeBytes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:01:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
-replaceIndex=i;
+replaceIndex=0xEfffffff&(i);
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/1711/pattern-ver1-serial/src.main.java.com.ociweb.pronghorn.ring.RingWriter.java-writeBytes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:01:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
-buf.append(text.charAt(i));
+buf.append(text.charAt(i)+" votes");
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2342/pattern-ver1-serial/app.src.main.java.com.example.abhishek.bookshareapp.ui.adapter.BooksAdapter.java-onBindViewHolder.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:01:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
-buf.append(text.charAt(i));
+buf.append(text.charAt(i)+" votes");
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2342/pattern-ver1-serial/app.src.main.java.com.example.abhishek.bookshareapp.ui.adapter.BooksAdapter.java-onBindViewHolder.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:01:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
-if(greater>0){
+if(greater>0/2){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/7651/pattern-ver1-serial/src.net.vicp.lylab.utils.cache.CacheContainer.java-exec.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:01:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
-buf.append(text.charAt(i));
+buf.append(text.charAt(i)-1);
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V16/4594/pattern-ver1-serial/EzSignin.app.src.main.java.signin.ez.ezsignin.MainActivity.java-populateFieldsWithRecord.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:01:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
-buf.append(text.charAt(i));
+buf.append(text.charAt(i)-1);
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V16/4594/pattern-ver1-serial/EzSignin.app.src.main.java.signin.ez.ezsignin.MainActivity.java-populateFieldsWithRecord.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:01:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
+int a=0;
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:01:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
+int a=0;
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:01:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
+int a=0;
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:01:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
+int a=0;
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:01:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
+int a=0;
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:01:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+int a=0;
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:01:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
+int a=0;
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:01:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
+int a=0;
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:01:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
+int a=0;
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:02:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
+int a=0;
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:02:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
-buf.append(text.charAt(i));
+buf.append("There was a problem with the call to ManyWho: "+text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V18/1227/pattern-ver1-serial/sdk-core.src.main.java.com.manywho.sdk.RunService.java-executePost.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:02:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
-buf.append(text.charAt(i));
+buf.append("There was a problem with the call to ManyWho: "+text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V18/1227/pattern-ver1-serial/sdk-core.src.main.java.com.manywho.sdk.RunService.java-executePost.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:02:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
+if(greater==0.0){
+continue;
+}
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V32/4118/pattern-ver1-serial/src.behavior.irl.TabularIRL.java-getBehaviorLogProbabilityHelper.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:02:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
+if(start==0.0){
+continue;
+}
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V32/4118/pattern-ver1-serial/src.behavior.irl.TabularIRL.java-getBehaviorLogProbabilityHelper.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:02:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
+if(tempIndex==0.0){
+continue;
+}
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V32/4118/pattern-ver1-serial/src.behavior.irl.TabularIRL.java-getBehaviorLogProbabilityHelper.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:02:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
+String OUTSTRING="";
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:02:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
+String OUTSTRING="";
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:02:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
+String OUTSTRING="";
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:02:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
+String OUTSTRING="";
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:02:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
+String OUTSTRING="";
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:02:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
+String OUTSTRING="";
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:02:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
+String OUTSTRING="";
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:02:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
+String OUTSTRING="";
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:02:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
+String OUTSTRING="";
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:02:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+String OUTSTRING="";
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:02:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
-if(textIndex==-1||tempIndex<textIndex){
+if(textIndex!=0||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/5558/pattern-ver1-serial/app.src.main.java.in.attreya.dailylist.MainActivity.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:02:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
-if(textIndex==-1){
+if(textIndex!=0){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/5558/pattern-ver1-serial/app.src.main.java.in.attreya.dailylist.MainActivity.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:02:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
-if(tempIndex==-1){
+if(tempIndex!=0){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/5558/pattern-ver1-serial/app.src.main.java.in.attreya.dailylist.MainActivity.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:02:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
-if(tempIndex==-1){
+if(tempIndex!=0){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/5558/pattern-ver1-serial/app.src.main.java.in.attreya.dailylist.MainActivity.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:02:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
-if(textIndex==-1||tempIndex<textIndex){
+if(textIndex!=0||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/5558/pattern-ver1-serial/app.src.main.java.in.attreya.dailylist.MainActivity.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:02:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
-buf.append(text.charAt(i));
+buf.append(text.charAt(i)*1000);
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/3175/pattern-ver1-serial/src.de.fuberlin.wiwiss.d2rq.server.D2RServer.java-describe.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:02:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
-buf.append(text.charAt(i));
+buf.append(text.charAt(i)*1000);
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/3175/pattern-ver1-serial/src.de.fuberlin.wiwiss.d2rq.server.D2RServer.java-describe.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:03:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
+if(text.isEmpty()){
+return null;
+}
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5856/pattern-ver1-serial/src.main.java.io.aif.associations.builder.ExperimentsConnectionsGraphReducer.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:03:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
+if(text.isEmpty()){
+return null;
+}
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5856/pattern-ver1-serial/src.main.java.io.aif.associations.builder.ExperimentsConnectionsGraphReducer.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:03:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
+if(text.isEmpty()){
+return null;
+}
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5856/pattern-ver1-serial/src.main.java.io.aif.associations.builder.ExperimentsConnectionsGraphReducer.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:03:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
+if(text.isEmpty()){
+return null;
+}
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5856/pattern-ver1-serial/src.main.java.io.aif.associations.builder.ExperimentsConnectionsGraphReducer.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:03:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
-for(int i=0;i<searchLength;i++){
+for(int i=0;i<searchLength;){
+i++;
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V22/7304/pattern-ver1-serial/vipr-portal.com.iwave.isa.content.src.java.com.emc.sa.service.vipr.file.tasks.IngestUnmanagedFilesystems.java-ingestInChunks.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:03:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
-for(int i=0;i<searchLength;i++){
+for(int i=0;i<searchLength;){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
+i++;
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V22/7304/pattern-ver1-serial/vipr-portal.com.iwave.isa.content.src.java.com.emc.sa.service.vipr.file.tasks.IngestUnmanagedFilesystems.java-ingestInChunks.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:03:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
-for(int i=0;i<searchLength;i++){
+for(int i=0;i<searchLength;){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
+i++;
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V22/7304/pattern-ver1-serial/vipr-portal.com.iwave.isa.content.src.java.com.emc.sa.service.vipr.file.tasks.IngestUnmanagedFilesystems.java-ingestInChunks.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:03:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
-for(int i=0;i<searchLength;i++){
+for(int i=0;i<searchLength;){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
+i++;
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V22/7304/pattern-ver1-serial/vipr-portal.com.iwave.isa.content.src.java.com.emc.sa.service.vipr.file.tasks.IngestUnmanagedFilesystems.java-ingestInChunks.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:05:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
-for(int i=0;i<searchList.length;i++){
+for(int i=0;i<searchList.length;){
+i++;
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V22/7304/pattern-ver1-serial/vipr-portal.com.iwave.isa.content.src.java.com.emc.sa.service.vipr.file.tasks.IngestUnmanagedFilesystems.java-ingestInChunks.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:05:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
-for(int i=start;i<textIndex;i++){
+for(int i=start;i<textIndex;){
+i++;
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V22/7304/pattern-ver1-serial/vipr-portal.com.iwave.isa.content.src.java.com.emc.sa.service.vipr.file.tasks.IngestUnmanagedFilesystems.java-ingestInChunks.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:05:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
-buf.append(text.charAt(i));
+buf.append((int)(text.charAt(i)));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:05:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
-buf.append(text.charAt(i));
+buf.append((int)(text.charAt(i)));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:05:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
-StringBuilder buf=new StringBuilder(text.length()+increase);
+StringBuilder buf=new StringBuilder("["+text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/5078/pattern-ver1-serial/benchmark.org.imdea.benchmark.rubis.RUBiSBenchmark.java-run.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:05:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
-int greater=replacementList[i].length()-searchList[i].length();
+int greater=replacementList[i].length()-4;
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V36/4905/pattern-ver1-serial/app_android.src.com.projectkaiser.app_android.MainActivity.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:05:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
-increase=Math.min(increase,text.length()/5);
+increase=Math.min(Math.round(increase),text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V16/7706/pattern-ver1-serial/pixi.src.main.java.org.openpixi.pixi.diagnostics.methods.ProjectedEnergyDensity.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
-tempIndex=text.indexOf(searchList[i],start);
+tempIndex=text.indexOf(searchList[i],Math.round(start));
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V16/7706/pattern-ver1-serial/pixi.src.main.java.org.openpixi.pixi.diagnostics.methods.ProjectedEnergyDensity.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:05:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
+if(text==null){
+return "";
+}
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:05:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
+if(text==null){
+return "";
+}
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:05:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
+if(text==null){
+return "";
+}
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:05:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
+if(text==null){
+return "";
+}
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:05:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
+if(text==null){
+return "";
+}
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:05:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
+if(text==null){
+return "";
+}
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:05:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
+if(searchList==null){
+return "";
+}
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:05:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
+if(replacementList==null){
+return "";
+}
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:06:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
+if(searchList==null){
+return "";
+}
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:06:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
+if(replacementList==null){
+return "";
+}
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:06:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
+if(text==null){
+return null;
+}
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:06:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
+if(text==null){
+return null;
+}
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:06:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
+if(text==null){
+return null;
+}
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:06:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
+if(searchList==null){
+return null;
+}
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:06:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
+if(searchList==null){
+return null;
+}
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:06:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
+if(text==null){
+return null;
+}
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:06:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
+if(text==null){
+return null;
+}
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:06:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
+if(text==null){
+return null;
+}
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:06:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
+if(text==null){
+return null;
+}
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:06:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
+if(text==null){
+return null;
+}
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:06:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
+if(buf==null){
+return null;
+}
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:06:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
+}
+if(text==null){
+return null;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:06:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
+if(text==null){
+return null;
+}
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:06:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
+}
 }
+if(text==null){
+return null;
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:06:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
+if(text==null){
+return null;
+}
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:06:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
+if(text==null){
+return null;
+}
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:06:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
+if(text==null){
+return null;
+}
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:06:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
-tempIndex=text.indexOf(searchList[i]);
+tempIndex=1;
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:06:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
-tempIndex=text.indexOf(searchList[i]);
+tempIndex=-1;
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:06:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
+if(replacementList==null){
+return null;
+}
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:07:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
+}
+if(searchList==null){
+return null;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V45/2972/pattern-ver1-serial/app.src.main.java.com.nealyi.app.activity.UserProfileActivity.java-onActivityResult.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:07:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
-tempIndex=text.indexOf(searchList[i]);
+tempIndex=0;
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/1097/pattern-ver1-serial/plugins.de.ovgu.featureide.core.mpl.src.de.ovgu.featureide.core.mpl.signature.javadoc.AJavaDocCommentMerger.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:07:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
+if(text==null){
+return null;
+}
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V22/4743/pattern-ver1-serial/app.src.main.java.com.wafflestudio.shafe.MapManager.java-initializeMapWithSavedValue.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:07:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
+}
+if(text==null){
+return null;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V22/4743/pattern-ver1-serial/app.src.main.java.com.wafflestudio.shafe.MapManager.java-initializeMapWithSavedValue.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:07:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
+}
+if("&null".equals(text)){
+return null;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:07:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
+}
+if("&null".equals(text)){
+return null;
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:07:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
+}
+if("&null".equals(searchList)){
+return null;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:07:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
+}
+if("&null".equals(replacementList)){
+return null;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:07:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
+}
+if("&null".equals(searchList)){
+return null;
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:07:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
+}
+if("&null".equals(replacementList)){
+return null;
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:07:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
+}
+if("&null".equals(searchLength)){
+return null;
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:07:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
+if(searchList[i]==null){
+return null;
+}
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2437/pattern-ver1-serial/app.src.main.java.org.gdg.frisbee.android.onboarding.FirstStartStep1Fragment.java-addChapters.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:07:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
-increase=Math.min(increase,text.length()/5);
+increase=Math.min(increase,30-(text.length()/5));
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/1792/pattern-ver1-serial/rangebar.src.com.appyvet.rangebar.RangeBar.java-onAnimationUpdate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:07:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
-if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
+if(text==null||text.isEmpty()||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V13/2794/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.plugins.VNXeCommunicationInterface.java-discoverIscsiPorts.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:07:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
-tempIndex=text.indexOf(searchList[i]);
+tempIndex=2;
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:07:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
-if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+if(noMoreMatchesForReplIndex[i]||searchList[i].equals(null)||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/5953/pattern-ver1-serial/src.main.java.org.corfudb.runtime.TXRuntime.java-readsSomethingWrittenBy.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:07:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
-if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+if(noMoreMatchesForReplIndex[i]||searchList[i].equals(null)||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/5953/pattern-ver1-serial/src.main.java.org.corfudb.runtime.TXRuntime.java-readsSomethingWrittenBy.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:07:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
-tempIndex=text.indexOf(searchList[i]);
+tempIndex=3;
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:07:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
+replaceIndex=i;
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1794/pattern-ver1-serial/src.com.olympicat.scheduleupdates.DataFactory.java-loadData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:07:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
+textIndex=tempIndex;
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1794/pattern-ver1-serial/src.com.olympicat.scheduleupdates.DataFactory.java-loadData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:07:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
-replaceIndex=i;
 }
 }
+replaceIndex=i;
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1794/pattern-ver1-serial/src.com.olympicat.scheduleupdates.DataFactory.java-loadData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:07:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
-textIndex=tempIndex;
 replaceIndex=i;
 }
 }
+textIndex=tempIndex;
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1794/pattern-ver1-serial/src.com.olympicat.scheduleupdates.DataFactory.java-loadData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:07:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
-replaceIndex=i;
 }
+replaceIndex=i;
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1794/pattern-ver1-serial/src.com.olympicat.scheduleupdates.DataFactory.java-loadData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:08:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
-textIndex=tempIndex;
 replaceIndex=i;
 }
+textIndex=tempIndex;
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1794/pattern-ver1-serial/src.com.olympicat.scheduleupdates.DataFactory.java-loadData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:08:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
+textIndex=tempIndex;
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1794/pattern-ver1-serial/src.com.olympicat.scheduleupdates.DataFactory.java-loadData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:08:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
-StringBuilder buf=new StringBuilder(text.length()+increase);
+StringBuilder buf=new StringBuilder(text.length()+increase-1);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/250/pattern-ver1-serial/src.main.java.com.scienjus.client.PixivParserClient.java-buildGetUrl.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:08:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
+replaceIndex=i;
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
-replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/5647/pattern-ver1-serial/src.worms.model.statements.Print.java-executeStatement.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:08:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
+replaceIndex=i;
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/5647/pattern-ver1-serial/src.worms.model.statements.Print.java-executeStatement.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:08:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
+textIndex=tempIndex;
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
-textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/5647/pattern-ver1-serial/src.worms.model.statements.Print.java-executeStatement.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
+textIndex=tempIndex;
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/5647/pattern-ver1-serial/src.worms.model.statements.Print.java-executeStatement.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:08:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
-if(tempIndex==-1){
+if(true){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:08:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
-if(tempIndex==-1){
+if(true){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:08:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
-if(textIndex==-1){
+if(true){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:08:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
+if(!replacementList[replaceIndex].equals("")){
 buf.append(replacementList[replaceIndex]);
+}
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V1/60/pattern-ver1-serial/app.src.main.java.com.holygon.dishcuss.Fragments.AccountPhotosFragment.java-SetImageURL.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:08:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
+replaceIndex=i;
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/2094/pattern-ver1-serial/src.main.java.com.dagobert_engine.core.service.UpdateService.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:08:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
-tempIndex=text.indexOf(searchList[i]);
+tempIndex=text.indexOf(searchList[i])*timeToLive;
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:08:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
-tempIndex=text.indexOf(searchList[i]);
+tempIndex=text.indexOf(searchList[i])*searchLength;
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:08:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
-tempIndex=text.indexOf(searchList[i]);
+tempIndex=text.indexOf(searchList[i])*replacementLength;
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:08:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
-tempIndex=text.indexOf(searchList[i]);
+tempIndex=text.indexOf(searchList[i])*textIndex;
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:08:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
-tempIndex=text.indexOf(searchList[i]);
+tempIndex=text.indexOf(searchList[i])*replaceIndex;
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:08:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
+}
+if(timeToLive<0){
+return null;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:08:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
-StringBuilder buf=new StringBuilder(text.length()+increase);
+StringBuilder buf=new StringBuilder("https://myschool.ru.is/myschool/"+text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V56/3824/pattern-ver1-serial/MyRU.src.com.littleindian.myru.AssignmentDetailFragment.java-onCreateView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:08:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
-tempIndex=text.indexOf(searchList[i]);
+tempIndex=timeToLive;
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:08:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
-tempIndex=text.indexOf(searchList[i]);
+tempIndex=searchLength;
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:09:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
-tempIndex=text.indexOf(searchList[i]);
+tempIndex=replacementLength;
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:09:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
-tempIndex=text.indexOf(searchList[i]);
+tempIndex=textIndex;
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:09:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
-tempIndex=text.indexOf(searchList[i]);
+tempIndex=replaceIndex;
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:09:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
-if(timeToLive<0){
+if(timeToLive<0||timeToLive==Long.MIN_VALUE){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:09:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
-if(searchLength!=replacementLength){
+if(searchLength!=replacementLength||searchLength==Long.MIN_VALUE){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:09:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
-if(textIndex==-1){
+if(textIndex==-1||textIndex==Long.MIN_VALUE){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:09:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
-if(tempIndex==-1){
+if(tempIndex==-1||tempIndex==Long.MIN_VALUE){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:09:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
-if(greater>0){
+if(greater>0||greater==Long.MIN_VALUE){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:09:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
-if(tempIndex==-1){
+if(tempIndex==-1||tempIndex==Long.MIN_VALUE){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:09:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
+replaceIndex=i;
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:09:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
+textIndex=tempIndex;
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:09:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
+textIndex=tempIndex;
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
-textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:09:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
-tempIndex=text.indexOf(searchList[i]);
+tempIndex=0xEfffffff&(text.indexOf(searchList[i]));
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/1711/pattern-ver1-serial/src.main.java.com.ociweb.pronghorn.ring.RingWriter.java-writeBytes.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:09:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
-StringBuilder buf=new StringBuilder(text.length()+increase);
+StringBuilder buf=new StringBuilder(text.length()+increase+" votes");
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2342/pattern-ver1-serial/app.src.main.java.com.example.abhishek.bookshareapp.ui.adapter.BooksAdapter.java-onBindViewHolder.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:09:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
-throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
+throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text.replaceAll("[^\\w\\s]",""));
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/547/pattern-ver1-serial/src.main.java.com.driver.locator.pageobject.PageObjectGenerator.java-formatWebElement.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:09:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
-throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
+throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text.replace("TimeToLive of "+timeToLive+" is less than 0: ",""));
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V27/2038/pattern-ver1-serial/LabPal.app.src.main.java.danandzach.labpal.LabCalculations.java-setErrorDisplay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:09:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
-tempIndex=text.indexOf(searchList[i]);
+tempIndex=10;
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.SlarkDarkPact.java-SlarkDarkPact.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:09:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
-StringBuilder buf=new StringBuilder(text.length()+increase);
+StringBuilder buf=new StringBuilder("There was a problem with the call to ManyWho: "+text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V18/1227/pattern-ver1-serial/sdk-core.src.main.java.com.manywho.sdk.RunService.java-executePost.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:09:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
-buf.append(text.charAt(i));
+buf.append(text.charAt(i)*-1);
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1084/pattern-ver1-serial/Bank.src.entities.Account.java-returnLoan.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:09:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
-buf.append(text.charAt(i));
+buf.append(text.charAt(i)*-1);
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1084/pattern-ver1-serial/Bank.src.entities.Account.java-returnLoan.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:09:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
-StringBuilder buf=new StringBuilder(text.length()+increase);
+StringBuilder buf=new StringBuilder(text.length()+increase*-1);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1084/pattern-ver1-serial/Bank.src.entities.Account.java-returnLoan.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:10:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
+import java.text.ParseException;
+
+import java.math.BigDecimal;
+
+import java.text.NumberFormat;
+
+import java.math.RoundingMode;
+
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
-buf.append(text.charAt(i));
+buf.append(new BigDecimal(text.charAt(i)).setScale(2,RoundingMode.HALF_UP));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/120/pattern-ver1-serial/src.main.java.sk.janobono.habox.sql.util.ItemsHelper.java-getItems.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:10:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
+import java.text.ParseException;
+
+import java.math.BigDecimal;
+
+import java.text.NumberFormat;
+
+import java.math.RoundingMode;
+
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
-buf.append(text.charAt(i));
+buf.append(new BigDecimal(text.charAt(i)).setScale(2,RoundingMode.HALF_UP));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/120/pattern-ver1-serial/src.main.java.sk.janobono.habox.sql.util.ItemsHelper.java-getItems.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:10:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
-tempIndex=text.indexOf(searchList[i]);
+tempIndex=i;
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6985/pattern-ver1-serial/src.org.broad.igv.track.DataTrack.java-getInViewScores.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:10:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
-increase=Math.min(increase,text.length()/5);
+increase=Math.min(increase,text.length()/5-22);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/2147/pattern-ver1-serial/src.main.java.ch.bfh.ti.projekt1.sokoban.view.GameWindowView.java-loadSolutionFile.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:10:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
-tempIndex=text.indexOf(searchList[i]);
+tempIndex=100;
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.TemplarAssassinRefraction.java-TemplarAssassinRefraction.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:10:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
-StringBuilder buf=new StringBuilder(text.length()+increase);
+StringBuilder buf=new StringBuilder(text.length()+increase*1000);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/3175/pattern-ver1-serial/src.de.fuberlin.wiwiss.d2rq.server.D2RServer.java-describe.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:10:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
+replaceIndex=i;
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
-replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/2335/pattern-ver1-serial/app.src.main.java.swampthings.dems.LoginActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:10:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
-buf.append(replacementList[replaceIndex]);
-start=textIndex+searchList[replaceIndex].length();
+buf.append(replacementList[replaceIndex++]);
+start=textIndex+searchList[replaceIndex++].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3938/pattern-ver1-serial/src.main.java.de.topobyte.osm4j.geometry.CoordinateSequencesBuilder.java-createGeometry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:10:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
-StringBuilder buf=new StringBuilder(text.length()+increase);
+StringBuilder buf=new StringBuilder((int)(text.length()+increase));
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:10:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
+}
 }
 }
 }
+if(text==null){
+return null;
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4925/pattern-ver1-serial/statemachine-persistence.src.main.java.de.teck.statemachine.persistence.model.TransitionGraph.java-addTransition.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:10:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
+if(searchList==null){
+return null;
+}
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4925/pattern-ver1-serial/statemachine-persistence.src.main.java.de.teck.statemachine.persistence.model.TransitionGraph.java-addTransition.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:10:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
+}
+if(searchList==null){
+return null;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4925/pattern-ver1-serial/statemachine-persistence.src.main.java.de.teck.statemachine.persistence.model.TransitionGraph.java-addTransition.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:10:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
+try{
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
+}
 }
+}finally{
+replaceIndex=i;
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 0, DEL : 3
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:10:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
+try{
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
+}
 }
+}finally{
+textIndex=tempIndex;
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 0, DEL : 3
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:10:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
+textIndex=tempIndex;
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/1831/pattern-ver1-serial/bitrepository-audit-trail-service.src.main.java.org.bitrepository.audittrails.collector.IncrementalCollector.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:10:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
+textIndex=tempIndex;
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/1831/pattern-ver1-serial/bitrepository-audit-trail-service.src.main.java.org.bitrepository.audittrails.collector.IncrementalCollector.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:10:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
+textIndex=tempIndex;
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/1831/pattern-ver1-serial/bitrepository-audit-trail-service.src.main.java.org.bitrepository.audittrails.collector.IncrementalCollector.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:10:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
+textIndex=tempIndex;
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/1831/pattern-ver1-serial/bitrepository-audit-trail-service.src.main.java.org.bitrepository.audittrails.collector.IncrementalCollector.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:10:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
+textIndex=tempIndex;
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/1831/pattern-ver1-serial/bitrepository-audit-trail-service.src.main.java.org.bitrepository.audittrails.collector.IncrementalCollector.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:10:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
+assert (text!=null);
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:10:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
+assert (text!=null);
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:10:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
+assert (text!=null);
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:10:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
+assert (text!=null);
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:11:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
+assert (searchList!=null);
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:11:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
+assert (replacementList!=null);
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:11:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
+assert (searchList!=null);
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:11:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
+assert (replacementList!=null);
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:11:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
+assert (!text.isEmpty());
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:11:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
+assert (!text.isEmpty());
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:11:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
-increase=Math.min(increase,text.length()/5);
+increase=Math.min(increase,Math.round(text.length()/5));
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V16/7706/pattern-ver1-serial/pixi.src.main.java.org.openpixi.pixi.diagnostics.methods.ProjectedEnergyDensity.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:11:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
+if(searchList.equals(InputStream.class)){
+return text;
+}
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:11:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
+if(replacementList.equals(InputStream.class)){
+return text;
+}
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:11:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
-if(textIndex==-1){
+if(textIndex==-1||"查看红包".equals(textIndex)){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:11:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
-if(timeToLive<0){
+if(timeToLive<0||"查看红包".equals(timeToLive)){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:11:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
-if(searchLength!=replacementLength){
+if(searchLength!=replacementLength||"查看红包".equals(searchLength)){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:11:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
-if(tempIndex==-1){
+if(tempIndex==-1||"查看红包".equals(tempIndex)){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:11:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
-if(greater>0){
+if(greater>0||"查看红包".equals(greater)){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:11:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
-if(tempIndex==-1){
+if(tempIndex==-1||"查看红包".equals(tempIndex)){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:11:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
-if(searchLength!=replacementLength){
+if(searchLength!=replacementLength||searchLength==3){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:11:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
-if(timeToLive<0){
+if(timeToLive<0||timeToLive==3){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:11:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
-if(tempIndex==-1){
+if(tempIndex==-1||tempIndex==3){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:11:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
-if(textIndex==-1){
+if(textIndex==-1||textIndex==3){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:11:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
-if(tempIndex==-1){
+if(tempIndex==-1||tempIndex==3){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:11:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
-if(greater>0){
+if(greater>0||greater==3){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:11:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
-start=textIndex+searchList[replaceIndex].length();
+start=1;
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:12:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
-start=textIndex+searchList[replaceIndex].length();
+start=-1;
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:12:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
-tempIndex=text.indexOf(searchList[i],start);
+tempIndex=0;
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/1097/pattern-ver1-serial/plugins.de.ovgu.featureide.core.mpl.src.de.ovgu.featureide.core.mpl.signature.javadoc.AJavaDocCommentMerger.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:14:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
+buf.append(replacementList[replaceIndex]);
 buf.append(text.charAt(i));
 }
-buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:14:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
-buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
+buf.append(replacementList[replaceIndex]);
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:14:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
-buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
+buf.append(replacementList[replaceIndex]);
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:15:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
-buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
+buf.append(replacementList[replaceIndex]);
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:15:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
-return result;
+return result==null?"":result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/319/pattern-ver1-serial/Flattitude.app.src.main.java.com.aseupc.flattitude.Models.IDs.java-getUserToken.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:15:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
-return text;
+return text==null?"":text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/319/pattern-ver1-serial/Flattitude.app.src.main.java.com.aseupc.flattitude.Models.IDs.java-getUserToken.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:15:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
-return text;
+return text==null?"":text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/319/pattern-ver1-serial/Flattitude.app.src.main.java.com.aseupc.flattitude.Models.IDs.java-getUserToken.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:15:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
-}
 buf.append(replacementList[replaceIndex]);
+}
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:15:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
-start=textIndex+searchList[replaceIndex].length();
+start=2;
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:17:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
-tempIndex=text.indexOf(searchList[i],start);
+tempIndex=2;
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:19:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
-buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
+buf.append(replacementList[replaceIndex]);
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V23/6741/pattern-ver1-serial/core.src.main.java.org.jahia.modules.external.ExternalSessionImpl.java-move.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:19:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
-start=textIndex+searchList[replaceIndex].length();
+start=3;
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:19:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
+}
+if(text.isEmpty()){
+text=null;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:19:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
+}
+if(text.isEmpty()){
+text=null;
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:19:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
-if(textIndex==-1){
+if(textIndex<0||textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:19:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
-if(searchLength!=replacementLength){
+if(searchLength<0||searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:19:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
-if(timeToLive<0){
+if(timeToLive<0||timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:19:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
-if(tempIndex==-1){
+if(tempIndex<0||tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:19:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
-if(tempIndex==-1){
+if(tempIndex<0||tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:19:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
-if(greater>0){
+if(greater<0||greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:19:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
-noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
+noMoreMatchesForReplIndex[i]=true;
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1794/pattern-ver1-serial/src.com.olympicat.scheduleupdates.DataFactory.java-loadData.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:19:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
+textIndex=-1;
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/1950/pattern-ver1-serial/Node.java-eventDelete.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:21:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
-textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
+textIndex=-1;
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/1950/pattern-ver1-serial/Node.java-eventDelete.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:21:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
+textIndex=-1;
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/1950/pattern-ver1-serial/Node.java-eventDelete.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:21:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
+noMoreMatchesForReplIndex[i]=true;
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
-noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/5647/pattern-ver1-serial/src.worms.model.statements.Print.java-executeStatement.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:21:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
-textIndex=tempIndex;
+textIndex=(tempIndex+tempIndex)%tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6203/pattern-ver1-serial/src.unogame.peer.GamePeer.java-getNextInRing.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:21:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
-textIndex=tempIndex;
+textIndex=(tempIndex+tempIndex)%tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6203/pattern-ver1-serial/src.unogame.peer.GamePeer.java-getNextInRing.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:23:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
-tempIndex=text.indexOf(searchList[i],start);
+tempIndex=(text.indexOf(searchList[i],start)+start)%start;
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6203/pattern-ver1-serial/src.unogame.peer.GamePeer.java-getNextInRing.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:25:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
-increase+=3*greater;
+increase+=(3*greater+greater)%greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6203/pattern-ver1-serial/src.unogame.peer.GamePeer.java-getNextInRing.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:25:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
-if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
+if(tempIndex==-1){
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/2094/pattern-ver1-serial/src.main.java.com.dagobert_engine.core.service.UpdateService.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:25:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
+buf.append(replacementList[replaceIndex]);
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:26:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
+buf.append(replacementList[replaceIndex]);
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:26:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
+buf.append(replacementList[replaceIndex]);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
-buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/4610/pattern-ver1-serial/StashCache.app.src.main.java.com.geekeclectic.android.stashcache.StashOverviewActivity.java-onActivityResult.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:26:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
-tempIndex=text.indexOf(searchList[i],start);
+tempIndex=0xEfffffff&(text.indexOf(searchList[i],start));
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/1711/pattern-ver1-serial/src.main.java.com.ociweb.pronghorn.ring.RingWriter.java-writeBytes.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:26:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
-start=textIndex+searchList[replaceIndex].length();
+start=10;
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.SlarkDarkPact.java-SlarkDarkPact.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:26:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
-buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
+buf.append(replacementList[replaceIndex]);
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4025/pattern-ver1-serial/AZoCamSyncDesktop.src.de.quadrillenschule.azocamsyncd.gui.SwingBackgroundUpdater.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:26:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
-buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
+buf.append(replacementList[replaceIndex]);
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4025/pattern-ver1-serial/AZoCamSyncDesktop.src.de.quadrillenschule.azocamsyncd.gui.SwingBackgroundUpdater.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:26:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
-noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
+noMoreMatchesForReplIndex[i]=true;
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V39/1875/pattern-ver1-serial/TherapistApp.src.application.Main.java-handle.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:26:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
-return result;
+return result!=null?result:new String();
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:26:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
-return text;
+return text!=null?text:new String();
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:26:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
-return text;
+return text!=null?text:new String();
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:26:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
-if(timeToLive<0){
+if(timeToLive<0||timeToLive==0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:26:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
-if(searchLength!=replacementLength){
+if(searchLength!=replacementLength||searchLength==0){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:26:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
-if(tempIndex==-1){
+if(tempIndex==-1||tempIndex==0){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:26:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
-if(textIndex==-1){
+if(textIndex==-1||textIndex==0){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:26:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
-if(greater>0){
+if(greater>0||greater==0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:26:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
-if(tempIndex==-1){
+if(tempIndex==-1||tempIndex==0){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:26:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
-tempIndex=text.indexOf(searchList[i],start);
+tempIndex=i;
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6985/pattern-ver1-serial/src.org.broad.igv.track.DataTrack.java-getInViewScores.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:28:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
-if(timeToLive<0){
+if(timeToLive<0||timeToLive>9){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:28:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
-if(greater>0){
+if(greater>0||greater>9){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:28:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
-if(searchLength!=replacementLength){
+if(searchLength!=replacementLength||searchLength>9){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:28:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
-if(textIndex==-1){
+if(textIndex==-1||textIndex>9){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:28:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
-if(tempIndex==-1){
+if(tempIndex==-1||tempIndex>9){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:28:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
-if(tempIndex==-1){
+if(tempIndex==-1||tempIndex>9){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:28:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
-StringBuilder buf=new StringBuilder(text.length()+increase);
+StringBuilder buf=new StringBuilder(text.length()+increase+" -u "+text);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:29:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
-StringBuilder buf=new StringBuilder(text.length()+increase);
+StringBuilder buf=new StringBuilder(text.length()+increase+" -u "+searchLength);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:29:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
-StringBuilder buf=new StringBuilder(text.length()+increase);
+StringBuilder buf=new StringBuilder(text.length()+increase+" -u "+searchList);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:29:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
-StringBuilder buf=new StringBuilder(text.length()+increase);
+StringBuilder buf=new StringBuilder(text.length()+increase+" -u "+replacementList);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:29:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
-StringBuilder buf=new StringBuilder(text.length()+increase);
+StringBuilder buf=new StringBuilder(text.length()+increase+" -u "+replacementLength);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:29:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
-StringBuilder buf=new StringBuilder(text.length()+increase);
+StringBuilder buf=new StringBuilder(text.length()+increase+" -u "+repeat);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:29:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
-StringBuilder buf=new StringBuilder(text.length()+increase);
+StringBuilder buf=new StringBuilder(text.length()+increase+" -u "+timeToLive);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:29:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
-StringBuilder buf=new StringBuilder(text.length()+increase);
+StringBuilder buf=new StringBuilder(text.length()+increase+" -u "+noMoreMatchesForReplIndex);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:29:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
-StringBuilder buf=new StringBuilder(text.length()+increase);
+StringBuilder buf=new StringBuilder(text.length()+increase+" -u "+textIndex);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:29:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
-StringBuilder buf=new StringBuilder(text.length()+increase);
+StringBuilder buf=new StringBuilder(text.length()+increase+" -u "+replaceIndex);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:29:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
-buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+buf.append(replacementList[replaceIndex]);
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/5159/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ecms.ContextMenu.java-lockNode.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:29:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
-buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
+buf.append(replacementList[replaceIndex]);
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/5159/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ecms.ContextMenu.java-lockNode.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:29:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
-start=textIndex+searchList[replaceIndex].length();
+start=100;
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.TemplarAssassinRefraction.java-TemplarAssassinRefraction.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:29:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:29:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:29:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:29:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:29:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:29:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
+noMoreMatchesForReplIndex[i]=true;
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
-noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/2335/pattern-ver1-serial/app.src.main.java.swampthings.dems.LoginActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:29:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
+noMoreMatchesForReplIndex[i]=true;
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
-noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/2335/pattern-ver1-serial/app.src.main.java.swampthings.dems.LoginActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:29:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
-tempIndex=text.indexOf(searchList[i],start);
+tempIndex=1;
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6053/pattern-ver1-serial/src.monopoly.Dice.java-throwIt.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:31:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
+try{
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
+}
 }
+}finally{
+noMoreMatchesForReplIndex[i]=true;
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 1, INS : 0, DEL : 4
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:31:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
-if(timeToLive<0){
+if(timeToLive<0&&timeToLive<4000000){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:31:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
-if(greater>0){
+if(greater>0&&greater<4000000){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:31:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
-if(searchLength!=replacementLength){
+if(searchLength!=replacementLength&&searchLength<4000000){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:32:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
-if(tempIndex==-1){
+if(tempIndex==-1&&tempIndex<4000000){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:32:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
-if(textIndex==-1){
+if(textIndex==-1&&textIndex<4000000){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:32:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
-if(tempIndex==-1){
+if(tempIndex==-1&&tempIndex<4000000){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:32:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
+}
+if(text==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:32:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
+if(searchList[i]==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:32:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
+if((text.length()-2)>=0){
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
+}
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V14/677/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.VirtualNasServerDataTable.java-VirtualNasServerInfo.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:32:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
+if((text.length()-2)>=0){
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
+}
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V14/677/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.VirtualNasServerDataTable.java-VirtualNasServerInfo.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:32:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
+if(timeToLive>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:32:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
+buf.append(text.charAt(i));
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:32:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
+buf.append(text.charAt(i));
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:32:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
+buf.append(text.charAt(i));
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:32:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
+}
+if(searchList[i]==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:32:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
+buf.append(text.charAt(i));
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:32:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
+buf.append(text.charAt(i));
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/293/pattern-ver1-serial/common.ganymedes01.aobd.recipes.RecipesHandler.java-craftingRecipes.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:32:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
+if(tempIndex<0){
+tempIndex=0;
+}
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:32:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
+}
 }
 }
+if(tempIndex<0){
+tempIndex=0;
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:32:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
+}
 }
 }
+if(tempIndex<0){
+tempIndex=0;
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:32:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
+if(increase<0){
+increase=0;
+}
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:32:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
+if(tempIndex<0){
+tempIndex=0;
+}
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:34:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
+}
 }
 }
 }
+if(tempIndex<0){
+tempIndex=0;
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:34:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
+}
 }
+if(replaceIndex<0){
+replaceIndex=0;
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:34:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
+}
 }
+if(textIndex<0){
+textIndex=0;
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:34:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
+}
+if(replaceIndex<0){
+replaceIndex=0;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:34:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
+}
+if(textIndex<0){
+textIndex=0;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:34:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
+if(replaceIndex!=i){
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
+}
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:34:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
+if(textIndex!=tempIndex){
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
+}
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:34:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
+if(text!=null){
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
+}
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V37/64/pattern-ver1-serial/app.src.main.java.com.example.scame.lighttube.presentation.fragments.ChannelVideosFragment.java-onSaveInstanceState.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:34:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+buf.append(text.charAt(i));
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:34:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
+buf.append(text.charAt(i));
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:34:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
+buf.append(" (");
+buf.append(") ");
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:34:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
+buf.append(" (");
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
+buf.append(") ");
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:34:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
+if(start<=0){
+start=1;
+}
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/1761/pattern-ver1-serial/JazminServer.src.jazmin.core.monitor.DispatcherMonitorAgent.java-sample.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:34:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
+if(tempIndex<=0){
+tempIndex=1;
+}
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/1761/pattern-ver1-serial/JazminServer.src.jazmin.core.monitor.DispatcherMonitorAgent.java-sample.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:34:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
-}
-}
 }
 if(textIndex==-1){
 return text;
+}
+}
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:34:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
+}
+if(textIndex==-1){
+return text;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
-}
 }
 }
-if(textIndex==-1){
-return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:34:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
+buf.append(text.charAt(i));
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:34:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
+if(replacementLength>searchLength){
+replacementLength=searchLength;
+}
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/5173/pattern-ver1-serial/src.com.sbar.rebudget.views.ChartView.java-addPiece.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:34:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
+if(searchLength>replacementLength){
+searchLength=replacementLength;
+}
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/5173/pattern-ver1-serial/src.com.sbar.rebudget.views.ChartView.java-addPiece.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:34:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
+import java.io.File;
+
+import java.util.HashSet;
+
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
+buf.append(text.charAt(i));
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V1/3878/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.jobs.backupscheduler.UploadExecutor.java-doUpload.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:34:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
+import java.io.File;
+
+import java.util.HashSet;
+
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
+buf.append(text.charAt(i));
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V1/3878/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.jobs.backupscheduler.UploadExecutor.java-doUpload.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:35:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
-buf.append(text.charAt(i));
+buf.append(text.charAt(i)+",");
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
-buf.append(text.charAt(i));
+buf.append(text.charAt(i)+",");
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V34/3838/pattern-ver1-serial/Chess.src.CSE712.java-WriteFENToFile.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:35:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
+if(text!=null){
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
-String result=buf.toString();
-if(!repeat){
-return result;
 }
+String result=buf.toString();
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V12/6317/pattern-ver1-serial/src.storybuilder.graph.model.GraphDatasource.java-getMinigameConnectionsFrom.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:35:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
+buf.append(text.charAt(i));
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4025/pattern-ver1-serial/AZoCamSyncDesktop.src.de.quadrillenschule.azocamsyncd.gui.SwingBackgroundUpdater.java-run.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:35:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
+buf.append(text.charAt(i));
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4025/pattern-ver1-serial/AZoCamSyncDesktop.src.de.quadrillenschule.azocamsyncd.gui.SwingBackgroundUpdater.java-run.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:35:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
-throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
+throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+"\""+text+"\"");
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4748/pattern-ver1-serial/exportLibraries.vnxe.src.main.java.com.emc.storageos.vnxe.requests.FileSystemListRequest.java-getByFSName.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:35:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
+if(replaceIndex!=i){
 textIndex=tempIndex;
-replaceIndex=i;
+}
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/568/pattern-ver1-serial/src.net.skycraftmc.SkyQuest.utilitygui.ObjectiveEditPanel.java-clear.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:35:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
-textIndex=tempIndex;
+if(textIndex!=tempIndex){
 replaceIndex=i;
+}
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/568/pattern-ver1-serial/src.net.skycraftmc.SkyQuest.utilitygui.ObjectiveEditPanel.java-clear.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:35:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
+buf.append(text.charAt(i));
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/5159/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ecms.ContextMenu.java-lockNode.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:35:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
-textIndex=tempIndex;
+textIndex=tempIndex*2;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
-increase+=3*greater;
+increase+=3*greater*2;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:35:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
-replaceIndex=i;
+replaceIndex=i*2;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
-increase+=3*greater;
+increase+=3*greater*2;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:35:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
-increase+=3*greater;
+increase+=3*greater*2;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
-textIndex=-1;
+textIndex=-1*2;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:35:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
-increase+=3*greater;
+increase+=3*greater*2;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
-replaceIndex=-1;
+replaceIndex=-1*2;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:35:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
-increase+=3*greater;
+increase+=3*greater*2;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
-tempIndex=-1;
+tempIndex=-1*2;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:35:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
+buf.append(text.charAt(i));
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V23/3266/pattern-ver1-serial/src.lejosserver.TouchSensor.java-TouchSensor.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:35:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
-increase=Math.min(increase,text.length()/5);
+increase=1;
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:35:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
-increase=Math.min(increase,text.length()/5);
+increase=-1;
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:35:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
-increase=Math.min(increase,text.length()/5);
+increase=0;
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/1097/pattern-ver1-serial/plugins.de.ovgu.featureide.core.mpl.src.de.ovgu.featureide.core.mpl.signature.javadoc.AJavaDocCommentMerger.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:35:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
+if(replacementList[replaceIndex]!=null){
 buf.append(replacementList[replaceIndex]);
+}else {
+buf.append("");
+}
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V38/6520/pattern-ver1-serial/src.main.java.org.metadatacenter.submission.biosample.core.BioSampleValidator.java-generateBioSampleSubmissionXML.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:35:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
-tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
+tempIndex=text.indexOf(searchList[i]);
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:35:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
-tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
+tempIndex=text.indexOf(searchList[i]);
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:35:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
-tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
+tempIndex=text.indexOf(searchList[i]);
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:35:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
-tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
+tempIndex=text.indexOf(searchList[i]);
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:36:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
-tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
+tempIndex=text.indexOf(searchList[i]);
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:36:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
-tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
+tempIndex=text.indexOf(searchList[i]);
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:36:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
-increase=Math.min(increase,text.length()/5);
+increase=2;
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:36:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
-while(textIndex!=-1){
+while(textIndex!=-1||textIndex>>>3>0){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/6215/pattern-ver1-serial/java.src.Bin.java-pack_integer.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:36:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
-increase=Math.min(increase,text.length()/5);
+increase=3;
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:36:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
+tempIndex=text.indexOf(searchList[i]);
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/1950/pattern-ver1-serial/Node.java-eventDelete.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:36:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
+tempIndex=text.indexOf(searchList[i]);
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/1950/pattern-ver1-serial/Node.java-eventDelete.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:36:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
-tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
+tempIndex=text.indexOf(searchList[i]);
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/1950/pattern-ver1-serial/Node.java-eventDelete.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:36:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
+tempIndex=text.indexOf(searchList[i]);
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/1950/pattern-ver1-serial/Node.java-eventDelete.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:36:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
-tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
+tempIndex=text.indexOf(searchList[i]);
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/1950/pattern-ver1-serial/Node.java-eventDelete.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:36:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
+if(noMoreMatchesForReplIndex[i]!=true){
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
+}
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:36:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
+tempIndex=text.indexOf(searchList[i]);
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:36:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
+tempIndex=text.indexOf(searchList[i]);
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:36:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+tempIndex=text.indexOf(searchList[i]);
 continue;
 }
-tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:36:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
-tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
+tempIndex=text.indexOf(searchList[i]);
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:36:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
-increase=Math.min(increase,text.length()/5);
+increase=(Math.min(increase,text.length()/5)+increase)%increase;
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6203/pattern-ver1-serial/src.unogame.peer.GamePeer.java-getNextInRing.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:36:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
+import java.io.File;
+
+import java.util.HashSet;
+
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
-tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
+tempIndex=text.indexOf(searchList[i]);
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V1/3878/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.jobs.backupscheduler.UploadExecutor.java-doUpload.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:36:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
-if(tempIndex==-1){
+boolean haveBreadCrumbs=false;
+if(tempIndex==-1&&haveBreadCrumbs){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 4, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:36:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
+boolean haveBreadCrumbs=false;
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
-if(tempIndex==-1){
+if(tempIndex==-1&&haveBreadCrumbs){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 4, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:36:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
-increase=Math.min(increase,text.length()/5);
+increase=0xEfffffff&(Math.min(increase,text.length()/5));
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/1711/pattern-ver1-serial/src.main.java.com.ociweb.pronghorn.ring.RingWriter.java-writeBytes.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:36:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
-buf.append(replacementList[replaceIndex]);
+if(replacementList[replaceIndex]!=null){
 start=textIndex+searchList[replaceIndex].length();
+}
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7443/pattern-ver1-serial/app.src.main.java.com.example.mobile.smartcycledemo.bluetooth.BluetoothLeService.java-setCharacteristicNotification.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:37:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
-buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
+if(replacementList[replaceIndex]!=null){
 textIndex=-1;
+}
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7443/pattern-ver1-serial/app.src.main.java.com.example.mobile.smartcycledemo.bluetooth.BluetoothLeService.java-setCharacteristicNotification.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:37:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
-buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
+if(replacementList[replaceIndex]!=null){
 replaceIndex=-1;
+}
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7443/pattern-ver1-serial/app.src.main.java.com.example.mobile.smartcycledemo.bluetooth.BluetoothLeService.java-setCharacteristicNotification.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:37:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
-increase=Math.min(increase,text.length()/5);
+increase=10;
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.SlarkDarkPact.java-SlarkDarkPact.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:37:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
-increase=Math.min(increase,text.length()/5);
+increase=100;
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.TemplarAssassinRefraction.java-TemplarAssassinRefraction.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:37:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
-tempIndex=text.indexOf(searchList[i]);
+tempIndex=text.indexOf(searchList[i])*2;
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
-increase+=3*greater;
+increase+=3*greater*2;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:37:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
-tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
+tempIndex=text.indexOf(searchList[i]);
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V39/1103/pattern-ver1-serial/Graphs.src.com.jmga.graphs.classes.GView.java-update.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:37:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
-buf.append(replacementList[replaceIndex]);
+if(buf!=null){
 start=textIndex+searchList[replaceIndex].length();
+}
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V46/1762/pattern-ver1-serial/app.src.main.java.kosbrother.com.doctorguide.SearchableActivity.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:37:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
-buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
+if(buf!=null){
 textIndex=-1;
+}
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V46/1762/pattern-ver1-serial/app.src.main.java.kosbrother.com.doctorguide.SearchableActivity.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:37:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
-if(textIndex==-1||tempIndex<textIndex){
+if(textIndex==-1||tempIndex<textIndex||tempIndex=='%'){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V5/6049/pattern-ver1-serial/src.main.java.org.wltea.analyzer.core.LaTeXSegmenter.java-addOperatorFormula.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:37:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
-if(textIndex==-1||tempIndex<textIndex){
+if(textIndex==-1||tempIndex<textIndex||tempIndex=='%'){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V5/6049/pattern-ver1-serial/src.main.java.org.wltea.analyzer.core.LaTeXSegmenter.java-addOperatorFormula.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:37:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
-if(textIndex==-1||tempIndex<textIndex){
+if(textIndex<0L||(textIndex==-1||tempIndex<textIndex)){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V8/110/pattern-ver1-serial/src.com.firebirdberlin.nightdream.ui.NightDreamUI.java-updateWeatherData.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:37:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
-if(textIndex==-1||tempIndex<textIndex){
+if(textIndex<0L||(textIndex==-1||tempIndex<textIndex)){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V8/110/pattern-ver1-serial/src.com.firebirdberlin.nightdream.ui.NightDreamUI.java-updateWeatherData.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:37:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
-start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
+start=textIndex+searchList[replaceIndex].length();
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V23/6741/pattern-ver1-serial/core.src.main.java.org.jahia.modules.external.ExternalSessionImpl.java-move.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:37:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
+tempIndex=text.indexOf(searchList[i],start);
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V23/6741/pattern-ver1-serial/core.src.main.java.org.jahia.modules.external.ExternalSessionImpl.java-move.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:37:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
+searchList[i]=searchList[i].replaceAll("\t","");
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V7/5016/pattern-ver1-serial/tutorials.src.main.java.com.tutorial.glsltutorials.tutorials.Attributes.AttribType.java-ParseFunc.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:37:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
+replacementList[i]=replacementList[i].replaceAll("\t","");
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V7/5016/pattern-ver1-serial/tutorials.src.main.java.com.tutorial.glsltutorials.tutorials.Attributes.AttribType.java-ParseFunc.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:37:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
+start=textIndex+searchList[replaceIndex].length();
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/1950/pattern-ver1-serial/Node.java-eventDelete.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:37:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
+searchList[i]+="_"+Integer.toString(i);
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V36/6433/pattern-ver1-serial/src.main.java.com.outbrain.NLP_processor.java-create_important_words_array.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:37:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
+replacementList[i]+="_"+Integer.toString(i);
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V36/6433/pattern-ver1-serial/src.main.java.com.outbrain.NLP_processor.java-create_important_words_array.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:37:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
+searchList[i]+="_"+Integer.toString(i);
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V36/6433/pattern-ver1-serial/src.main.java.com.outbrain.NLP_processor.java-create_important_words_array.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:37:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
+replacementList[i]+="_"+Integer.toString(i);
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V36/6433/pattern-ver1-serial/src.main.java.com.outbrain.NLP_processor.java-create_important_words_array.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:38:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
+searchList[i]+="_"+Integer.toString(i);
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V36/6433/pattern-ver1-serial/src.main.java.com.outbrain.NLP_processor.java-create_important_words_array.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:38:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
+replacementList[i]+="_"+Integer.toString(i);
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V36/6433/pattern-ver1-serial/src.main.java.com.outbrain.NLP_processor.java-create_important_words_array.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:38:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
-if(textIndex==-1||tempIndex<textIndex){
+if(true){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:38:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+tempIndex=text.indexOf(searchList[i],start);
 continue;
 }
-tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:38:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
+tempIndex=text.indexOf(searchList[i],start);
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:38:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
+tempIndex=text.indexOf(searchList[i],start);
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:38:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+tempIndex=text.indexOf(searchList[i],start);
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/4215/pattern-ver1-serial/Mage.Server.src.main.java.mage.server.TableController.java-joinTournament.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:38:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
+tempIndex=text.indexOf(searchList[i],start);
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/4215/pattern-ver1-serial/Mage.Server.src.main.java.mage.server.TableController.java-joinTournament.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:38:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
+tempIndex=text.indexOf(searchList[i],start);
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/4215/pattern-ver1-serial/Mage.Server.src.main.java.mage.server.TableController.java-joinTournament.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:38:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
+tempIndex=text.indexOf(searchList[i],start);
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/4215/pattern-ver1-serial/Mage.Server.src.main.java.mage.server.TableController.java-joinTournament.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:38:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
+tempIndex=text.indexOf(searchList[i],start);
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V32/156/pattern-ver1-serial/ControlCenter.src.main.java.org.votingsystem.web.controlcenter.filter.FilterVS.java-doFilter.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:38:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
+start=textIndex+searchList[replaceIndex].length();
 }
 buf.append(replacementList[replaceIndex]);
-start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/3854/pattern-ver1-serial/NewIntro4.java-act.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
-start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
+start=textIndex+searchList[replaceIndex].length();
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/3854/pattern-ver1-serial/NewIntro4.java-act.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:40:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
+tempIndex=text.indexOf(searchList[i],start);
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/3854/pattern-ver1-serial/NewIntro4.java-act.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:40:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
-start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
+start=textIndex+searchList[replaceIndex].length();
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/3854/pattern-ver1-serial/NewIntro4.java-act.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:40:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
-start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
+start=textIndex+searchList[replaceIndex].length();
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/3854/pattern-ver1-serial/NewIntro4.java-act.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:40:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
+if(text==null){
+return "";
+}
+if(searchList==null){
+return text;
+}
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:40:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
+if(text==null){
+return "";
+}
+if(replacementList==null){
+return text;
+}
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:40:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
+if(text==null){
+return "";
+}
+if(searchList==null){
+return text;
+}
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:40:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
+if(text==null){
+return "";
+}
+if(replacementList==null){
+return text;
+}
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:40:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
+if(text==null){
+return "";
+}
+if(searchList==null){
+return text;
+}
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:40:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
+if(text==null){
+return "";
+}
+if(replacementList==null){
+return text;
+}
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:40:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
+if(text==null){
+return "";
+}
+if(searchList==null){
+return text;
+}
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:40:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
-return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
+return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/3906/pattern-ver1-serial/tetrad-lib.src.main.java.edu.cmu.tetrad.algcomparison.algorithm.oracle.pag.Ccd.java-getComparisonGraph.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:40:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
+if(text.startsWith("\r\n")){
+text=text.substring(2);
+}
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:41:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
+if(text.startsWith("\r\n")){
+text=text.substring(2);
+}
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:41:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
+if(text.startsWith("\r\n")){
+text=text.substring(2);
+}
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:41:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
+if(text.startsWith("\r\n")){
+text=text.substring(2);
+}
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:41:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
+if(text.startsWith("\r\n")){
+text=text.substring(2);
+}
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:41:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
+if(text.startsWith("\r\n")){
+text=text.substring(2);
+}
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:41:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
-if(textIndex==-1||tempIndex<textIndex){
+if(noMoreMatchesForReplIndex[i]&&(textIndex==-1||tempIndex<textIndex)){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/270/pattern-ver1-serial/modules.lang-painless.src.main.java.org.elasticsearch.painless.AnalyzerExternal.java-processExtvar.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:41:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
-if(textIndex==-1||tempIndex<textIndex){
+if(noMoreMatchesForReplIndex[i]&&(textIndex==-1||tempIndex<textIndex)){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/270/pattern-ver1-serial/modules.lang-painless.src.main.java.org.elasticsearch.painless.AnalyzerExternal.java-processExtvar.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:41:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
-increase+=3*greater;
+increase+=3*greater*2;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
-start=textIndex+searchList[replaceIndex].length();
+start=textIndex+searchList[replaceIndex].length()*2;
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:41:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
-increase+=3*greater;
+increase+=3*greater*2;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
-tempIndex=text.indexOf(searchList[i],start);
+tempIndex=text.indexOf(searchList[i],start)*2;
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:41:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
+}
 }
+if(text.startsWith("/")){
+text=text.substring(1);
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V47/2604/pattern-ver1-serial/components.data-services.org.wso2.carbon.dataservices.core.src.main.java.org.wso2.carbon.dataservices.core.DBDeployer.java-createAxisOperation.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:41:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
+}
 }
 }
+if(text.startsWith("/")){
+text=text.substring(1);
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V47/2604/pattern-ver1-serial/components.data-services.org.wso2.carbon.dataservices.core.src.main.java.org.wso2.carbon.dataservices.core.DBDeployer.java-createAxisOperation.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:41:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
-if(tempIndex==-1){
+boolean haveBreadCrumbs=false;
+if(tempIndex==-1&&haveBreadCrumbs){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
+haveBreadCrumbs=true;
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 4, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:41:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
-if(tempIndex==-1){
+boolean haveBreadCrumbs=false;
+if(tempIndex==-1&&haveBreadCrumbs){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
+haveBreadCrumbs=true;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 4, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:41:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
+boolean haveBreadCrumbs=false;
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
-if(tempIndex==-1){
+if(tempIndex==-1&&haveBreadCrumbs){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
+haveBreadCrumbs=true;
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 4, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:41:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
+boolean haveBreadCrumbs=false;
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
-if(tempIndex==-1){
+if(tempIndex==-1&&haveBreadCrumbs){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
+haveBreadCrumbs=true;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 4, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:41:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
+boolean haveBreadCrumbs=false;
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
-if(tempIndex==-1){
+haveBreadCrumbs=true;
+if(tempIndex==-1&&haveBreadCrumbs){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 4, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:41:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
-throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
+ final String dropStatement="TimeToLive of "+timeToLive+" is less than 0: "+text;
+throw new IllegalStateException(dropStatement);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6019/pattern-ver1-serial/src.main.java.nz.co.gregs.dbvolution.internal.h2.MultiPoint2DFunctions.java-add.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 7, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:41:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
-throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
+ final String dropStatement="Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength;
+throw new IllegalArgumentException(dropStatement);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6019/pattern-ver1-serial/src.main.java.nz.co.gregs.dbvolution.internal.h2.MultiPoint2DFunctions.java-add.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 7, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:41:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
-increase+=3*greater;
+increase+=3*greater*2;
 }
 }
-increase=Math.min(increase,text.length()/5);
+increase=Math.min(increase,text.length()/5)*2;
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:41:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
-throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
+String loc="TimeToLive of "+timeToLive+" is less than 0: "+text;
+throw new IllegalStateException(loc);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V8/5610/pattern-ver1-serial/app.src.main.java.com.toddburgessmedia.stackoverflowretrofit.MeetupActivity.java-onNext.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 7, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:41:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
-throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
+String loc="Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength;
+throw new IllegalArgumentException(loc);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V8/5610/pattern-ver1-serial/app.src.main.java.com.toddburgessmedia.stackoverflowretrofit.MeetupActivity.java-onNext.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 7, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:41:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
+if(start<0){
+start--;
+}
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
+}
 }
 }
+if(tempIndex<0){
+tempIndex--;
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2288/pattern-ver1-serial/src.fr.jules_cesar.Loto.main.java-onEnable.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:41:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
+if(searchList==null||replacementList==null||text==null){
+return null;
+}
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:42:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
+if(replacementList==null||searchList==null||text==null){
+return null;
+}
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:42:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
+if(text==null||replacementList==null||searchList==null){
+return null;
+}
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:42:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
+if(replacementList==null||text==null||searchList==null){
+return null;
+}
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:42:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
+if(searchList==null||noMoreMatchesForReplIndex==null||text==null){
+return null;
+}
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:42:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
+if(replacementList==null||noMoreMatchesForReplIndex==null||text==null){
+return null;
+}
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:42:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
+if(noMoreMatchesForReplIndex==null||searchList==null||text==null){
+return null;
+}
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:42:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
+if(noMoreMatchesForReplIndex==null||replacementList==null||text==null){
+return null;
+}
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:42:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
+if(text==null||noMoreMatchesForReplIndex==null||searchList==null){
+return null;
+}
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:42:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
+if(noMoreMatchesForReplIndex==null||text==null||searchList==null){
+return null;
+}
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:42:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
-if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+if((noMoreMatchesForReplIndex[i])||(searchList[i]==null)||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
-if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+if((noMoreMatchesForReplIndex[i])||(searchList[i]==null)||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2011/V2/1860/pattern-ver1-serial/structr.structr-core.src.main.java.org.structr.core.entity.AbstractNode.java-collectRelatedNodes.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:42:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
+}
+if(replacementList==null){
+replacementList=new String[0];
+}
+if(searchList==null){
+searchList=new String[0];
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2884/pattern-ver1-serial/components.user-mgt.org.wso2.carbon.user.mgt.workflow.src.main.java.org.wso2.carbon.user.mgt.workflow.userstore.UpdateRoleUsersWFRequestHandler.java-startUpdateRoleUsersFlow.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 0, INS : 14, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:42:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
+}
+if(searchList==null){
+searchList=new String[0];
+}
+if(replacementList==null){
+replacementList=new String[0];
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2884/pattern-ver1-serial/components.user-mgt.org.wso2.carbon.user.mgt.workflow.src.main.java.org.wso2.carbon.user.mgt.workflow.userstore.UpdateRoleUsersWFRequestHandler.java-startUpdateRoleUsersFlow.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 0, INS : 14, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:42:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
-}
-if(timeToLive<0){
-throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
+if(text!=null){
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
+}
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/258/pattern-ver1-serial/web.src.main.java.com.epam.freelancer.web.controller.UserController.java-addIsComplaintInOrderings.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 3, INS : 0, DEL : 11
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:42:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
-if(searchLength!=replacementLength){
-throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
-}
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
+if(text!=null){
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
+}
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/258/pattern-ver1-serial/web.src.main.java.com.epam.freelancer.web.controller.UserController.java-addIsComplaintInOrderings.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 3, INS : 0, DEL : 11
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:42:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
-if(textIndex==-1||tempIndex<textIndex){
+if((textIndex==-1)||(tempIndex<textIndex)){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
-if(textIndex==-1||tempIndex<textIndex){
+if((textIndex==-1)||(tempIndex<textIndex)){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2011/V2/1860/pattern-ver1-serial/structr.structr-core.src.main.java.org.structr.core.entity.AbstractNode.java-collectRelatedNodes.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 14, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:42:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
-tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/5667/pattern-ver1-serial/src.AccessorBean.java-onPageLoaded.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 8, INS : 0, DEL : 6
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:42:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
-if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
-}
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/2602/pattern-ver1-serial/src.com.github.norbo11.game.poker.PokerPlayer.java-bet.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 14, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:42:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
-if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
-}
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/2602/pattern-ver1-serial/src.com.github.norbo11.game.poker.PokerPlayer.java-bet.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 14, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:42:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
+}else {
+if(textIndex==tempIndex){
+textIndex=tempIndex;
+replaceIndex=i;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
+}
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/1425/pattern-ver1-serial/ScalableStorageService.src.consistent_hashing.Range.java-isWithin.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 14, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:42:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
+}else {
+if(textIndex==tempIndex){
+textIndex=tempIndex;
+replaceIndex=i;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
+}
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/1425/pattern-ver1-serial/ScalableStorageService.src.consistent_hashing.Range.java-isWithin.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 14, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:42:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
+if(textIndex==-1||tempIndex<textIndex){
+textIndex=tempIndex;
+replaceIndex=i;
+}
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
-if(textIndex==-1||tempIndex<textIndex){
-textIndex=tempIndex;
-replaceIndex=i;
-}
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 15, UPD : 0, INS : 1, DEL : 14
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:43:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
+if(textIndex==-1||tempIndex<textIndex){
+textIndex=tempIndex;
+replaceIndex=i;
+}
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 15, UPD : 0, INS : 1, DEL : 14
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:43:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
+if(textIndex==-1||tempIndex<textIndex){
+textIndex=tempIndex;
+replaceIndex=i;
+}
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 15, UPD : 0, INS : 1, DEL : 14
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:43:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
+if(textIndex==-1||tempIndex<textIndex){
+textIndex=tempIndex;
+replaceIndex=i;
+}
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 15, UPD : 0, INS : 1, DEL : 14
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:43:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
-if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null||"查看红包".equals(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0)){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 18, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:43:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
-if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null||"查看红包".equals(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0)){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 18, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:43:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
-if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+if(!noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V12/6908/pattern-ver1-serial/mainModule.src.backend.building.ProductionBuilding.java-canBuild.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 18, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:43:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
-if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+if(!noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V12/6908/pattern-ver1-serial/mainModule.src.backend.building.ProductionBuilding.java-canBuild.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 18, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:43:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
-if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+if(true){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 18, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:43:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
-if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null==false){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 18, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:43:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
-if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null==false){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 18, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:43:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
-if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null||replacementList[i].isEmpty()){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/4205/pattern-ver1-serial/parsers.src.main.java.org.coode.xml.OWLOntologyXMLNamespaceManager.java-getQName.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 18, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:43:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
-if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null||replacementList[i].isEmpty()){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/4205/pattern-ver1-serial/parsers.src.main.java.org.coode.xml.OWLOntologyXMLNamespaceManager.java-getQName.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 18, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:43:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
-if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+if(noMoreMatchesForReplIndex[i]&&(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null)){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/270/pattern-ver1-serial/modules.lang-painless.src.main.java.org.elasticsearch.painless.AnalyzerExternal.java-processExtvar.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 18, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:43:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
-if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+if(noMoreMatchesForReplIndex[i]&&(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null)){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/270/pattern-ver1-serial/modules.lang-painless.src.main.java.org.elasticsearch.painless.AnalyzerExternal.java-processExtvar.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 18, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:43:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
-if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null||noMoreMatchesForReplIndex[i]){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V34/3215/pattern-ver1-serial/src.Output.java-writeAutoC.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 18, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:43:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
-if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null||noMoreMatchesForReplIndex[i]){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V34/3215/pattern-ver1-serial/src.Output.java-writeAutoC.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 18, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:43:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
+if(text!=null){
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
+}
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/258/pattern-ver1-serial/web.src.main.java.com.epam.freelancer.web.controller.UserController.java-addIsComplaintInOrderings.pattern
MATCHLEVEL : ALL
ALL : 21, UPD : 3, INS : 0, DEL : 18
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:43:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
-if(tempIndex==-1){
-noMoreMatchesForReplIndex[i]=true;
-}else {
-if(textIndex==-1||tempIndex<textIndex){
-textIndex=tempIndex;
-replaceIndex=i;
-}
-}
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V32/4121/pattern-ver1-serial/main.plugins.org.talend.dataprofiler.core.src.org.talend.dataprofiler.core.ImageLib.java-getImageNameByRepositoryNode.pattern
MATCHLEVEL : ALL
ALL : 22, UPD : 0, INS : 0, DEL : 22
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:43:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
-if(tempIndex==-1){
-noMoreMatchesForReplIndex[i]=true;
-}else {
-if(textIndex==-1||tempIndex<textIndex){
-textIndex=tempIndex;
-replaceIndex=i;
-}
-}
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V20/6381/pattern-ver1-serial/src.main.java.eu.learnpad.ca.analysis.correctness.CorrectnessAnalysis.java-calculateAnnotations.pattern
MATCHLEVEL : ALL
ALL : 22, UPD : 0, INS : 0, DEL : 22
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:43:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
-if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
+if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0||"查看红包".equals(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null)){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 24, UPD : 24, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:43:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
-if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
+if(true){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 24, UPD : 24, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:43:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
-if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
+if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0==false){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 24, UPD : 24, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:44:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
-if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
+if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0&&text.length()>0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/3401/pattern-ver1-serial/src.edu.gordian.scopes.Scope.java-toElement.pattern
MATCHLEVEL : ALL
ALL : 24, UPD : 24, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:44:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
-if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
+if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0&&false){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/5079/pattern-ver1-serial/Server.src.server.model.players.packets.ClickNPC.java-processPacket.pattern
MATCHLEVEL : ALL
ALL : 24, UPD : 24, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:44:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
-if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+if((noMoreMatchesForReplIndex[i]||searchList[i]==null)||(searchList[i].length()==0)||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
-if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+if((noMoreMatchesForReplIndex[i]||searchList[i]==null)||(searchList[i].length()==0)||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2011/V2/1860/pattern-ver1-serial/structr.structr-core.src.main.java.org.structr.core.entity.AbstractNode.java-collectRelatedNodes.pattern
MATCHLEVEL : ALL
ALL : 24, UPD : 24, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:44:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
-if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
+if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/947/pattern-ver1-serial/advinst-server.src.main.java.jetbrains.buildServer.advinst.server.AdvinstRunTypePropertiesProcessor.java-process.pattern
MATCHLEVEL : ALL
ALL : 24, UPD : 24, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:44:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
-if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
-return text;
-}
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
+if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
+return text;
+}
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/3655/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.placement.RecoverPointScheduler.java-scheduleStorageSourcePoolConstraint.pattern
MATCHLEVEL : ALL
ALL : 26, UPD : 0, INS : 1, DEL : 25
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:44:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
-if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
-return text;
-}
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
+if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
+return text;
+}
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/3655/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.placement.RecoverPointScheduler.java-scheduleStorageSourcePoolConstraint.pattern
MATCHLEVEL : ALL
ALL : 26, UPD : 0, INS : 1, DEL : 25
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:44:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
-if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
-return text;
-}
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
+}
+if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
+return text;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/3655/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.placement.RecoverPointScheduler.java-scheduleStorageSourcePoolConstraint.pattern
MATCHLEVEL : ALL
ALL : 26, UPD : 0, INS : 1, DEL : 25
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:44:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
-if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
-return text;
-}
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
+if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
+return text;
+}
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 26, UPD : 0, INS : 1, DEL : 25
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:44:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
-if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
-return text;
-}
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
+}
+if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
+return text;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 26, UPD : 0, INS : 1, DEL : 25
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:44:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
-if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
-return text;
-}
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
+}
+if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
+return text;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 26, UPD : 0, INS : 1, DEL : 25
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:44:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
-if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
-return text;
-}
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
+}
+if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
+return text;
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 26, UPD : 0, INS : 1, DEL : 25
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:44:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
-if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
-return text;
-}
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
 if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
+if(text!=null){
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
+}
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/258/pattern-ver1-serial/web.src.main.java.com.epam.freelancer.web.controller.UserController.java-addIsComplaintInOrderings.pattern
MATCHLEVEL : ALL
ALL : 28, UPD : 3, INS : 0, DEL : 25
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:44:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java[3557,3731]
------------Candidate---------------
 private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
 if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
 return text;
 }
 if(timeToLive<0){
 throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
 }
 int searchLength=searchList.length;
 int replacementLength=replacementList.length;
 if(searchLength!=replacementLength){
 throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
 }
 boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
 int textIndex=-1;
 int replaceIndex=-1;
 int tempIndex=-1;
 for(int i=0;i<searchLength;i++){
-if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+if((noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0)||(replacementList[i]==null)){
 continue;
 }
 tempIndex=text.indexOf(searchList[i]);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 if(textIndex==-1){
 return text;
 }
 int start=0;
 int increase=0;
 for(int i=0;i<searchList.length;i++){
 int greater=replacementList[i].length()-searchList[i].length();
 if(greater>0){
 increase+=3*greater;
 }
 }
 increase=Math.min(increase,text.length()/5);
 StringBuilder buf=new StringBuilder(text.length()+increase);
 while(textIndex!=-1){
 for(int i=start;i<textIndex;i++){
 buf.append(text.charAt(i));
 }
 buf.append(replacementList[replaceIndex]);
 start=textIndex+searchList[replaceIndex].length();
 textIndex=-1;
 replaceIndex=-1;
 tempIndex=-1;
 for(int i=0;i<searchLength;i++){
-if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
+if((noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0)||(replacementList[i]==null)){
 continue;
 }
 tempIndex=text.indexOf(searchList[i],start);
 if(tempIndex==-1){
 noMoreMatchesForReplIndex[i]=true;
 }else {
 if(textIndex==-1||tempIndex<textIndex){
 textIndex=tempIndex;
 replaceIndex=i;
 }
 }
 }
 }
 int textLength=text.length();
 for(int i=start;i<textLength;i++){
 buf.append(text.charAt(i));
 }
 String result=buf.toString();
 if(!repeat){
 return result;
 }
 return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
 }

PATTERN : /home/jiajun/GithubData/2011/V2/1860/pattern-ver1-serial/structr.structr-core.src.main.java.org.structr.core.entity.AbstractNode.java-collectRelatedNodes.pattern
MATCHLEVEL : ALL
ALL : 34, UPD : 34, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray]
---------START : 2019.09.07 AD at 01:39:36 CDT
---------TIME : 2019.09.07 AD at 03:44:38 CDT
--------------- END -----------------
Finish : lang-39 > patch : 4 | Start : Sat Sep 07 01:39:36 CDT 2019 | End : 2019.09.07 AD at 03:44:38 CDT
